Index: ../r-uu.app/demo/client/src/test/java/de/ruu/app/demo/client/datamodel/rs/company/ClientCompanyTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.app.demo.client.rs.company;\r\n\r\nimport de.ruu.app.demo.common.Company;\r\nimport de.ruu.app.demo.common.datamodel.dto.CompanyDTO;\r\nimport de.ruu.lib.cdi.se.CDIContainer;\r\nimport de.ruu.lib.junit.DisabledOnServerNotListening;\r\nimport jakarta.enterprise.inject.spi.CDI;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.junit.jupiter.api.BeforeAll;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport java.util.Optional;\r\nimport java.util.Set;\r\n\r\nimport static org.hamcrest.CoreMatchers.is;\r\nimport static org.hamcrest.CoreMatchers.not;\r\nimport static org.hamcrest.CoreMatchers.nullValue;\r\nimport static org.hamcrest.MatcherAssert.assertThat;\r\nimport static org.junit.jupiter.api.Assertions.fail;\r\n\r\n@DisabledOnServerNotListening(propertyNameHost = \"company.rest-api.host\", propertyNamePort = \"company.rest-api.port\")\r\n@Slf4j\r\nclass ClientCompanyTest\r\n{\r\n\tprivate ClientCompany client;\r\n\r\n\t@BeforeAll static void beforeAll()\r\n\t{\r\n\t\tCDIContainer.bootstrap(ClientCompanyTest.class.getClassLoader());\r\n\t}\r\n\r\n\t@BeforeEach void beforeEach()\r\n\t{\r\n\t\tclient = CDI.current().select(ClientCompany.class).get();\r\n\t}\r\n\r\n\t@Test void testFindAll()\r\n\t{\r\n\t\tSet<Company> all = client.findAll();\r\n\r\n\t\tassertThat(all, is(not(nullValue())));\r\n\r\n\t\tlog.info(\"\\nreceived {} tag groups\", all.size());\r\n\t}\r\n\r\n\t@Test void testCreate()\r\n\t{\r\n\t\tString name = \"de/ruu/app/demo/client/datamodel/rs/postaladdress \" + System.currentTimeMillis();\r\n\r\n\t\tCompany company = client.create(new CompanyDTO(name));\r\n\r\n\t\tlog.info(\"\\nreceived company\\n{}\", company);\r\n\r\n\t\tif (company instanceof CompanyDTO)\r\n\t\t{\r\n\t\t\tCompanyDTO dto = (CompanyDTO) company;\r\n\r\n\t\t\tassertThat(dto.id  (), is(not(nullValue())));\r\n\t\t\tassertThat(dto.name(), is(name));\r\n\r\n\t\t\tassertThat(dto.version(), is(not(nullValue())));\r\n\t\t\tassertThat(dto.version(), is((short) 0       ));\r\n\r\n\t\t\tassertThat(dto.optionalDepartments()            , is(not(nullValue())));\r\n\t\t\tassertThat(dto.optionalDepartments().isPresent(), is(false));\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tfail(\"unexpected type: \" + company.getClass().getName());\r\n\t\t}\r\n\t}\r\n\r\n\t@Test void testRead()\r\n\t{\r\n\t\tString name = \"de/ruu/app/demo/client/datamodel/rs/postaladdress \" + System.currentTimeMillis();\r\n\r\n\t\tCompany companyIn = client.create(new CompanyDTO(name));\r\n\r\n\t\tOptional<Company> optional = client.read(companyIn.id());\r\n\r\n\t\tassertThat(optional            , is(not(nullValue())));\r\n\t\tassertThat(optional.isPresent(), is(not(false)));\r\n\r\n\t\tCompany companyOut = optional.get();\r\n\r\n\t\tlog.info(\"\\nreceived company\\n{}\" + companyOut);\r\n\r\n\t\tif (companyOut instanceof CompanyDTO)\r\n\t\t{\r\n\t\t\tCompanyDTO dto = (CompanyDTO) companyOut;\r\n\r\n\t\t\tassertThat(dto.id  (), is(not(nullValue())));\r\n\t\t\tassertThat(dto.name(), is(name));\r\n\r\n\t\t\tassertThat(dto.version(), is(not(nullValue())));\r\n\t\t\tassertThat(dto.version(), is((short) 0       ));\r\n\r\n\t\t\tassertThat(dto.optionalDepartments()            , is(not(nullValue())));\r\n\t\t\tassertThat(dto.optionalDepartments().isPresent(), is(false));\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tfail(\"unexpected type: \" + companyOut.getClass().getName());\r\n\t\t}\r\n\t}\r\n\r\n\t@Test void testUpdate()\r\n\t{\r\n\t\tCompany companyIn = client.create(new CompanyDTO(\"de/ruu/app/demo/client/datamodel/rs/postaladdress \" + System.currentTimeMillis()));\r\n\r\n\t\tString name = \"modified \" + System.currentTimeMillis();\r\n\r\n\t\tcompanyIn.name(name);\r\n\r\n\t\tCompany companyOut = client.update(companyIn);\r\n\r\n\t\tlog.info(\"\\nreceived company\\n{}\" + companyOut);\r\n\r\n\t\tif (companyOut instanceof CompanyDTO)\r\n\t\t{\r\n\t\t\tCompanyDTO dto = (CompanyDTO) companyOut;\r\n\r\n\t\t\tassertThat(dto.id(), is(not(nullValue())));\r\n\r\n\t\t\tassertThat(dto.version(), is(not(nullValue())));\r\n\t\t\tassertThat(dto.version(), is((short) 1       ));\r\n\r\n\t\t\tassertThat(dto.optionalDepartments()            , is(not(nullValue())));\r\n\t\t\tassertThat(dto.optionalDepartments().isPresent(), is(false));\r\n\r\n\t\t\tassertThat(dto.name(), is(name));\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tfail(\"unexpected type: \" + companyOut.getClass().getName());\r\n\t\t}\r\n\t}\r\n\r\n\t@Test void testDelete()\r\n\t{\r\n\t\tCompany company = client.create(new CompanyDTO(\"de/ruu/app/demo/client/datamodel/rs/postaladdress \" + System.currentTimeMillis()));\r\n\r\n\t\tlog.info(\"\\nreceived company\\n{}\", company);\r\n\r\n\t\tclient.delete(company.id());\r\n\r\n\t\tOptional<Company> optional = client.read(company.id());\r\n\r\n\t\tassertThat(optional            , is(not(nullValue())));\r\n\t\tassertThat(optional.isPresent(), is(false));\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/demo/client/src/test/java/de/ruu/app/demo/client/datamodel/rs/company/ClientCompanyTest.java b/../r-uu.app/demo/client/src/test/java/de/ruu/app/demo/client/datamodel/rs/company/ClientCompanyTest.java
--- a/../r-uu.app/demo/client/src/test/java/de/ruu/app/demo/client/datamodel/rs/company/ClientCompanyTest.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/demo/client/src/test/java/de/ruu/app/demo/client/datamodel/rs/company/ClientCompanyTest.java	(date 1720723240768)
@@ -1,7 +1,7 @@
-package de.ruu.app.demo.client.rs.company;
+package de.ruu.app.demo.client.datamodel.rs.company;
 
-import de.ruu.app.demo.common.Company;
-import de.ruu.app.demo.common.datamodel.dto.CompanyDTO;
+import de.ruu.app.datamodel.company.Company;
+import de.ruu.app.datamodel.company.dto.CompanyDTO;
 import de.ruu.lib.cdi.se.CDIContainer;
 import de.ruu.lib.junit.DisabledOnServerNotListening;
 import jakarta.enterprise.inject.spi.CDI;
@@ -46,7 +46,7 @@
 
 	@Test void testCreate()
 	{
-		String name = "de/ruu/app/demo/client/datamodel/rs/postaladdress " + System.currentTimeMillis();
+		String name = "name " + System.currentTimeMillis();
 
 		Company company = client.create(new CompanyDTO(name));
 
@@ -73,7 +73,7 @@
 
 	@Test void testRead()
 	{
-		String name = "de/ruu/app/demo/client/datamodel/rs/postaladdress " + System.currentTimeMillis();
+		String name = "name " + System.currentTimeMillis();
 
 		Company companyIn = client.create(new CompanyDTO(name));
 
@@ -107,7 +107,7 @@
 
 	@Test void testUpdate()
 	{
-		Company companyIn = client.create(new CompanyDTO("de/ruu/app/demo/client/datamodel/rs/postaladdress " + System.currentTimeMillis()));
+		Company companyIn = client.create(new CompanyDTO("name " + System.currentTimeMillis()));
 
 		String name = "modified " + System.currentTimeMillis();
 
@@ -139,7 +139,7 @@
 
 	@Test void testDelete()
 	{
-		Company company = client.create(new CompanyDTO("de/ruu/app/demo/client/datamodel/rs/postaladdress " + System.currentTimeMillis()));
+		Company company = client.create(new CompanyDTO("name " + System.currentTimeMillis()));
 
 		log.info("\nreceived company\n{}", company);
 
Index: ../r-uu.app/datamodel/postaladdress/jpadto-se/src/test/java/de/ruu/app/datamodel/postaladdress/jpa/se/PostalAddressServiceJPASETest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.app.datamodel.postaladdress.jpa.se;\r\n\r\nimport de.ruu.app.datamodel.postaladdress.PostalAddress;\r\nimport de.ruu.app.datamodel.postaladdress.dto.PostalAddressDTO;\r\nimport de.ruu.app.datamodel.postaladdress.jpa.PostalAddressEntity;\r\nimport de.ruu.lib.cdi.common.CDIExtension;\r\nimport de.ruu.lib.jpa.se.TransactionalInterceptorCDI;\r\nimport de.ruu.lib.junit.DisabledOnServerNotListening;\r\nimport jakarta.enterprise.inject.se.SeContainer;\r\nimport jakarta.enterprise.inject.se.SeContainerInitializer;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.junit.jupiter.api.AfterAll;\r\nimport org.junit.jupiter.api.BeforeAll;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport java.util.Optional;\r\nimport java.util.Set;\r\n\r\nimport static org.hamcrest.CoreMatchers.is;\r\nimport static org.hamcrest.CoreMatchers.not;\r\nimport static org.hamcrest.CoreMatchers.nullValue;\r\nimport static org.hamcrest.MatcherAssert.assertThat;\r\nimport static org.junit.jupiter.api.Assertions.fail;\r\n\r\n@DisabledOnServerNotListening\r\n(\r\n\t\tpropertyNameHost = \"de.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer.dbhost\",\r\n\t\tpropertyNamePort = \"de.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer.dbport\"\r\n)\r\n@Slf4j\r\nclass ClientPostalAddressTest\r\n{\r\n\tprivate static SeContainer seContainer; // initialisation and closure handled in before/after all methods\r\n\r\n\tprivate PostalAddressServiceJPASE service; // initialisation handled in before each method\r\n\r\n\t@SuppressWarnings(\"unchecked\")\r\n\t@BeforeAll static void beforeAll()\r\n\t{\r\n\t\tlog.debug(\"cdi container initialisation\");\r\n\t\ttry\r\n\t\t{\r\n\t\t\tseContainer =\r\n\t\t\t\t\tSeContainerInitializer\r\n\t\t\t\t\t\t\t.newInstance()\r\n\t\t\t\t\t\t\t.addExtensions     (CDIExtension.class               )\r\n\t\t\t\t\t\t\t.addBeanClasses    (TransactionalInterceptorCDI.class)\r\n\t\t\t\t\t\t\t.enableInterceptors(TransactionalInterceptorCDI.class)\r\n\t\t\t\t\t\t\t.initialize();\r\n\t\t}\r\n\t\tcatch (Exception e)\r\n\t\t{\r\n\t\t\tlog.error(\"failure initialising seContainer\", e);\r\n\t\t}\r\n\t\tlog.debug(\"cdi container initialisation {}\", seContainer == null ? \"unsuccessful\" : \"successful\");\r\n\t}\r\n\r\n\t@AfterAll\r\n\tstatic void afterAll()\r\n\t{\r\n\t\tlog.debug(\"cdi container shut down\");\r\n\t\tseContainer.close();\r\n\t\tlog.debug(\"cdi container shut down {}\", seContainer.isRunning() ? \"unsuccessful\" : \"successful\");\r\n\t}\r\n\r\n\t@BeforeEach\r\n\tvoid beforeEach()\r\n\t{\r\n\t\tservice = seContainer.select(PostalAddressServiceJPASE.class).get();\r\n\t}\r\n\r\n\t@Test void testFindAll()\r\n\t{\r\n\t\tSet<PostalAddressEntity> all = service.findAll();\r\n\r\n\t\tassertThat(all, is(not(nullValue())));\r\n\r\n\t\tlog.info(\"\\nreceived {} tag groups\", all.size());\r\n\t}\r\n\r\n\t@Test void testCreate()\r\n\t{\r\n\t\tString name = \"de/ruu/app/demo/client/datamodel/rs/postaladdress \" + System.currentTimeMillis();\r\n\r\n\t\tPostalAddress postalAddress =\r\n\t\t\t\tservice.create(\r\n\t\t\t\t\t\tPostalAddressEntity\r\n\t\t\t\t\t\t\t\t.builder()\r\n\t\t\t\t\t\t\t\t\t\t.city(name)\r\n\t\t\t\t\t\t\t\t.build());\r\n\r\n\t\tlog.info(\"\\nreceived postalAddress\\n{}\", postalAddress);\r\n\r\n\t\tif (postalAddress instanceof PostalAddressDTO)\r\n\t\t{\r\n\t\t\tPostalAddressDTO dto = (PostalAddressDTO) postalAddress;\r\n\r\n\t\t\tassertThat(dto.id  (), is(not(nullValue())));\r\n\t\t\tassertThat(dto.city(), is(name));\r\n\r\n\t\t\tassertThat(dto.version(), is(not(nullValue())));\r\n\t\t\tassertThat(dto.version(), is((short) 0       ));\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tfail(\"unexpected type: \" + postalAddress.getClass().getName());\r\n\t\t}\r\n\t}\r\n\r\n\t@Test void testRead()\r\n\t{\r\n\t\tString name = \"de/ruu/app/demo/client/datamodel/rs/postaladdress \" + System.currentTimeMillis();\r\n\r\n\t\tPostalAddress postalAddressIn =\r\n\t\t\t\tservice.create(\r\n\t\t\t\t\t\tPostalAddressEntity\r\n\t\t\t\t\t\t\t\t.builder()\r\n\t\t\t\t\t\t\t\t.city(name)\r\n\t\t\t\t\t\t\t\t.build());\r\n\r\n\t\tif (postalAddressIn instanceof PostalAddressEntity)\r\n\t\t{\r\n\t\t\tPostalAddressEntity entity = (PostalAddressEntity) postalAddressIn;\r\n\r\n\t\t\tOptional<PostalAddressEntity> optional = service.read(entity.id());\r\n\r\n\t\t\tassertThat(optional            , is(not(nullValue())));\r\n\t\t\tassertThat(optional.isPresent(), is(not(false)));\r\n\r\n\t\t\tPostalAddress postalAddressOut = optional.get();\r\n\r\n\t\t\tlog.info(\"\\nreceived postal address\\n{}\" + postalAddressOut);\r\n\r\n\t\t\tif (postalAddressOut instanceof PostalAddressEntity)\r\n\t\t\t{\r\n\t\t\t\tentity = (PostalAddressEntity) postalAddressOut;\r\n\r\n\t\t\t\tassertThat(entity.id  (), is(not(nullValue())));\r\n\t\t\t\tassertThat(entity.city(), is(name));\r\n\r\n\t\t\t\tassertThat(entity.version(), is(not(nullValue())));\r\n\t\t\t\tassertThat(entity.version(), is((short) 0       ));\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tfail(\"unexpected type: \" + postalAddressOut.getClass().getName());\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t@Test void testUpdate()\r\n\t{\r\n\t\tString name = \"de/ruu/app/demo/client/datamodel/rs/postaladdress \" + System.currentTimeMillis();\r\n\r\n\t\tPostalAddressEntity postalAddressIn = service.create(PostalAddressEntity.builder().city(name).build());\r\n\r\n\t\tname = \"modified \" + System.currentTimeMillis();\r\n\r\n\t\tpostalAddressIn.setCity(name);\r\n\r\n\t\tPostalAddress postalAddressOut = service.update(postalAddressIn);\r\n\r\n\t\tlog.info(\"\\nreceived postal address\\n{}\" + postalAddressOut);\r\n\r\n\t\tif (postalAddressOut instanceof PostalAddressEntity)\r\n\t\t{\r\n\t\t\tPostalAddressEntity entity = (PostalAddressEntity) postalAddressOut;\r\n\r\n\t\t\tassertThat(entity.id(), is(not(nullValue())));\r\n\r\n\t\t\tassertThat(entity.version(), is(not(nullValue())));\r\n\t\t\tassertThat(entity.version(), is((short) 1       ));\r\n\r\n\t\t\tassertThat(entity.city(), is(name));\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tfail(\"unexpected type: \" + postalAddressOut.getClass().getName());\r\n\t\t}\r\n\t}\r\n\r\n\t@Test void testDelete()\r\n\t{\r\n\t\tString name = \"de/ruu/app/demo/client/datamodel/rs/postaladdress \" + System.currentTimeMillis();\r\n\r\n\t\tPostalAddressEntity postalAddress = service.create(PostalAddressEntity.builder().city(name).build());;\r\n\r\n\t\tlog.info(\"\\nreceived postal address\\n{}\", postalAddress);\r\n\r\n\t\tif (postalAddress instanceof PostalAddressEntity)\r\n\t\t{\r\n\t\t\tPostalAddressEntity entity = (PostalAddressEntity) postalAddress;\r\n\r\n\t\t\tservice.delete(entity.id());\r\n\r\n\t\t\tOptional<PostalAddressEntity> optional = service.read(entity.id());\r\n\r\n\t\t\tassertThat(optional            , is(not(nullValue())));\r\n\t\t\tassertThat(optional.isPresent(), is(false));\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tfail(\"unexpected type: \" + postalAddress.getClass().getName());\r\n\t\t}\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/postaladdress/jpadto-se/src/test/java/de/ruu/app/datamodel/postaladdress/jpa/se/PostalAddressServiceJPASETest.java b/../r-uu.app/datamodel/postaladdress/jpadto-se/src/test/java/de/ruu/app/datamodel/postaladdress/jpa/se/PostalAddressServiceJPASETest.java
--- a/../r-uu.app/datamodel/postaladdress/jpadto-se/src/test/java/de/ruu/app/datamodel/postaladdress/jpa/se/PostalAddressServiceJPASETest.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/postaladdress/jpadto-se/src/test/java/de/ruu/app/datamodel/postaladdress/jpa/se/PostalAddressServiceJPASETest.java	(date 1720722620622)
@@ -1,9 +1,9 @@
 package de.ruu.app.datamodel.postaladdress.jpa.se;
 
 import de.ruu.app.datamodel.postaladdress.PostalAddress;
-import de.ruu.app.datamodel.postaladdress.dto.PostalAddressDTO;
 import de.ruu.app.datamodel.postaladdress.jpa.PostalAddressEntity;
 import de.ruu.lib.cdi.common.CDIExtension;
+import de.ruu.lib.cdi.se.CDIContainer;
 import de.ruu.lib.jpa.se.TransactionalInterceptorCDI;
 import de.ruu.lib.junit.DisabledOnServerNotListening;
 import jakarta.enterprise.inject.se.SeContainer;
@@ -29,7 +29,7 @@
 		propertyNamePort = "de.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer.dbport"
 )
 @Slf4j
-class ClientPostalAddressTest
+class PostalAddressServiceJPASETest
 {
 	private static SeContainer seContainer; // initialisation and closure handled in before/after all methods
 
@@ -46,8 +46,10 @@
 							.newInstance()
 							.addExtensions     (CDIExtension.class               )
 							.addBeanClasses    (TransactionalInterceptorCDI.class)
+							.addBeanClasses    (EntityManagerProducer.class      )
 							.enableInterceptors(TransactionalInterceptorCDI.class)
 							.initialize();
+			CDIContainer.bootstrap(PostalAddressServiceJPASETest.class.getClassLoader());
 		}
 		catch (Exception e)
 		{
@@ -76,12 +78,12 @@
 
 		assertThat(all, is(not(nullValue())));
 
-		log.info("\nreceived {} tag groups", all.size());
+		log.info("\nreceived {} postal addresses", all.size());
 	}
 
 	@Test void testCreate()
 	{
-		String name = "de/ruu/app/demo/client/datamodel/rs/postaladdress " + System.currentTimeMillis();
+		String name = "name " + System.currentTimeMillis();
 
 		PostalAddress postalAddress =
 				service.create(
@@ -92,15 +94,15 @@
 
 		log.info("\nreceived postalAddress\n{}", postalAddress);
 
-		if (postalAddress instanceof PostalAddressDTO)
+		if (postalAddress instanceof PostalAddressEntity)
 		{
-			PostalAddressDTO dto = (PostalAddressDTO) postalAddress;
+			PostalAddressEntity entity = (PostalAddressEntity) postalAddress;
 
-			assertThat(dto.id  (), is(not(nullValue())));
-			assertThat(dto.city(), is(name));
+			assertThat(entity.id  (), is(not(nullValue())));
+			assertThat(entity.city(), is(name));
 
-			assertThat(dto.version(), is(not(nullValue())));
-			assertThat(dto.version(), is((short) 0       ));
+			assertThat(entity.version(), is(not(nullValue())));
+			assertThat(entity.version(), is((short) 0       ));
 		}
 		else
 		{
@@ -110,7 +112,7 @@
 
 	@Test void testRead()
 	{
-		String name = "de/ruu/app/demo/client/datamodel/rs/postaladdress " + System.currentTimeMillis();
+		String name = "name " + System.currentTimeMillis();
 
 		PostalAddress postalAddressIn =
 				service.create(
@@ -151,7 +153,7 @@
 
 	@Test void testUpdate()
 	{
-		String name = "de/ruu/app/demo/client/datamodel/rs/postaladdress " + System.currentTimeMillis();
+		String name = "name " + System.currentTimeMillis();
 
 		PostalAddressEntity postalAddressIn = service.create(PostalAddressEntity.builder().city(name).build());
 
@@ -182,7 +184,7 @@
 
 	@Test void testDelete()
 	{
-		String name = "de/ruu/app/demo/client/datamodel/rs/postaladdress " + System.currentTimeMillis();
+		String name = "name " + System.currentTimeMillis();
 
 		PostalAddressEntity postalAddress = service.create(PostalAddressEntity.builder().city(name).build());;
 
Index: ../r-uu.app/demo/client/src/main/java/de/ruu/app/demo/client/datamodel/rs/company/ClientCompany.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.app.demo.client.rs.company;\r\n\r\nimport de.ruu.app.demo.common.Company;\r\nimport de.ruu.app.demo.common.CompanyService;\r\nimport de.ruu.app.demo.common.Paths;\r\nimport de.ruu.app.demo.common.datamodel.dto.CompanyDTO;\r\nimport de.ruu.lib.util.jsonb.JsonbConfigurator;\r\nimport de.ruu.lib.util.rs.RestClientCallException;\r\nimport de.ruu.lib.util.rs.filter.logging.ClientRequestLoggingFilter;\r\nimport jakarta.annotation.PostConstruct;\r\nimport jakarta.annotation.PreDestroy;\r\nimport jakarta.inject.Singleton;\r\nimport jakarta.ws.rs.client.Client;\r\nimport jakarta.ws.rs.client.ClientBuilder;\r\nimport jakarta.ws.rs.client.Entity;\r\nimport jakarta.ws.rs.client.WebTarget;\r\nimport jakarta.ws.rs.core.GenericType;\r\nimport jakarta.ws.rs.core.Response;\r\nimport jakarta.ws.rs.core.Response.Status;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.eclipse.microprofile.config.ConfigProvider;\r\n\r\nimport java.net.URI;\r\nimport java.util.HashSet;\r\nimport java.util.Optional;\r\nimport java.util.Set;\r\n\r\nimport static de.ruu.lib.util.BooleanFunctions.not;\r\nimport static jakarta.ws.rs.core.MediaType.APPLICATION_JSON;\r\n\r\n@Singleton\r\n@Slf4j\r\npublic class ClientCompany implements CompanyService<Company>\r\n{\r\n\tprivate static final String UNEXPECTED_STATUS = \"unexpected status: \";\r\n\r\n//\t@Inject\r\n//\t@ConfigProperty(name = \"company.rest-api.scheme\", defaultValue = \"http\")\r\n\tprivate String scheme =\r\n\t\t\tConfigProvider.getConfig().getOptionalValue(\"company.rest-api.scheme\", String.class).orElse(\"http\");\r\n\r\n//\t@Inject\r\n//\t@ConfigProperty(name = \"company.rest-api.host\"  , defaultValue = \"127.0.0.1\")\r\n\tprivate String host =\r\n\t\t\tConfigProvider.getConfig().getOptionalValue(\"company.rest-api.host\", String.class).orElse(\"127.0.0.1\");\r\n\r\n//\t@Inject\r\n//\t@ConfigProperty(name = \"company.rest-api.port\"  , defaultValue = \"8080\")\r\n\tprivate Integer port =\r\n\t\t\tConfigProvider.getConfig().getOptionalValue(\"company.rest-api.port\", Integer.class).orElse(8080);\r\n\r\n\tprivate URI uri;\r\n\r\n\tprivate String templateCompany;\r\n\tprivate String templateCompanyWithDepartments;\r\n\r\n\tprivate Client client;\r\n\r\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\t// lifecycle methods\r\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\t@PostConstruct public void postConstruct()\r\n\t{\r\n\t\tString schemaHostPort = scheme + \"://\" + host + \":\" + port;\r\n\r\n\t\turi = URI.create(schemaHostPort + Paths.DEMO + Paths.COMPANY);\r\n\r\n\t\tlog.debug(\"scheme        : {}\", scheme);\r\n\t\tlog.debug(\"host          : {}\", host);\r\n\t\tlog.debug(\"port          : {}\", port);\r\n\t\tlog.debug(\"schemaHostPort: {}\", schemaHostPort);\r\n\t\tlog.debug(\"uri           : {}\", uri);\r\n\r\n\t\tclient = ClientBuilder.newClient();\r\n\t\tclient.register(new JsonbConfigurator());\r\n\t\tclient.register(new ClientRequestLoggingFilter());\r\n\t}\r\n\r\n\t@PreDestroy public void preDestroy() { client.close(); }\r\n\r\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\t// interface implementations\r\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\t@Override public Company create(Company company)\r\n\t{\r\n\t\tResponse response = client.target(uri).request().post(Entity.entity(company, APPLICATION_JSON));\r\n\r\n\t\tif (not(response.getStatus() == Status.CREATED.getStatusCode()))\r\n\t\t{\r\n\t\t\tthrow new RestClientCallException(UNEXPECTED_STATUS + response.getStatus() + \"\\nuri: \" + uri, response);\r\n\t\t}\r\n\r\n\t\treturn response.readEntity(CompanyDTO.class);\r\n\t}\r\n\r\n\t@Override public Optional<Company> read(Long id)\r\n\t{\r\n\t\tWebTarget target   = client.target(uri + Paths.BY_ID);\r\n\t\tResponse  response = target.resolveTemplate(\"id\", id).request().get();\r\n\r\n\t\tint status = response.getStatus();\r\n\r\n\t\tif (status == Status.OK.getStatusCode())\r\n\t\t{\r\n\t\t\treturn Optional.of(response.readEntity(CompanyDTO.class));\r\n\t\t}\r\n\t\telse if (status == Status.NOT_FOUND.getStatusCode())\r\n\t\t{\r\n\t\t\treturn Optional.empty();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthrow new RestClientCallException(UNEXPECTED_STATUS + status + \"\\nuri: \" + target.getUri(), response);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t@Override public Company update(Company company)\r\n\t{\r\n\t\tResponse response = client.target(uri).request().put(Entity.entity(company, APPLICATION_JSON));\r\n\r\n\t\tif (not(response.getStatus() == Status.OK.getStatusCode()))\r\n\t\t{\r\n\t\t\tthrow new RestClientCallException(UNEXPECTED_STATUS + response.getStatus() + \"\\nuri: \" + uri, response);\r\n\t\t}\r\n\r\n\t\treturn response.readEntity(CompanyDTO.class);\r\n\t}\r\n\r\n\t@Override public void delete(Long id)\r\n\t{\r\n\t\tWebTarget target   = client.target(uri + Paths.BY_ID);\r\n\t\tResponse  response = target.resolveTemplate(\"id\", id).request().delete();\r\n\r\n\t\tif (not(response.getStatus() == Status.OK.getStatusCode()))\r\n\t\t{\r\n\t\t\tthrow new RestClientCallException(UNEXPECTED_STATUS + response.getStatus() + \"\\nuri: \" + target.getUri(), response);\r\n\t\t}\r\n\t}\r\n\r\n\t@Override public Set<Company> findAll()\r\n\t{\r\n\t\tResponse response = client.target(uri).request().get();\r\n\r\n\t\tif (not(response.getStatus() == Status.OK.getStatusCode()))\r\n\t\t{\r\n\t\t\tthrow new RestClientCallException(UNEXPECTED_STATUS + response.getStatus() + \"\\nuri: \" + uri, response);\r\n\t\t}\r\n\r\n\t\treturn new HashSet<>(response.readEntity(new GenericType<HashSet<CompanyDTO>>() {}));\r\n\t}\r\n\r\n\t@Override public Optional<Company> findWithDepartments(Long id)\r\n\t{\r\n\t\tWebTarget target   = client.target(uri + Paths.BY_ID_WITH_DEPARTMENTS);\r\n\t\tResponse  response = target.resolveTemplate(\"id\", id).request().get();\r\n\r\n\t\tif (not(response.getStatus() == Status.OK.getStatusCode()))\r\n\t\t{\r\n\t\t\tthrow new RestClientCallException(UNEXPECTED_STATUS + response.getStatus() + \"\\nuri: \" + target.getUri(), response);\r\n\t\t}\r\n\r\n\t\treturn Optional.of(response.readEntity(CompanyDTO.class));\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/demo/client/src/main/java/de/ruu/app/demo/client/datamodel/rs/company/ClientCompany.java b/../r-uu.app/demo/client/src/main/java/de/ruu/app/demo/client/datamodel/rs/company/ClientCompany.java
--- a/../r-uu.app/demo/client/src/main/java/de/ruu/app/demo/client/datamodel/rs/company/ClientCompany.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/demo/client/src/main/java/de/ruu/app/demo/client/datamodel/rs/company/ClientCompany.java	(date 1720677982583)
@@ -1,9 +1,9 @@
-package de.ruu.app.demo.client.rs.company;
+package de.ruu.app.demo.client.datamodel.rs.company;
 
-import de.ruu.app.demo.common.Company;
-import de.ruu.app.demo.common.CompanyService;
+import de.ruu.app.datamodel.company.Company;
+import de.ruu.app.datamodel.company.CompanyService;
+import de.ruu.app.datamodel.company.dto.CompanyDTO;
 import de.ruu.app.demo.common.Paths;
-import de.ruu.app.demo.common.datamodel.dto.CompanyDTO;
 import de.ruu.lib.util.jsonb.JsonbConfigurator;
 import de.ruu.lib.util.rs.RestClientCallException;
 import de.ruu.lib.util.rs.filter.logging.ClientRequestLoggingFilter;
Index: ../r-uu.app/datamodel/company/jpadto-se/src/test/java/de/ruu/app/datamodel/company/jpa/se/EntityManagerProducer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.app.datamodel.postaladdress.jpa.se;\r\n\r\nimport de.ruu.app.datamodel.postaladdress.jpa.PostalAddressEntity;\r\nimport de.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer;\r\nimport jakarta.enterprise.inject.Produces;\r\nimport jakarta.inject.Singleton;\r\nimport jakarta.persistence.EntityManager;\r\n\r\nimport java.util.List;\r\n\r\n@Singleton public class EntityManagerProducer extends AbstractEntityManagerProducer\r\n{\r\n\t@Override public List<Class<?>> managedClasses() { return List.of(PostalAddressEntity.class); }\r\n\r\n\t@Override @Produces public EntityManager produce() { return super.produce(); }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/company/jpadto-se/src/test/java/de/ruu/app/datamodel/company/jpa/se/EntityManagerProducer.java b/../r-uu.app/datamodel/company/jpadto-se/src/test/java/de/ruu/app/datamodel/company/jpa/se/EntityManagerProducer.java
--- a/../r-uu.app/datamodel/company/jpadto-se/src/test/java/de/ruu/app/datamodel/company/jpa/se/EntityManagerProducer.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/company/jpadto-se/src/test/java/de/ruu/app/datamodel/company/jpa/se/EntityManagerProducer.java	(date 1720698803288)
@@ -1,6 +1,7 @@
-package de.ruu.app.datamodel.postaladdress.jpa.se;
+package de.ruu.app.datamodel.company.jpa.se;
 
-import de.ruu.app.datamodel.postaladdress.jpa.PostalAddressEntity;
+import de.ruu.app.datamodel.company.jpa.CompanyEntity;
+import de.ruu.app.datamodel.company.jpa.DepartmentEntity;
 import de.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer;
 import jakarta.enterprise.inject.Produces;
 import jakarta.inject.Singleton;
@@ -10,7 +11,15 @@
 
 @Singleton public class EntityManagerProducer extends AbstractEntityManagerProducer
 {
-	@Override public List<Class<?>> managedClasses() { return List.of(PostalAddressEntity.class); }
+	@Override public List<Class<?>> managedClasses()
+	{
+		return
+				List.of
+				(
+						  CompanyEntity   .class
+						, DepartmentEntity.class
+				);
+	}
 
 	@Override @Produces public EntityManager produce() { return super.produce(); }
 }
\ No newline at end of file
Index: ../r-uu.app/datamodel/company/jpadto-se/src/test/java/de/ruu/app/datamodel/company/jpa/se/CompanyServiceJPASETest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.app.datamodel.company.jpa.se;\r\n\r\nimport de.ruu.app.datamodel.postaladdress.PostalAddress;\r\nimport de.ruu.app.datamodel.postaladdress.jpa.PostalAddressEntity;\r\nimport de.ruu.lib.cdi.common.CDIExtension;\r\nimport de.ruu.lib.cdi.se.CDIContainer;\r\nimport de.ruu.lib.jpa.se.TransactionalInterceptorCDI;\r\nimport de.ruu.lib.junit.DisabledOnServerNotListening;\r\nimport jakarta.enterprise.inject.se.SeContainer;\r\nimport jakarta.enterprise.inject.se.SeContainerInitializer;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.junit.jupiter.api.AfterAll;\r\nimport org.junit.jupiter.api.BeforeAll;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport java.util.Optional;\r\nimport java.util.Set;\r\n\r\nimport static org.hamcrest.CoreMatchers.is;\r\nimport static org.hamcrest.CoreMatchers.not;\r\nimport static org.hamcrest.CoreMatchers.nullValue;\r\nimport static org.hamcrest.MatcherAssert.assertThat;\r\nimport static org.junit.jupiter.api.Assertions.fail;\r\n\r\n@DisabledOnServerNotListening\r\n(\r\n\t\tpropertyNameHost = \"de.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer.dbhost\",\r\n\t\tpropertyNamePort = \"de.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer.dbport\"\r\n)\r\n@Slf4j\r\nclass PostalAddressServiceJPASETest\r\n{\r\n\tprivate static SeContainer seContainer; // initialisation and closure handled in before/after all methods\r\n\r\n\tprivate PostalAddressServiceJPASE service; // initialisation handled in before each method\r\n\r\n\t@SuppressWarnings(\"unchecked\")\r\n\t@BeforeAll static void beforeAll()\r\n\t{\r\n\t\tlog.debug(\"cdi container initialisation\");\r\n\t\ttry\r\n\t\t{\r\n\t\t\tseContainer =\r\n\t\t\t\t\tSeContainerInitializer\r\n\t\t\t\t\t\t\t.newInstance()\r\n\t\t\t\t\t\t\t.addExtensions     (CDIExtension.class               )\r\n\t\t\t\t\t\t\t.addBeanClasses    (TransactionalInterceptorCDI.class)\r\n\t\t\t\t\t\t\t.addBeanClasses    (EntityManagerProducer.class      )\r\n\t\t\t\t\t\t\t.enableInterceptors(TransactionalInterceptorCDI.class)\r\n\t\t\t\t\t\t\t.initialize();\r\n\t\t\tCDIContainer.bootstrap(PostalAddressServiceJPASETest.class.getClassLoader());\r\n\t\t}\r\n\t\tcatch (Exception e)\r\n\t\t{\r\n\t\t\tlog.error(\"failure initialising seContainer\", e);\r\n\t\t}\r\n\t\tlog.debug(\"cdi container initialisation {}\", seContainer == null ? \"unsuccessful\" : \"successful\");\r\n\t}\r\n\r\n\t@AfterAll\r\n\tstatic void afterAll()\r\n\t{\r\n\t\tlog.debug(\"cdi container shut down\");\r\n\t\tseContainer.close();\r\n\t\tlog.debug(\"cdi container shut down {}\", seContainer.isRunning() ? \"unsuccessful\" : \"successful\");\r\n\t}\r\n\r\n\t@BeforeEach\r\n\tvoid beforeEach()\r\n\t{\r\n\t\tservice = seContainer.select(PostalAddressServiceJPASE.class).get();\r\n\t}\r\n\r\n\t@Test void testFindAll()\r\n\t{\r\n\t\tSet<PostalAddressEntity> all = service.findAll();\r\n\r\n\t\tassertThat(all, is(not(nullValue())));\r\n\r\n\t\tlog.info(\"\\nreceived {} tag groups\", all.size());\r\n\t}\r\n\r\n\t@Test void testCreate()\r\n\t{\r\n\t\tString name = \"de/ruu/app/demo/client/datamodel/rs/postaladdress \" + System.currentTimeMillis();\r\n\r\n\t\tPostalAddress postalAddress =\r\n\t\t\t\tservice.create(\r\n\t\t\t\t\t\tPostalAddressEntity\r\n\t\t\t\t\t\t\t\t.builder()\r\n\t\t\t\t\t\t\t\t\t\t.city(name)\r\n\t\t\t\t\t\t\t\t.build());\r\n\r\n\t\tlog.info(\"\\nreceived postalAddress\\n{}\", postalAddress);\r\n\r\n\t\tif (postalAddress instanceof PostalAddressEntity)\r\n\t\t{\r\n\t\t\tPostalAddressEntity entity = (PostalAddressEntity) postalAddress;\r\n\r\n\t\t\tassertThat(entity.id  (), is(not(nullValue())));\r\n\t\t\tassertThat(entity.city(), is(name));\r\n\r\n\t\t\tassertThat(entity.version(), is(not(nullValue())));\r\n\t\t\tassertThat(entity.version(), is((short) 0       ));\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tfail(\"unexpected type: \" + postalAddress.getClass().getName());\r\n\t\t}\r\n\t}\r\n\r\n\t@Test void testRead()\r\n\t{\r\n\t\tString name = \"de/ruu/app/demo/client/datamodel/rs/postaladdress \" + System.currentTimeMillis();\r\n\r\n\t\tPostalAddress postalAddressIn =\r\n\t\t\t\tservice.create(\r\n\t\t\t\t\t\tPostalAddressEntity\r\n\t\t\t\t\t\t\t\t.builder()\r\n\t\t\t\t\t\t\t\t.city(name)\r\n\t\t\t\t\t\t\t\t.build());\r\n\r\n\t\tif (postalAddressIn instanceof PostalAddressEntity)\r\n\t\t{\r\n\t\t\tPostalAddressEntity entity = (PostalAddressEntity) postalAddressIn;\r\n\r\n\t\t\tOptional<PostalAddressEntity> optional = service.read(entity.id());\r\n\r\n\t\t\tassertThat(optional            , is(not(nullValue())));\r\n\t\t\tassertThat(optional.isPresent(), is(not(false)));\r\n\r\n\t\t\tPostalAddress postalAddressOut = optional.get();\r\n\r\n\t\t\tlog.info(\"\\nreceived postal address\\n{}\" + postalAddressOut);\r\n\r\n\t\t\tif (postalAddressOut instanceof PostalAddressEntity)\r\n\t\t\t{\r\n\t\t\t\tentity = (PostalAddressEntity) postalAddressOut;\r\n\r\n\t\t\t\tassertThat(entity.id  (), is(not(nullValue())));\r\n\t\t\t\tassertThat(entity.city(), is(name));\r\n\r\n\t\t\t\tassertThat(entity.version(), is(not(nullValue())));\r\n\t\t\t\tassertThat(entity.version(), is((short) 0       ));\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tfail(\"unexpected type: \" + postalAddressOut.getClass().getName());\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t@Test void testUpdate()\r\n\t{\r\n\t\tString name = \"de/ruu/app/demo/client/datamodel/rs/postaladdress \" + System.currentTimeMillis();\r\n\r\n\t\tPostalAddressEntity postalAddressIn = service.create(PostalAddressEntity.builder().city(name).build());\r\n\r\n\t\tname = \"modified \" + System.currentTimeMillis();\r\n\r\n\t\tpostalAddressIn.setCity(name);\r\n\r\n\t\tPostalAddress postalAddressOut = service.update(postalAddressIn);\r\n\r\n\t\tlog.info(\"\\nreceived postal address\\n{}\" + postalAddressOut);\r\n\r\n\t\tif (postalAddressOut instanceof PostalAddressEntity)\r\n\t\t{\r\n\t\t\tPostalAddressEntity entity = (PostalAddressEntity) postalAddressOut;\r\n\r\n\t\t\tassertThat(entity.id(), is(not(nullValue())));\r\n\r\n\t\t\tassertThat(entity.version(), is(not(nullValue())));\r\n\t\t\tassertThat(entity.version(), is((short) 1       ));\r\n\r\n\t\t\tassertThat(entity.city(), is(name));\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tfail(\"unexpected type: \" + postalAddressOut.getClass().getName());\r\n\t\t}\r\n\t}\r\n\r\n\t@Test void testDelete()\r\n\t{\r\n\t\tString name = \"de/ruu/app/demo/client/datamodel/rs/postaladdress \" + System.currentTimeMillis();\r\n\r\n\t\tPostalAddressEntity postalAddress = service.create(PostalAddressEntity.builder().city(name).build());;\r\n\r\n\t\tlog.info(\"\\nreceived postal address\\n{}\", postalAddress);\r\n\r\n\t\tif (postalAddress instanceof PostalAddressEntity)\r\n\t\t{\r\n\t\t\tPostalAddressEntity entity = (PostalAddressEntity) postalAddress;\r\n\r\n\t\t\tservice.delete(entity.id());\r\n\r\n\t\t\tOptional<PostalAddressEntity> optional = service.read(entity.id());\r\n\r\n\t\t\tassertThat(optional            , is(not(nullValue())));\r\n\t\t\tassertThat(optional.isPresent(), is(false));\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tfail(\"unexpected type: \" + postalAddress.getClass().getName());\r\n\t\t}\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/company/jpadto-se/src/test/java/de/ruu/app/datamodel/company/jpa/se/CompanyServiceJPASETest.java b/../r-uu.app/datamodel/company/jpadto-se/src/test/java/de/ruu/app/datamodel/company/jpa/se/CompanyServiceJPASETest.java
--- a/../r-uu.app/datamodel/company/jpadto-se/src/test/java/de/ruu/app/datamodel/company/jpa/se/CompanyServiceJPASETest.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/company/jpadto-se/src/test/java/de/ruu/app/datamodel/company/jpa/se/CompanyServiceJPASETest.java	(date 1720722620747)
@@ -1,19 +1,19 @@
 package de.ruu.app.datamodel.company.jpa.se;
 
-import de.ruu.app.datamodel.postaladdress.PostalAddress;
-import de.ruu.app.datamodel.postaladdress.jpa.PostalAddressEntity;
+import de.ruu.app.datamodel.company.Company;
+import de.ruu.app.datamodel.company.jpa.CompanyEntity;
 import de.ruu.lib.cdi.common.CDIExtension;
 import de.ruu.lib.cdi.se.CDIContainer;
 import de.ruu.lib.jpa.se.TransactionalInterceptorCDI;
 import de.ruu.lib.junit.DisabledOnServerNotListening;
-import jakarta.enterprise.inject.se.SeContainer;
-import jakarta.enterprise.inject.se.SeContainerInitializer;
+import jakarta.enterprise.inject.spi.CDI;
 import lombok.extern.slf4j.Slf4j;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
+import java.util.List;
 import java.util.Optional;
 import java.util.Set;
 
@@ -29,181 +29,176 @@
 		propertyNamePort = "de.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer.dbport"
 )
 @Slf4j
-class PostalAddressServiceJPASETest
+class CompanyServiceJPASETest
 {
-	private static SeContainer seContainer; // initialisation and closure handled in before/after all methods
+//	private static SeContainer seContainer; // initialisation and closure handled in before/after all methods
 
-	private PostalAddressServiceJPASE service; // initialisation handled in before each method
+	private CompanyServiceJPASE service; // initialisation handled in before each method
 
 	@SuppressWarnings("unchecked")
 	@BeforeAll static void beforeAll()
 	{
 		log.debug("cdi container initialisation");
-		try
-		{
-			seContainer =
-					SeContainerInitializer
-							.newInstance()
-							.addExtensions     (CDIExtension.class               )
-							.addBeanClasses    (TransactionalInterceptorCDI.class)
-							.addBeanClasses    (EntityManagerProducer.class      )
-							.enableInterceptors(TransactionalInterceptorCDI.class)
-							.initialize();
-			CDIContainer.bootstrap(PostalAddressServiceJPASETest.class.getClassLoader());
-		}
-		catch (Exception e)
-		{
-			log.error("failure initialising seContainer", e);
-		}
-		log.debug("cdi container initialisation {}", seContainer == null ? "unsuccessful" : "successful");
+		CDIContainer.bootstrap
+				(
+						  CompanyServiceJPASETest.class.getClassLoader()
+						, List.of(TransactionalInterceptorCDI.class)
+						, List.of(CDIExtension.class)
+				);
+//		try
+//		{
+//			seContainer =
+//					SeContainerInitializer
+//							.newInstance()
+//							.addExtensions     (CDIExtension.class               )
+//							.addBeanClasses    (TransactionalInterceptorCDI.class)
+//							.addBeanClasses    (EntityManagerProducer.class      )
+//							.enableInterceptors(TransactionalInterceptorCDI.class)
+//							.initialize();
+//		}
+//		catch (Exception e)
+//		{
+//			log.error("failure initialising seContainer", e);
+//		}
+//		log.debug("cdi container initialisation {}", seContainer == null ? "unsuccessful" : "successful");
 	}
 
 	@AfterAll
 	static void afterAll()
 	{
-		log.debug("cdi container shut down");
-		seContainer.close();
-		log.debug("cdi container shut down {}", seContainer.isRunning() ? "unsuccessful" : "successful");
+//		log.debug("cdi container shut down");
+//		seContainer.close();
+//		log.debug("cdi container shut down {}", seContainer.isRunning() ? "unsuccessful" : "successful");
 	}
 
 	@BeforeEach
 	void beforeEach()
 	{
-		service = seContainer.select(PostalAddressServiceJPASE.class).get();
+		service = CDI.current().select(CompanyServiceJPASE.class).get();
 	}
 
 	@Test void testFindAll()
 	{
-		Set<PostalAddressEntity> all = service.findAll();
+		Set<CompanyEntity> all = service.findAll();
 
 		assertThat(all, is(not(nullValue())));
 
-		log.info("\nreceived {} tag groups", all.size());
+		log.info("\nreceived {} companies", all.size());
 	}
 
 	@Test void testCreate()
 	{
-		String name = "de/ruu/app/demo/client/datamodel/rs/postaladdress " + System.currentTimeMillis();
+		String name = "name " + System.currentTimeMillis();
 
-		PostalAddress postalAddress =
-				service.create(
-						PostalAddressEntity
-								.builder()
-										.city(name)
-								.build());
+		Company company = service.create(new CompanyEntity(name));
 
-		log.info("\nreceived postalAddress\n{}", postalAddress);
+		log.info("\nreceived company\n{}", company);
 
-		if (postalAddress instanceof PostalAddressEntity)
+		if (company instanceof CompanyEntity)
 		{
-			PostalAddressEntity entity = (PostalAddressEntity) postalAddress;
+			CompanyEntity entity = (CompanyEntity) company;
 
 			assertThat(entity.id  (), is(not(nullValue())));
-			assertThat(entity.city(), is(name));
+			assertThat(entity.name(), is(name));
 
 			assertThat(entity.version(), is(not(nullValue())));
 			assertThat(entity.version(), is((short) 0       ));
 		}
 		else
 		{
-			fail("unexpected type: " + postalAddress.getClass().getName());
+			fail("unexpected type: " + company.getClass().getName());
 		}
 	}
 
 	@Test void testRead()
 	{
-		String name = "de/ruu/app/demo/client/datamodel/rs/postaladdress " + System.currentTimeMillis();
+		String name = "name " + System.currentTimeMillis();
 
-		PostalAddress postalAddressIn =
-				service.create(
-						PostalAddressEntity
-								.builder()
-								.city(name)
-								.build());
+		Company companyIn = service.create(new CompanyEntity(name));
 
-		if (postalAddressIn instanceof PostalAddressEntity)
+		if (companyIn instanceof CompanyEntity)
 		{
-			PostalAddressEntity entity = (PostalAddressEntity) postalAddressIn;
+			CompanyEntity entity = (CompanyEntity) companyIn;
 
-			Optional<PostalAddressEntity> optional = service.read(entity.id());
+			Optional<CompanyEntity> optional = service.read(entity.id());
 
 			assertThat(optional            , is(not(nullValue())));
 			assertThat(optional.isPresent(), is(not(false)));
 
-			PostalAddress postalAddressOut = optional.get();
+			CompanyEntity entityOut = optional.get();
 
-			log.info("\nreceived postal address\n{}" + postalAddressOut);
+			log.info("\nreceived company\n{}" + entityOut);
 
-			if (postalAddressOut instanceof PostalAddressEntity)
+			if (entityOut instanceof CompanyEntity)
 			{
-				entity = (PostalAddressEntity) postalAddressOut;
+				entity = (CompanyEntity) entityOut;
 
 				assertThat(entity.id  (), is(not(nullValue())));
-				assertThat(entity.city(), is(name));
+				assertThat(entity.name(), is(name));
 
 				assertThat(entity.version(), is(not(nullValue())));
 				assertThat(entity.version(), is((short) 0       ));
 			}
 			else
 			{
-				fail("unexpected type: " + postalAddressOut.getClass().getName());
+				fail("unexpected type: " + entityOut.getClass().getName());
 			}
 		}
 	}
 
 	@Test void testUpdate()
 	{
-		String name = "de/ruu/app/demo/client/datamodel/rs/postaladdress " + System.currentTimeMillis();
+		String name = "name " + System.currentTimeMillis();
 
-		PostalAddressEntity postalAddressIn = service.create(PostalAddressEntity.builder().city(name).build());
+		CompanyEntity companyIn = service.create(new CompanyEntity(name));
 
 		name = "modified " + System.currentTimeMillis();
 
-		postalAddressIn.setCity(name);
+		companyIn.name(name);
 
-		PostalAddress postalAddressOut = service.update(postalAddressIn);
+		Company companyOut = service.update(companyIn);
 
-		log.info("\nreceived postal address\n{}" + postalAddressOut);
+		log.info("\nreceived company\n{}" + companyOut);
 
-		if (postalAddressOut instanceof PostalAddressEntity)
+		if (companyOut instanceof CompanyEntity)
 		{
-			PostalAddressEntity entity = (PostalAddressEntity) postalAddressOut;
+			CompanyEntity entity = (CompanyEntity) companyOut;
 
 			assertThat(entity.id(), is(not(nullValue())));
 
 			assertThat(entity.version(), is(not(nullValue())));
 			assertThat(entity.version(), is((short) 1       ));
 
-			assertThat(entity.city(), is(name));
+			assertThat(entity.name(), is(name));
 		}
 		else
 		{
-			fail("unexpected type: " + postalAddressOut.getClass().getName());
+			fail("unexpected type: " + companyOut.getClass().getName());
 		}
 	}
 
 	@Test void testDelete()
 	{
-		String name = "de/ruu/app/demo/client/datamodel/rs/postaladdress " + System.currentTimeMillis();
+		String name = "name " + System.currentTimeMillis();
 
-		PostalAddressEntity postalAddress = service.create(PostalAddressEntity.builder().city(name).build());;
+		Company company = service.create(new CompanyEntity(name));
 
-		log.info("\nreceived postal address\n{}", postalAddress);
+		log.info("\nreceived company\n{}", company);
 
-		if (postalAddress instanceof PostalAddressEntity)
+		if (company instanceof CompanyEntity)
 		{
-			PostalAddressEntity entity = (PostalAddressEntity) postalAddress;
+			CompanyEntity entity = (CompanyEntity) company;
 
 			service.delete(entity.id());
 
-			Optional<PostalAddressEntity> optional = service.read(entity.id());
+			Optional<CompanyEntity> optional = service.read(entity.id());
 
 			assertThat(optional            , is(not(nullValue())));
 			assertThat(optional.isPresent(), is(false));
 		}
 		else
 		{
-			fail("unexpected type: " + postalAddress.getClass().getName());
+			fail("unexpected type: " + company.getClass().getName());
 		}
 	}
 }
\ No newline at end of file
Index: ../r-uu.app/demo/datamodel/src/main/resources/META-INF/beans.xml
===================================================================
diff --git a/../r-uu.app/demo/datamodel/src/main/resources/META-INF/beans.xml b/../r-uu.app/demo/datamodel/src/main/resources/META-INF/beans.xml
deleted file mode 100644
--- a/../r-uu.app/demo/datamodel/src/main/resources/META-INF/beans.xml	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ /dev/null	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
@@ -1,14 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-<beans xmlns="https://jakarta.ee/xml/ns/jakartaee"
-	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-	   xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee
-                           https://jakarta.ee/xml/ns/jakartaee/beans_4_0.xsd"
-	   version="4.0"
-	   bean-discovery-mode="all">
-	<!--    <interceptors>-->
-	<!--        <class>de.ruu.lib.jpa.se.AbstractTransactionalInterceptor</class>-->
-	<!--    </interceptors>-->
-	<!--	<scan>-->
-	<!--		<exclude name="org.**" />-->
-	<!--	</scan>-->
-</beans>
\ No newline at end of file
Index: ../r-uu.app/demo/datamodel/pom.xml
===================================================================
diff --git a/../r-uu.app/demo/datamodel/pom.xml b/../r-uu.app/demo/datamodel/pom.xml
deleted file mode 100644
--- a/../r-uu.app/demo/datamodel/pom.xml	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ /dev/null	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
@@ -1,20 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0"
-         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-    <modelVersion>4.0.0</modelVersion>
-    <parent>
-        <groupId>r-uu</groupId>
-        <artifactId>r-uu.app-demo</artifactId>
-        <version>0.0.1-SNAPSHOT</version>
-    </parent>
-
-    <artifactId>datamodel</artifactId>
-
-    <properties>
-        <maven.compiler.source>21</maven.compiler.source>
-        <maven.compiler.target>21</maven.compiler.target>
-        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-    </properties>
-
-</project>
\ No newline at end of file
Index: ../r-uu.app/demo/datamodel/src/main/java/module-info.java
===================================================================
diff --git a/../r-uu.app/demo/datamodel/src/main/java/module-info.java b/../r-uu.app/demo/datamodel/src/main/java/module-info.java
deleted file mode 100644
--- a/../r-uu.app/demo/datamodel/src/main/java/module-info.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ /dev/null	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
@@ -1,2 +0,0 @@
-module $MODULE_NAME$ {
-}
\ No newline at end of file
Index: ../r-uu.app/demo/datamodel/src/main/resources/META-INF/microprofile-config.properties
===================================================================
diff --git a/../r-uu.app/demo/datamodel/src/main/resources/META-INF/microprofile-config.properties b/../r-uu.app/demo/datamodel/src/main/resources/META-INF/microprofile-config.properties
deleted file mode 100644
--- a/../r-uu.app/demo/datamodel/src/main/resources/META-INF/microprofile-config.properties	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ /dev/null	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
@@ -1,10 +0,0 @@
-config_ordinal=100
-
-de.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer.dbhost=localhost
-de.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer.dbport=5433
-de.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer.dbname=staging
-
-de.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer.dbuser=staging
-de.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer.dbpass=staging
-# persistence unit (pu) name
-de.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer.puname=staging
\ No newline at end of file
Index: ../r-uu.app/datamodel/r-uu.app-datamodel-company/pom.xml
===================================================================
diff --git a/../r-uu.app/datamodel/r-uu.app-datamodel-company/pom.xml b/../r-uu.app/datamodel/r-uu.app-datamodel-company/pom.xml
deleted file mode 100644
--- a/../r-uu.app/datamodel/r-uu.app-datamodel-company/pom.xml	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ /dev/null	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
@@ -1,20 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0"
-         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-    <modelVersion>4.0.0</modelVersion>
-    <parent>
-        <groupId>r-uu</groupId>
-        <artifactId>r-uu.app-datamodel</artifactId>
-        <version>0.0.1-SNAPSHOT</version>
-    </parent>
-
-    <artifactId>r-uu.app-datamodel-company</artifactId>
-
-    <properties>
-        <maven.compiler.source>21</maven.compiler.source>
-        <maven.compiler.target>21</maven.compiler.target>
-        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-    </properties>
-
-</project>
\ No newline at end of file
Index: ../r-uu.app/datamodel/postaladdress/jpadto/src/main/java/de/ruu/app/datamodel/postaladdress/jpadto/Mapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.app.demo.common.datamodel;\r\n\r\nimport de.ruu.app.demo.common.datamodel.dto.CompanyDTO;\r\nimport de.ruu.app.demo.common.datamodel.dto.DepartmentDTO;\r\nimport de.ruu.app.demo.common.datamodel.jpa.CompanyEntity;\r\nimport de.ruu.app.demo.common.datamodel.jpa.DepartmentEntity;\r\nimport de.ruu.lib.mapstruct.ReferenceCycleTracking;\r\nimport lombok.NonNull;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.mapstruct.AfterMapping;\r\nimport org.mapstruct.BeforeMapping;\r\nimport org.mapstruct.Context;\r\nimport org.mapstruct.MappingTarget;\r\nimport org.mapstruct.ObjectFactory;\r\nimport org.mapstruct.factory.Mappers;\r\n\r\n@Slf4j\r\n@org.mapstruct.Mapper\r\npublic abstract class Mapper\r\n{\r\n\tpublic static final Mapper INSTANCE = Mappers.getMapper(Mapper.class);\r\n\r\n\tprivate static ReferenceCycleTracking CONTEXT  = new ReferenceCycleTracking();\r\n\r\n\tpublic abstract CompanyEntity    map(CompanyDTO       dto   );\r\n\tpublic abstract CompanyDTO       map(CompanyEntity    entity);\r\n\tpublic abstract DepartmentEntity map(DepartmentDTO    dto   );\r\n\tpublic abstract DepartmentDTO    map(DepartmentEntity entity);\r\n\r\n\t@BeforeMapping public void beforeMapping(CompanyDTO source, @MappingTarget CompanyEntity target)\r\n\t{\r\n\t\tlog.debug(\"before source {}, target  {}\", source, target);\r\n\t\ttarget.beforeMapping(source); // invoke callback for mapping\r\n\t}\r\n\r\n\t@BeforeMapping public void beforeMapping(CompanyEntity source, @MappingTarget CompanyDTO target)\r\n\t{\r\n\t\tlog.debug(\"before source {}, target  {}\", source, target);\r\n\t\ttarget.beforeMapping(source); // invoke callback for mapping\r\n\t}\r\n\r\n\t@AfterMapping public void afterMapping(CompanyDTO source, @MappingTarget CompanyEntity target)\r\n\t{\r\n\t\tlog.debug(\"after source {}, target  {}\", source, target);\r\n\t\ttarget.beforeMapping(source); // invoke callback for mapping\r\n\t}\r\n\r\n\t@AfterMapping public void afterMapping(CompanyEntity source, @MappingTarget CompanyDTO target)\r\n\t{\r\n\t\tlog.debug(\"after source {}, target  {}\", source, target);\r\n\t\ttarget.beforeMapping(source); // invoke callback for mapping\r\n\t}\r\n\r\n\t@BeforeMapping public void beforeMapping(DepartmentDTO source, @MappingTarget DepartmentEntity target)\r\n\t{\r\n\t\tlog.debug(\"before source {}, target  {}\", source, target);\r\n\t\ttarget.beforeMapping(source); // invoke callback for mapping\r\n\t}\r\n\r\n\t@BeforeMapping public void beforeMapping(DepartmentEntity source, @MappingTarget DepartmentDTO target)\r\n\t{\r\n\t\tlog.debug(\"before source {}, target  {}\", source, target);\r\n\t\ttarget.beforeMapping(source); // invoke callback for mapping\r\n\t}\r\n\r\n\t@AfterMapping public void afterMapping(DepartmentDTO source, @MappingTarget DepartmentEntity target)\r\n\t{\r\n\t\tlog.debug(\"after source {}, target  {}\", source, target);\r\n\t\ttarget.beforeMapping(source); // invoke callback for mapping\r\n\t}\r\n\r\n\t@AfterMapping public void afterMapping(DepartmentEntity source, @MappingTarget DepartmentDTO target)\r\n\t{\r\n\t\tlog.debug(\"after source {}, target  {}\", source, target);\r\n\t\ttarget.beforeMapping(source); // invoke callback for mapping\r\n\t}\r\n\r\n\t@ObjectFactory\r\n\t@NonNull\r\n\tCompanyEntity lookupOrCreate(@NonNull CompanyDTO input)\r\n\t{\r\n\t\tCompanyEntity result = CONTEXT.get(input, CompanyEntity.class);\r\n\t\tif (result == null)\r\n\t\t{\r\n\t\t\tresult = new CompanyEntity(input.name());\r\n\t\t\tCONTEXT.put(input, result);\r\n\t\t\tCONTEXT.put(result, input);\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t@ObjectFactory\r\n\t@NonNull\r\n\tCompanyDTO lookupOrCreate(@NonNull CompanyEntity input)\r\n\t{\r\n\t\tCompanyDTO result = CONTEXT.get(input, CompanyDTO.class);\r\n\t\tif (result == null)\r\n\t\t{\r\n\t\t\tresult = new CompanyDTO(input.name());\r\n\t\t\tCONTEXT.put(input, result);\r\n\t\t\tCONTEXT.put(result, input);\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t@ObjectFactory\r\n\t@NonNull\r\n\tDepartmentEntity lookupOrCreate(@NonNull DepartmentDTO input)\r\n\t{\r\n\t\tDepartmentEntity result = CONTEXT.get(input, DepartmentEntity.class);\r\n\t\tif (result == null)\r\n\t\t{\r\n\t\t\t\tCompanyEntity company = CONTEXT.get(input.company(), CompanyEntity.class);\r\n\t\t\t\tif (company == null)\r\n\t\t\t\t\t\tcompany = new CompanyEntity(input.company().name());\r\n\t\t\t\tresult = new DepartmentEntity(company, input.name());\r\n\t\t\t\tCONTEXT.put(input, result);\r\n\t\t\t\tCONTEXT.put(result, input);\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t@ObjectFactory\r\n\t@NonNull\r\n\tDepartmentDTO lookupOrCreate(@NonNull DepartmentEntity input)\r\n\t{\r\n\t\tDepartmentDTO result = CONTEXT.get(input, DepartmentDTO.class);\r\n\t\tif (result == null)\r\n\t\t{\r\n\t\t\tCompanyDTO company = CONTEXT.get(input.company(), CompanyDTO.class);\r\n\t\t\tif (company == null)\r\n\t\t\t\t\tcompany = new CompanyDTO(input.company().name());\r\n\t\t\tresult = new DepartmentDTO(company, input.name());\r\n\t\t\tCONTEXT.put(input, result);\r\n\t\t\tCONTEXT.put(result, input);\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/postaladdress/jpadto/src/main/java/de/ruu/app/datamodel/postaladdress/jpadto/Mapper.java b/../r-uu.app/datamodel/postaladdress/jpadto/src/main/java/de/ruu/app/datamodel/postaladdress/jpadto/Mapper.java
--- a/../r-uu.app/datamodel/postaladdress/jpadto/src/main/java/de/ruu/app/datamodel/postaladdress/jpadto/Mapper.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/postaladdress/jpadto/src/main/java/de/ruu/app/datamodel/postaladdress/jpadto/Mapper.java	(date 1720627622324)
@@ -1,17 +1,12 @@
-package de.ruu.app.demo.common.datamodel;
+package de.ruu.app.datamodel.postaladdress.jpadto;
 
-import de.ruu.app.demo.common.datamodel.dto.CompanyDTO;
-import de.ruu.app.demo.common.datamodel.dto.DepartmentDTO;
-import de.ruu.app.demo.common.datamodel.jpa.CompanyEntity;
-import de.ruu.app.demo.common.datamodel.jpa.DepartmentEntity;
+import de.ruu.app.datamodel.postaladdress.dto.PostalAddressDTO;
+import de.ruu.app.datamodel.postaladdress.jpa.PostalAddressEntity;
 import de.ruu.lib.mapstruct.ReferenceCycleTracking;
-import lombok.NonNull;
 import lombok.extern.slf4j.Slf4j;
 import org.mapstruct.AfterMapping;
 import org.mapstruct.BeforeMapping;
-import org.mapstruct.Context;
 import org.mapstruct.MappingTarget;
-import org.mapstruct.ObjectFactory;
 import org.mapstruct.factory.Mappers;
 
 @Slf4j
@@ -22,118 +17,30 @@
 
 	private static ReferenceCycleTracking CONTEXT  = new ReferenceCycleTracking();
 
-	public abstract CompanyEntity    map(CompanyDTO       dto   );
-	public abstract CompanyDTO       map(CompanyEntity    entity);
-	public abstract DepartmentEntity map(DepartmentDTO    dto   );
-	public abstract DepartmentDTO    map(DepartmentEntity entity);
-
-	@BeforeMapping public void beforeMapping(CompanyDTO source, @MappingTarget CompanyEntity target)
-	{
-		log.debug("before source {}, target  {}", source, target);
-		target.beforeMapping(source); // invoke callback for mapping
-	}
-
-	@BeforeMapping public void beforeMapping(CompanyEntity source, @MappingTarget CompanyDTO target)
-	{
-		log.debug("before source {}, target  {}", source, target);
-		target.beforeMapping(source); // invoke callback for mapping
-	}
-
-	@AfterMapping public void afterMapping(CompanyDTO source, @MappingTarget CompanyEntity target)
-	{
-		log.debug("after source {}, target  {}", source, target);
-		target.beforeMapping(source); // invoke callback for mapping
-	}
+	public abstract PostalAddressEntity map(PostalAddressDTO    dto   );
+	public abstract PostalAddressDTO    map(PostalAddressEntity entity);
 
-	@AfterMapping public void afterMapping(CompanyEntity source, @MappingTarget CompanyDTO target)
-	{
-		log.debug("after source {}, target  {}", source, target);
-		target.beforeMapping(source); // invoke callback for mapping
-	}
-
-	@BeforeMapping public void beforeMapping(DepartmentDTO source, @MappingTarget DepartmentEntity target)
+	@BeforeMapping public void beforeMapping(PostalAddressDTO source, @MappingTarget PostalAddressEntity target)
 	{
 		log.debug("before source {}, target  {}", source, target);
 		target.beforeMapping(source); // invoke callback for mapping
 	}
 
-	@BeforeMapping public void beforeMapping(DepartmentEntity source, @MappingTarget DepartmentDTO target)
+	@BeforeMapping public void beforeMapping(PostalAddressEntity source, @MappingTarget PostalAddressDTO target)
 	{
 		log.debug("before source {}, target  {}", source, target);
 		target.beforeMapping(source); // invoke callback for mapping
 	}
 
-	@AfterMapping public void afterMapping(DepartmentDTO source, @MappingTarget DepartmentEntity target)
+	@AfterMapping public void afterMapping(PostalAddressDTO source, @MappingTarget PostalAddressEntity target)
 	{
 		log.debug("after source {}, target  {}", source, target);
 		target.beforeMapping(source); // invoke callback for mapping
 	}
 
-	@AfterMapping public void afterMapping(DepartmentEntity source, @MappingTarget DepartmentDTO target)
+	@AfterMapping public void afterMapping(PostalAddressEntity source, @MappingTarget PostalAddressDTO target)
 	{
 		log.debug("after source {}, target  {}", source, target);
 		target.beforeMapping(source); // invoke callback for mapping
 	}
-
-	@ObjectFactory
-	@NonNull
-	CompanyEntity lookupOrCreate(@NonNull CompanyDTO input)
-	{
-		CompanyEntity result = CONTEXT.get(input, CompanyEntity.class);
-		if (result == null)
-		{
-			result = new CompanyEntity(input.name());
-			CONTEXT.put(input, result);
-			CONTEXT.put(result, input);
-		}
-		return result;
-	}
-
-	@ObjectFactory
-	@NonNull
-	CompanyDTO lookupOrCreate(@NonNull CompanyEntity input)
-	{
-		CompanyDTO result = CONTEXT.get(input, CompanyDTO.class);
-		if (result == null)
-		{
-			result = new CompanyDTO(input.name());
-			CONTEXT.put(input, result);
-			CONTEXT.put(result, input);
-		}
-		return result;
-	}
-
-	@ObjectFactory
-	@NonNull
-	DepartmentEntity lookupOrCreate(@NonNull DepartmentDTO input)
-	{
-		DepartmentEntity result = CONTEXT.get(input, DepartmentEntity.class);
-		if (result == null)
-		{
-				CompanyEntity company = CONTEXT.get(input.company(), CompanyEntity.class);
-				if (company == null)
-						company = new CompanyEntity(input.company().name());
-				result = new DepartmentEntity(company, input.name());
-				CONTEXT.put(input, result);
-				CONTEXT.put(result, input);
-		}
-		return result;
-	}
-
-	@ObjectFactory
-	@NonNull
-	DepartmentDTO lookupOrCreate(@NonNull DepartmentEntity input)
-	{
-		DepartmentDTO result = CONTEXT.get(input, DepartmentDTO.class);
-		if (result == null)
-		{
-			CompanyDTO company = CONTEXT.get(input.company(), CompanyDTO.class);
-			if (company == null)
-					company = new CompanyDTO(input.company().name());
-			result = new DepartmentDTO(company, input.name());
-			CONTEXT.put(input, result);
-			CONTEXT.put(result, input);
-		}
-		return result;
-	}
 }
\ No newline at end of file
Index: ../r-uu.app/demo/client/src/main/resources/META-INF/microprofile-config.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>company.rest-api.scheme=http\r\ncompany.rest-api.host=localhost\r\ncompany.rest-api.port=9080
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/../r-uu.app/demo/client/src/main/resources/META-INF/microprofile-config.properties b/../r-uu.app/demo/client/src/main/resources/META-INF/microprofile-config.properties
--- a/../r-uu.app/demo/client/src/main/resources/META-INF/microprofile-config.properties	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/demo/client/src/main/resources/META-INF/microprofile-config.properties	(date 1720536049392)
@@ -1,3 +1,7 @@
 company.rest-api.scheme=http
 company.rest-api.host=localhost
-company.rest-api.port=9080
\ No newline at end of file
+company.rest-api.port=9080
+
+postal-address.rest-api.scheme=http
+postal-address.rest-api.host=localhost
+postal-address.rest-api.port=9080
\ No newline at end of file
Index: ../r-uu.app/datamodel/postaladdress/jpadto/src/main/java/de/ruu/app/datamodel/postaladdress/jpa/PostalAddressServiceJPA.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.app.datamodel.postaladdress.jpadto.jpa;\r\n\r\nimport de.ruu.app.datamodel.postaladdress.PostalAddressService;\r\n\r\npublic interface PostalAddressServiceJPA extends PostalAddressService<PostalAddressEntity> { }
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/postaladdress/jpadto/src/main/java/de/ruu/app/datamodel/postaladdress/jpa/PostalAddressServiceJPA.java b/../r-uu.app/datamodel/postaladdress/jpadto/src/main/java/de/ruu/app/datamodel/postaladdress/jpa/PostalAddressServiceJPA.java
--- a/../r-uu.app/datamodel/postaladdress/jpadto/src/main/java/de/ruu/app/datamodel/postaladdress/jpa/PostalAddressServiceJPA.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/postaladdress/jpadto/src/main/java/de/ruu/app/datamodel/postaladdress/jpa/PostalAddressServiceJPA.java	(date 1720627622332)
@@ -1,4 +1,4 @@
-package de.ruu.app.datamodel.postaladdress.jpadto.jpa;
+package de.ruu.app.datamodel.postaladdress.jpa;
 
 import de.ruu.app.datamodel.postaladdress.PostalAddressService;
 
Index: ../r-uu.app/datamodel/postaladdress/common/src/main/java/de/ruu/app/datamodel/postaladdress/PostalAddressService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.app.demo.common;\r\n\r\nimport java.util.Optional;\r\nimport java.util.Set;\r\n\r\npublic interface CompanyService<C extends Company>\r\n{\r\n\tC           create(C company);\r\n\tOptional<C> read(Long id);\r\n\tC           update(C company);\r\n\tvoid        delete(Long id);\r\n\r\n\tSet<C>      findAll();\r\n\tOptional<C> findWithDepartments(Long id);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/postaladdress/common/src/main/java/de/ruu/app/datamodel/postaladdress/PostalAddressService.java b/../r-uu.app/datamodel/postaladdress/common/src/main/java/de/ruu/app/datamodel/postaladdress/PostalAddressService.java
--- a/../r-uu.app/datamodel/postaladdress/common/src/main/java/de/ruu/app/datamodel/postaladdress/PostalAddressService.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/postaladdress/common/src/main/java/de/ruu/app/datamodel/postaladdress/PostalAddressService.java	(date 1720519512625)
@@ -1,15 +1,14 @@
-package de.ruu.app.demo.common;
+package de.ruu.app.datamodel.postaladdress;
 
 import java.util.Optional;
 import java.util.Set;
 
-public interface CompanyService<C extends Company>
+public interface PostalAddressService<A extends PostalAddress>
 {
-	C           create(C company);
-	Optional<C> read(Long id);
-	C           update(C company);
+	A           create(A address);
+	Optional<A> read(Long id);
+	A           update(A company);
 	void        delete(Long id);
 
-	Set<C>      findAll();
-	Optional<C> findWithDepartments(Long id);
+	Set<A>      findAll();
 }
\ No newline at end of file
Index: ../r-uu.app/datamodel/postaladdress/jpadto-se/src/main/java/de/ruu/app/datamodel/postaladdress/jpa/se/PostalAddressRepositoryJPASE.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.app.datamodel.postaladdress.jpa.ee;\r\n\r\nimport de.ruu.app.datamodel.postaladdress.jpa.PostalAddressEntity;\r\nimport de.ruu.lib.jpa.core.AbstractRepository;\r\nimport jakarta.annotation.PostConstruct;\r\nimport jakarta.enterprise.context.ApplicationScoped;\r\nimport jakarta.persistence.EntityManager;\r\nimport jakarta.persistence.PersistenceContext;\r\nimport lombok.extern.slf4j.Slf4j;\r\n\r\n@ApplicationScoped\r\n@Slf4j\r\npublic class PostalAddressRepository extends AbstractRepository<PostalAddressEntity, Long>\r\n{\r\n\t@PersistenceContext(name = \"demo\") private EntityManager entityManager;\r\n\r\n\t@PostConstruct public void postConstruct() { log.debug(\"injected entity manager successfully: {}\", entityManager != null); }\r\n\r\n\t@Override protected EntityManager entityManager() { return entityManager; }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/postaladdress/jpadto-se/src/main/java/de/ruu/app/datamodel/postaladdress/jpa/se/PostalAddressRepositoryJPASE.java b/../r-uu.app/datamodel/postaladdress/jpadto-se/src/main/java/de/ruu/app/datamodel/postaladdress/jpa/se/PostalAddressRepositoryJPASE.java
--- a/../r-uu.app/datamodel/postaladdress/jpadto-se/src/main/java/de/ruu/app/datamodel/postaladdress/jpa/se/PostalAddressRepositoryJPASE.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/postaladdress/jpadto-se/src/main/java/de/ruu/app/datamodel/postaladdress/jpa/se/PostalAddressRepositoryJPASE.java	(date 1720696776911)
@@ -1,18 +1,20 @@
-package de.ruu.app.datamodel.postaladdress.jpa.ee;
+package de.ruu.app.datamodel.postaladdress.jpa.se;
 
 import de.ruu.app.datamodel.postaladdress.jpa.PostalAddressEntity;
 import de.ruu.lib.jpa.core.AbstractRepository;
+import de.ruu.lib.jpa.se.Transactional;
 import jakarta.annotation.PostConstruct;
-import jakarta.enterprise.context.ApplicationScoped;
+import jakarta.inject.Inject;
+import jakarta.inject.Singleton;
 import jakarta.persistence.EntityManager;
-import jakarta.persistence.PersistenceContext;
 import lombok.extern.slf4j.Slf4j;
 
-@ApplicationScoped
+@Singleton
+@Transactional
 @Slf4j
-public class PostalAddressRepository extends AbstractRepository<PostalAddressEntity, Long>
+public class PostalAddressRepositoryJPASE extends AbstractRepository<PostalAddressEntity, Long>
 {
-	@PersistenceContext(name = "demo") private EntityManager entityManager;
+	@Inject private EntityManager entityManager;
 
 	@PostConstruct public void postConstruct() { log.debug("injected entity manager successfully: {}", entityManager != null); }
 
Index: ../r-uu.app/datamodel/postaladdress/jpadto/src/main/java/de/ruu/app/datamodel/postaladdress/dto/PostalAddressDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.app.datamodel.postaladdress.jpadto.dto;\r\n\r\nimport de.ruu.app.datamodel.postaladdress.PostalAddress;\r\nimport de.ruu.app.datamodel.postaladdress.jpadto.Mapper;\r\nimport de.ruu.app.datamodel.postaladdress.jpadto.jpa.PostalAddressEntity;\r\nimport de.ruu.lib.jpa.core.AbstractDTO;\r\nimport de.ruu.lib.jpa.core.mapstruct.AbstractMappedDTO;\r\nimport lombok.AccessLevel;\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Builder;\r\nimport lombok.EqualsAndHashCode;\r\nimport lombok.Getter;\r\nimport lombok.NoArgsConstructor;\r\nimport lombok.NonNull;\r\nimport lombok.Setter;\r\nimport lombok.experimental.Accessors;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.mapstruct.factory.Mappers;\r\n\r\n@Slf4j\r\n@Getter\r\n@Setter\r\n@Accessors(fluent = true) // generate fluent style getters but also implement java bean style getters\r\n// to comply to java bean conventions\r\n@EqualsAndHashCode(callSuper = true)\r\n@NoArgsConstructor(access = AccessLevel.PROTECTED) // required by jpa\r\n@AllArgsConstructor\r\n@Builder\r\npublic class PostalAddressDTO extends AbstractMappedDTO<PostalAddressEntity> implements PostalAddress\r\n{\r\n\t@NonNull @Builder.Default private String street = \"\";\r\n\t@NonNull @Builder.Default private String streetNumber = \"\";\r\n\t@NonNull @Builder.Default private String city = \"\";\r\n\t@NonNull @Builder.Default private String stateOrProvince = \"\";\r\n\t@NonNull @Builder.Default private String postalCode = \"\";\r\n\t@NonNull @Builder.Default private String country = \"\";\r\n\t@NonNull @Builder.Default private String type = \"\";\r\n\r\n\t@Override public @NonNull String getStreet() { return street; }\r\n\t@Override public void setStreet(@NonNull String street) { this.street = street; }\r\n\r\n\t@Override public @NonNull String getStreetNumber() { return streetNumber; }\r\n\t@Override public void setStreetNumber(@NonNull String streetNumber) { this.streetNumber = streetNumber; }\r\n\r\n\t@Override public @NonNull String getCity() { return city; }\r\n\t@Override public void setCity(@NonNull String city) { this.city = city; }\r\n\r\n\t@Override public @NonNull String getStateOrProvince() { return stateOrProvince; }\r\n\t@Override public void setStateOrProvince(@NonNull String stateOrProvince) { this.stateOrProvince = stateOrProvince; }\r\n\r\n\t@Override public @NonNull String getPostalCode() { return postalCode; }\r\n\t@Override public void setPostalCode(@NonNull String postalCode) { this.postalCode = postalCode; }\r\n\r\n\t@Override public @NonNull String getCountry() { return country; }\r\n\t@Override public void setCountry(@NonNull String country) { this.country = country; }\r\n\r\n\t@Override public @NonNull String getType() { return type; }\r\n\t@Override public void setType(@NonNull String type) { this.type = type; }\r\n\r\n\t@Override public void afterMapping(@NonNull PostalAddressEntity input)\r\n\t{\r\n\t\tlog.debug(\"after mapping starting\");\r\n\t\tlog.debug(\"after mapping finished\");\r\n\t}\r\n\r\n\t@Override public @NonNull PostalAddressEntity toSource() { return Mapper.INSTANCE.map(this); }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/postaladdress/jpadto/src/main/java/de/ruu/app/datamodel/postaladdress/dto/PostalAddressDTO.java b/../r-uu.app/datamodel/postaladdress/jpadto/src/main/java/de/ruu/app/datamodel/postaladdress/dto/PostalAddressDTO.java
--- a/../r-uu.app/datamodel/postaladdress/jpadto/src/main/java/de/ruu/app/datamodel/postaladdress/dto/PostalAddressDTO.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/postaladdress/jpadto/src/main/java/de/ruu/app/datamodel/postaladdress/dto/PostalAddressDTO.java	(date 1720627622226)
@@ -1,9 +1,8 @@
-package de.ruu.app.datamodel.postaladdress.jpadto.dto;
+package de.ruu.app.datamodel.postaladdress.dto;
 
 import de.ruu.app.datamodel.postaladdress.PostalAddress;
 import de.ruu.app.datamodel.postaladdress.jpadto.Mapper;
-import de.ruu.app.datamodel.postaladdress.jpadto.jpa.PostalAddressEntity;
-import de.ruu.lib.jpa.core.AbstractDTO;
+import de.ruu.app.datamodel.postaladdress.jpa.PostalAddressEntity;
 import de.ruu.lib.jpa.core.mapstruct.AbstractMappedDTO;
 import lombok.AccessLevel;
 import lombok.AllArgsConstructor;
@@ -15,7 +14,6 @@
 import lombok.Setter;
 import lombok.experimental.Accessors;
 import lombok.extern.slf4j.Slf4j;
-import org.mapstruct.factory.Mappers;
 
 @Slf4j
 @Getter
Index: ../r-uu.app/datamodel/postaladdress/jpadto-se/src/main/java/de/ruu/app/datamodel/postaladdress/jpa/se/PostalAddressServiceJPASE.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.app.demo.jpa.se;\r\n\r\nimport de.ruu.app.datamodel.company.jpa.DepartmentEntity;\r\nimport de.ruu.app.datamodel.company.jpadto.DepartmentServiceJPA;\r\nimport de.ruu.lib.jpa.se.Transactional;\r\nimport jakarta.annotation.PostConstruct;\r\nimport jakarta.inject.Inject;\r\nimport jakarta.inject.Singleton;\r\nimport lombok.extern.slf4j.Slf4j;\r\n\r\nimport java.util.Optional;\r\n\r\n@Singleton\r\n@Transactional\r\n@Slf4j\r\npublic class DepartmentServiceJPAEditionSE implements DepartmentServiceJPA\r\n{\r\n\t@Inject private DepartmentRepository repository;\r\n\r\n\t@PostConstruct private void postConstruct() { log.debug(\"injected repository: {}\", repository); }\r\n\r\n\t@Override public DepartmentEntity save  (DepartmentEntity entity) { return repository.save(entity); }\r\n\t@Override public DepartmentEntity           update(DepartmentEntity entity) { return repository.save(entity); }\r\n\t@Override public Optional<DepartmentEntity> find  (Long id)                 { return repository.find(id);     }\r\n\t@Override public void                       delete(Long id)                 {        repository.delete(id);   }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/postaladdress/jpadto-se/src/main/java/de/ruu/app/datamodel/postaladdress/jpa/se/PostalAddressServiceJPASE.java b/../r-uu.app/datamodel/postaladdress/jpadto-se/src/main/java/de/ruu/app/datamodel/postaladdress/jpa/se/PostalAddressServiceJPASE.java
--- a/../r-uu.app/datamodel/postaladdress/jpadto-se/src/main/java/de/ruu/app/datamodel/postaladdress/jpa/se/PostalAddressServiceJPASE.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/postaladdress/jpadto-se/src/main/java/de/ruu/app/datamodel/postaladdress/jpa/se/PostalAddressServiceJPASE.java	(date 1720685785689)
@@ -1,26 +1,30 @@
-package de.ruu.app.demo.jpa.se;
+package de.ruu.app.datamodel.postaladdress.jpa.se;
 
-import de.ruu.app.datamodel.company.jpa.DepartmentEntity;
-import de.ruu.app.datamodel.company.jpadto.DepartmentServiceJPA;
+import de.ruu.app.datamodel.postaladdress.jpa.PostalAddressEntity;
+import de.ruu.app.datamodel.postaladdress.jpa.PostalAddressServiceJPA;
 import de.ruu.lib.jpa.se.Transactional;
 import jakarta.annotation.PostConstruct;
 import jakarta.inject.Inject;
 import jakarta.inject.Singleton;
 import lombok.extern.slf4j.Slf4j;
 
+import java.util.HashSet;
 import java.util.Optional;
+import java.util.Set;
 
 @Singleton
 @Transactional
 @Slf4j
-public class DepartmentServiceJPAEditionSE implements DepartmentServiceJPA
+public class PostalAddressServiceJPASE implements PostalAddressServiceJPA
 {
-	@Inject private DepartmentRepository repository;
+	@Inject private PostalAddressRepositoryJPASE repository;
 
 	@PostConstruct private void postConstruct() { log.debug("injected repository: {}", repository); }
 
-	@Override public DepartmentEntity save  (DepartmentEntity entity) { return repository.save(entity); }
-	@Override public DepartmentEntity           update(DepartmentEntity entity) { return repository.save(entity); }
-	@Override public Optional<DepartmentEntity> find  (Long id)                 { return repository.find(id);     }
-	@Override public void                       delete(Long id)                 {        repository.delete(id);   }
+	@Override public          PostalAddressEntity  create(PostalAddressEntity entity) { return repository.save(entity); }
+	@Override public Optional<PostalAddressEntity> read  (Long id)                    { return repository.find(id);     }
+	@Override public          PostalAddressEntity  update(PostalAddressEntity entity) { return repository.save(entity); }
+	@Override public void                          delete(Long id)                    {        repository.delete(id);   }
+
+	@Override public Set<PostalAddressEntity> findAll() { return new HashSet<>(repository.findAll()); }
 }
\ No newline at end of file
Index: ../r-uu.app/datamodel/company/common/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>r-uu</groupId>\r\n        <artifactId>r-uu.app-datamodel-company</artifactId>\r\n        <version>0.0.1-SNAPSHOT</version>\r\n    </parent>\r\n\r\n    <artifactId>common</artifactId>\r\n\r\n    <properties>\r\n        <maven.compiler.source>21</maven.compiler.source>\r\n        <maven.compiler.target>21</maven.compiler.target>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n    </properties>\r\n\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/company/common/pom.xml b/../r-uu.app/datamodel/company/common/pom.xml
--- a/../r-uu.app/datamodel/company/common/pom.xml	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/company/common/pom.xml	(date 1720669731388)
@@ -1,20 +1,23 @@
 <?xml version="1.0" encoding="UTF-8"?>
+
 <project xmlns="http://maven.apache.org/POM/4.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+
     <modelVersion>4.0.0</modelVersion>
+    <artifactId>r-uu.app-datamodel-company-common</artifactId>
+    <dependencies>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+            <scope>compile</scope>
+        </dependency>
+    </dependencies>
+
     <parent>
         <groupId>r-uu</groupId>
         <artifactId>r-uu.app-datamodel-company</artifactId>
         <version>0.0.1-SNAPSHOT</version>
     </parent>
 
-    <artifactId>common</artifactId>
-
-    <properties>
-        <maven.compiler.source>21</maven.compiler.source>
-        <maven.compiler.target>21</maven.compiler.target>
-        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-    </properties>
-
 </project>
\ No newline at end of file
Index: ../r-uu.app/datamodel/postaladdress/jpadto-ee/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>r-uu</groupId>\r\n        <artifactId>r-uu.app-datamodel</artifactId>\r\n        <version>0.0.1-SNAPSHOT</version>\r\n        <relativePath>../../pom.xml</relativePath>\r\n    </parent>\r\n\r\n    <artifactId>jpadto-ee</artifactId>\r\n\r\n    <properties>\r\n        <maven.compiler.source>21</maven.compiler.source>\r\n        <maven.compiler.target>21</maven.compiler.target>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n    </properties>\r\n\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/postaladdress/jpadto-ee/pom.xml b/../r-uu.app/datamodel/postaladdress/jpadto-ee/pom.xml
--- a/../r-uu.app/datamodel/postaladdress/jpadto-ee/pom.xml	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/postaladdress/jpadto-ee/pom.xml	(date 1720612137348)
@@ -1,21 +1,31 @@
 <?xml version="1.0" encoding="UTF-8"?>
+
 <project xmlns="http://maven.apache.org/POM/4.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+
     <modelVersion>4.0.0</modelVersion>
+    <artifactId>r-uu.app-datamodel-postaladdress-jpadto-ee</artifactId>
+
     <parent>
         <groupId>r-uu</groupId>
-        <artifactId>r-uu.app-datamodel</artifactId>
+        <artifactId>r-uu.app-datamodel-postaladdress</artifactId>
         <version>0.0.1-SNAPSHOT</version>
-        <relativePath>../../pom.xml</relativePath>
     </parent>
 
-    <artifactId>jpadto-ee</artifactId>
-
-    <properties>
-        <maven.compiler.source>21</maven.compiler.source>
-        <maven.compiler.target>21</maven.compiler.target>
-        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-    </properties>
+    <dependencies>
+        <dependency>
+            <groupId>jakarta.enterprise</groupId>
+            <artifactId>jakarta.enterprise.cdi-api</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>r-uu</groupId>
+            <artifactId>r-uu.app-datamodel-postaladdress-jpadto</artifactId>
+        </dependency>
+    </dependencies>
 
 </project>
\ No newline at end of file
Index: ../r-uu.app/datamodel/company/jpadto-se/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>r-uu</groupId>\r\n        <artifactId>r-uu.app-datamodel-company</artifactId>\r\n        <version>0.0.1-SNAPSHOT</version>\r\n    </parent>\r\n\r\n    <artifactId>jpadto-se</artifactId>\r\n\r\n    <properties>\r\n        <maven.compiler.source>21</maven.compiler.source>\r\n        <maven.compiler.target>21</maven.compiler.target>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n    </properties>\r\n\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/company/jpadto-se/pom.xml b/../r-uu.app/datamodel/company/jpadto-se/pom.xml
--- a/../r-uu.app/datamodel/company/jpadto-se/pom.xml	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/company/jpadto-se/pom.xml	(date 1720702744980)
@@ -1,20 +1,59 @@
 <?xml version="1.0" encoding="UTF-8"?>
+
 <project xmlns="http://maven.apache.org/POM/4.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+
     <modelVersion>4.0.0</modelVersion>
+    <artifactId>r-uu.app-datamodel-company-jpadto-se</artifactId>
+
     <parent>
         <groupId>r-uu</groupId>
         <artifactId>r-uu.app-datamodel-company</artifactId>
         <version>0.0.1-SNAPSHOT</version>
     </parent>
 
-    <artifactId>jpadto-se</artifactId>
-
-    <properties>
-        <maven.compiler.source>21</maven.compiler.source>
-        <maven.compiler.target>21</maven.compiler.target>
-        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-    </properties>
+    <dependencies>
+        <dependency>
+            <groupId>jakarta.inject</groupId>
+            <artifactId>jakarta.inject-api</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>r-uu</groupId>
+            <artifactId>r-uu.lib-jpa-se</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>r-uu</groupId>
+            <artifactId>r-uu.app-datamodel-company-jpadto</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>r-uu</groupId>
+            <artifactId>r-uu.lib-jpa-se-hibernate-postgres</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>r-uu</groupId>
+            <artifactId>r-uu.lib-junit</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>r-uu</groupId>
+            <artifactId>r-uu.lib-cdi-common</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>r-uu</groupId>
+            <artifactId>r-uu.lib-cdi-se</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.hamcrest</groupId>
+            <artifactId>hamcrest</artifactId>
+        </dependency>
+    </dependencies>
 
 </project>
\ No newline at end of file
Index: ../r-uu.app/datamodel/readme.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/readme.md b/../r-uu.app/datamodel/readme.md
--- a/../r-uu.app/datamodel/readme.md	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/readme.md	(date 1720518352626)
@@ -1,0 +1,27 @@
+# datamodel
+collection of business data models
+
+* person
+* contact
+  - postal address
+  - email address
+  - telephone number
+
+## organisation of code
+
+* common
+  - business object                    interface
+  - business object service            interface
+* jpadto
+  - mapper interface
+  - dto
+    - business object dto              implementation
+  - jpa
+    - business object entity           implementation
+    - business object service jpa      interface
+    - ee
+      - business object repository     implementation
+      - business object service jpa ee implementation
+    - se
+      - business object repository     implementation
+      - entity manager producer        implementation
\ No newline at end of file
Index: ../r-uu.app/datamodel/company/jpadto/src/test/java/de/ruu/app/datamodel/company/jpadto/TestMapStruct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.app.demo.common;\r\n\r\nimport de.ruu.app.demo.common.datamodel.Mapper;\r\nimport de.ruu.app.demo.common.datamodel.dto.CompanyDTO;\r\nimport de.ruu.app.demo.common.datamodel.dto.DepartmentDTO;\r\nimport de.ruu.app.demo.common.datamodel.jpa.CompanyEntity;\r\nimport de.ruu.app.demo.common.datamodel.jpa.DepartmentEntity;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport static org.hamcrest.MatcherAssert.assertThat;\r\nimport static org.hamcrest.Matchers.*;\r\nimport static org.junit.jupiter.api.Assertions.assertThrows;\r\n\r\nclass TestMapStruct\r\n{\r\n\t@Test void mapValidCompanyDTO()\r\n\t{\r\n\t\tString     name = \"name\";\r\n\t\tCompanyDTO dto  = new CompanyDTO(name);\r\n\r\n\t\tCompanyEntity entity = Mapper.INSTANCE.map(dto);\r\n\r\n\t\tassertThat(entity       , is(not(nullValue())));\r\n\t\tassertThat(entity.name(), is(name));\r\n\t}\r\n\r\n\t@Test void mapValidCompanyEntity()\r\n\t{\r\n\t\tString        name = \"name\";\r\n\t\tCompanyEntity entity  = new CompanyEntity(name);\r\n\r\n\t\tCompanyDTO dto = Mapper.INSTANCE.map(entity);\r\n\r\n\t\tassertThat(dto       , is(not(nullValue())));\r\n\t\tassertThat(dto.name(), is(name));\r\n\t}\r\n\r\n\t@Test void mapValidDepartmentDTO()\r\n\t{\r\n\t\tString        name       = \"name\";\r\n\t\tCompanyDTO    companyDTO = new CompanyDTO(name);\r\n\t\tDepartmentDTO dto        = new DepartmentDTO(companyDTO, name);\r\n\r\n\t\tDepartmentEntity departmentEntity = Mapper.INSTANCE.map(dto);\r\n\r\n\t\tassertThat(departmentEntity       , is(not(nullValue())));\r\n\t\tassertThat(departmentEntity.name(), is(name));\r\n\r\n\t\tassertThat(departmentEntity.company().name(), is(name));\r\n\t}\r\n\r\n\t@Test void mapValidDepartmentEntity()\r\n\t{\r\n\t\tString           name          = \"name\";\r\n\t\tCompanyEntity    companyEntity = new CompanyEntity(name);\r\n\t\tDepartmentEntity entity        = new DepartmentEntity(companyEntity, name);\r\n\r\n\t\tDepartmentDTO dto = Mapper.INSTANCE.map(entity);\r\n\r\n\t\tassertThat(dto       , is(not(nullValue())));\r\n\t\tassertThat(dto.name(), is(name));\r\n\r\n\t\tassertThat(dto.company().name(), is(name));\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/company/jpadto/src/test/java/de/ruu/app/datamodel/company/jpadto/TestMapStruct.java b/../r-uu.app/datamodel/company/jpadto/src/test/java/de/ruu/app/datamodel/company/jpadto/TestMapStruct.java
--- a/../r-uu.app/datamodel/company/jpadto/src/test/java/de/ruu/app/datamodel/company/jpadto/TestMapStruct.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/company/jpadto/src/test/java/de/ruu/app/datamodel/company/jpadto/TestMapStruct.java	(date 1720677550920)
@@ -1,27 +1,26 @@
-package de.ruu.app.demo.common;
+package de.ruu.app.datamodel.company.jpadto;
 
-import de.ruu.app.demo.common.datamodel.Mapper;
-import de.ruu.app.demo.common.datamodel.dto.CompanyDTO;
-import de.ruu.app.demo.common.datamodel.dto.DepartmentDTO;
-import de.ruu.app.demo.common.datamodel.jpa.CompanyEntity;
-import de.ruu.app.demo.common.datamodel.jpa.DepartmentEntity;
+import de.ruu.app.datamodel.company.dto.CompanyDTO;
+import de.ruu.app.datamodel.company.dto.DepartmentDTO;
+import de.ruu.app.datamodel.company.jpa.CompanyEntity;
+import de.ruu.app.datamodel.company.jpa.DepartmentEntity;
+import org.hamcrest.Matchers;
 import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.MatcherAssert.assertThat;
-import static org.hamcrest.Matchers.*;
-import static org.junit.jupiter.api.Assertions.assertThrows;
 
 class TestMapStruct
 {
-	@Test void mapValidCompanyDTO()
+	@Test
+	void mapValidCompanyDTO()
 	{
 		String     name = "name";
 		CompanyDTO dto  = new CompanyDTO(name);
 
 		CompanyEntity entity = Mapper.INSTANCE.map(dto);
 
-		assertThat(entity       , is(not(nullValue())));
-		assertThat(entity.name(), is(name));
+		assertThat(entity       , Matchers.is(Matchers.not(Matchers.nullValue())));
+		assertThat(entity.name(), Matchers.is(name));
 	}
 
 	@Test void mapValidCompanyEntity()
@@ -31,8 +30,8 @@
 
 		CompanyDTO dto = Mapper.INSTANCE.map(entity);
 
-		assertThat(dto       , is(not(nullValue())));
-		assertThat(dto.name(), is(name));
+		assertThat(dto       , Matchers.is(Matchers.not(Matchers.nullValue())));
+		assertThat(dto.name(), Matchers.is(name));
 	}
 
 	@Test void mapValidDepartmentDTO()
@@ -43,10 +42,10 @@
 
 		DepartmentEntity departmentEntity = Mapper.INSTANCE.map(dto);
 
-		assertThat(departmentEntity       , is(not(nullValue())));
-		assertThat(departmentEntity.name(), is(name));
+		assertThat(departmentEntity       , Matchers.is(Matchers.not(Matchers.nullValue())));
+		assertThat(departmentEntity.name(), Matchers.is(name));
 
-		assertThat(departmentEntity.company().name(), is(name));
+		assertThat(departmentEntity.company().name(), Matchers.is(name));
 	}
 
 	@Test void mapValidDepartmentEntity()
@@ -57,9 +56,9 @@
 
 		DepartmentDTO dto = Mapper.INSTANCE.map(entity);
 
-		assertThat(dto       , is(not(nullValue())));
-		assertThat(dto.name(), is(name));
+		assertThat(dto       , Matchers.is(Matchers.not(Matchers.nullValue())));
+		assertThat(dto.name(), Matchers.is(name));
 
-		assertThat(dto.company().name(), is(name));
+		assertThat(dto.company().name(), Matchers.is(name));
 	}
 }
\ No newline at end of file
Index: ../r-uu.app/datamodel/company/jpadto/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>r-uu</groupId>\r\n        <artifactId>r-uu.app-datamodel-company</artifactId>\r\n        <version>0.0.1-SNAPSHOT</version>\r\n    </parent>\r\n\r\n    <artifactId>jpadto</artifactId>\r\n\r\n    <properties>\r\n        <maven.compiler.source>21</maven.compiler.source>\r\n        <maven.compiler.target>21</maven.compiler.target>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n    </properties>\r\n\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/company/jpadto/pom.xml b/../r-uu.app/datamodel/company/jpadto/pom.xml
--- a/../r-uu.app/datamodel/company/jpadto/pom.xml	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/company/jpadto/pom.xml	(date 1720677536704)
@@ -1,20 +1,47 @@
 <?xml version="1.0" encoding="UTF-8"?>
+
 <project xmlns="http://maven.apache.org/POM/4.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+
     <modelVersion>4.0.0</modelVersion>
+    <artifactId>r-uu.app-datamodel-company-jpadto</artifactId>
+
     <parent>
         <groupId>r-uu</groupId>
         <artifactId>r-uu.app-datamodel-company</artifactId>
         <version>0.0.1-SNAPSHOT</version>
     </parent>
 
-    <artifactId>jpadto</artifactId>
-
-    <properties>
-        <maven.compiler.source>21</maven.compiler.source>
-        <maven.compiler.target>21</maven.compiler.target>
-        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-    </properties>
+    <dependencies>
+        <dependency>
+            <groupId>jakarta.enterprise</groupId>
+            <artifactId>jakarta.enterprise.cdi-api</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>r-uu</groupId>
+            <artifactId>r-uu.lib-jpa-core</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>r-uu</groupId>
+            <artifactId>r-uu.lib-jpa-core-mapstruct</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>r-uu</groupId>
+            <artifactId>r-uu.app-datamodel-company-common</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.hamcrest</groupId>
+            <artifactId>hamcrest</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.junit.jupiter</groupId>
+            <artifactId>junit-jupiter</artifactId>
+        </dependency>
+    </dependencies>
 
 </project>
\ No newline at end of file
Index: ../r-uu.app/datamodel/postaladdress/jpadto-se/src/main/resources/META-INF/microprofile-config.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>config_ordinal=100\r\n\r\nde.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer.dbhost=localhost\r\nde.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer.dbport=5433\r\nde.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer.dbname=staging\r\n\r\nde.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer.dbuser=staging\r\nde.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer.dbpass=staging\r\n# persistence unit (pu) name\r\nde.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer.puname=staging
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/../r-uu.app/datamodel/postaladdress/jpadto-se/src/main/resources/META-INF/microprofile-config.properties b/../r-uu.app/datamodel/postaladdress/jpadto-se/src/main/resources/META-INF/microprofile-config.properties
--- a/../r-uu.app/datamodel/postaladdress/jpadto-se/src/main/resources/META-INF/microprofile-config.properties	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/postaladdress/jpadto-se/src/main/resources/META-INF/microprofile-config.properties	(date 1720694899402)
@@ -2,9 +2,9 @@
 
 de.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer.dbhost=localhost
 de.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer.dbport=5433
-de.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer.dbname=staging
+de.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer.dbname=demo_test
 
-de.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer.dbuser=staging
-de.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer.dbpass=staging
+de.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer.dbuser=demo_test
+de.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer.dbpass=demo_test
 # persistence unit (pu) name
-de.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer.puname=staging
\ No newline at end of file
+de.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer.puname=demo_test
\ No newline at end of file
Index: ../r-uu.app/datamodel/postaladdress/jpadto-se/src/test/java/de/ruu/app/datamodel/postaladdress/jpa/se/se/PostalAddressServiceJPASETest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.app.datamodel.postaladdress.jpa.se;\r\n\r\nimport de.ruu.app.datamodel.postaladdress.PostalAddress;\r\nimport de.ruu.app.datamodel.postaladdress.jpa.PostalAddressEntity;\r\nimport de.ruu.lib.cdi.common.CDIExtension;\r\nimport de.ruu.lib.cdi.se.CDIContainer;\r\nimport de.ruu.lib.jpa.se.TransactionalInterceptorCDI;\r\nimport de.ruu.lib.junit.DisabledOnServerNotListening;\r\nimport jakarta.enterprise.inject.se.SeContainer;\r\nimport jakarta.enterprise.inject.se.SeContainerInitializer;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.junit.jupiter.api.AfterAll;\r\nimport org.junit.jupiter.api.BeforeAll;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport java.util.Optional;\r\nimport java.util.Set;\r\n\r\nimport static org.hamcrest.CoreMatchers.is;\r\nimport static org.hamcrest.CoreMatchers.not;\r\nimport static org.hamcrest.CoreMatchers.nullValue;\r\nimport static org.hamcrest.MatcherAssert.assertThat;\r\nimport static org.junit.jupiter.api.Assertions.fail;\r\n\r\n@DisabledOnServerNotListening\r\n(\r\n\t\tpropertyNameHost = \"de.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer.dbhost\",\r\n\t\tpropertyNamePort = \"de.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer.dbport\"\r\n)\r\n@Slf4j\r\nclass PostalAddressServiceJPASETest\r\n{\r\n\tprivate static SeContainer seContainer; // initialisation and closure handled in before/after all methods\r\n\r\n\tprivate PostalAddressServiceJPASE service; // initialisation handled in before each method\r\n\r\n\t@SuppressWarnings(\"unchecked\")\r\n\t@BeforeAll static void beforeAll()\r\n\t{\r\n\t\tlog.debug(\"cdi container initialisation\");\r\n\t\ttry\r\n\t\t{\r\n\t\t\tseContainer =\r\n\t\t\t\t\tSeContainerInitializer\r\n\t\t\t\t\t\t\t.newInstance()\r\n\t\t\t\t\t\t\t.addExtensions     (CDIExtension.class               )\r\n\t\t\t\t\t\t\t.addBeanClasses    (TransactionalInterceptorCDI.class)\r\n\t\t\t\t\t\t\t.addBeanClasses    (EntityManagerProducer.class      )\r\n\t\t\t\t\t\t\t.enableInterceptors(TransactionalInterceptorCDI.class)\r\n\t\t\t\t\t\t\t.initialize();\r\n\t\t\tCDIContainer.bootstrap(PostalAddressServiceJPASETest.class.getClassLoader());\r\n\t\t}\r\n\t\tcatch (Exception e)\r\n\t\t{\r\n\t\t\tlog.error(\"failure initialising seContainer\", e);\r\n\t\t}\r\n\t\tlog.debug(\"cdi container initialisation {}\", seContainer == null ? \"unsuccessful\" : \"successful\");\r\n\t}\r\n\r\n\t@AfterAll\r\n\tstatic void afterAll()\r\n\t{\r\n\t\tlog.debug(\"cdi container shut down\");\r\n\t\tseContainer.close();\r\n\t\tlog.debug(\"cdi container shut down {}\", seContainer.isRunning() ? \"unsuccessful\" : \"successful\");\r\n\t}\r\n\r\n\t@BeforeEach\r\n\tvoid beforeEach()\r\n\t{\r\n\t\tservice = seContainer.select(PostalAddressServiceJPASE.class).get();\r\n\t}\r\n\r\n\t@Test void testFindAll()\r\n\t{\r\n\t\tSet<PostalAddressEntity> all = service.findAll();\r\n\r\n\t\tassertThat(all, is(not(nullValue())));\r\n\r\n\t\tlog.info(\"\\nreceived {} tag groups\", all.size());\r\n\t}\r\n\r\n\t@Test void testCreate()\r\n\t{\r\n\t\tString name = \"de/ruu/app/demo/client/datamodel/rs/postaladdress \" + System.currentTimeMillis();\r\n\r\n\t\tPostalAddress postalAddress =\r\n\t\t\t\tservice.create(\r\n\t\t\t\t\t\tPostalAddressEntity\r\n\t\t\t\t\t\t\t\t.builder()\r\n\t\t\t\t\t\t\t\t\t\t.city(name)\r\n\t\t\t\t\t\t\t\t.build());\r\n\r\n\t\tlog.info(\"\\nreceived postalAddress\\n{}\", postalAddress);\r\n\r\n\t\tif (postalAddress instanceof PostalAddressEntity)\r\n\t\t{\r\n\t\t\tPostalAddressEntity entity = (PostalAddressEntity) postalAddress;\r\n\r\n\t\t\tassertThat(entity.id  (), is(not(nullValue())));\r\n\t\t\tassertThat(entity.city(), is(name));\r\n\r\n\t\t\tassertThat(entity.version(), is(not(nullValue())));\r\n\t\t\tassertThat(entity.version(), is((short) 0       ));\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tfail(\"unexpected type: \" + postalAddress.getClass().getName());\r\n\t\t}\r\n\t}\r\n\r\n\t@Test void testRead()\r\n\t{\r\n\t\tString name = \"de/ruu/app/demo/client/datamodel/rs/postaladdress \" + System.currentTimeMillis();\r\n\r\n\t\tPostalAddress postalAddressIn =\r\n\t\t\t\tservice.create(\r\n\t\t\t\t\t\tPostalAddressEntity\r\n\t\t\t\t\t\t\t\t.builder()\r\n\t\t\t\t\t\t\t\t.city(name)\r\n\t\t\t\t\t\t\t\t.build());\r\n\r\n\t\tif (postalAddressIn instanceof PostalAddressEntity)\r\n\t\t{\r\n\t\t\tPostalAddressEntity entity = (PostalAddressEntity) postalAddressIn;\r\n\r\n\t\t\tOptional<PostalAddressEntity> optional = service.read(entity.id());\r\n\r\n\t\t\tassertThat(optional            , is(not(nullValue())));\r\n\t\t\tassertThat(optional.isPresent(), is(not(false)));\r\n\r\n\t\t\tPostalAddress postalAddressOut = optional.get();\r\n\r\n\t\t\tlog.info(\"\\nreceived postal address\\n{}\" + postalAddressOut);\r\n\r\n\t\t\tif (postalAddressOut instanceof PostalAddressEntity)\r\n\t\t\t{\r\n\t\t\t\tentity = (PostalAddressEntity) postalAddressOut;\r\n\r\n\t\t\t\tassertThat(entity.id  (), is(not(nullValue())));\r\n\t\t\t\tassertThat(entity.city(), is(name));\r\n\r\n\t\t\t\tassertThat(entity.version(), is(not(nullValue())));\r\n\t\t\t\tassertThat(entity.version(), is((short) 0       ));\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tfail(\"unexpected type: \" + postalAddressOut.getClass().getName());\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t@Test void testUpdate()\r\n\t{\r\n\t\tString name = \"de/ruu/app/demo/client/datamodel/rs/postaladdress \" + System.currentTimeMillis();\r\n\r\n\t\tPostalAddressEntity postalAddressIn = service.create(PostalAddressEntity.builder().city(name).build());\r\n\r\n\t\tname = \"modified \" + System.currentTimeMillis();\r\n\r\n\t\tpostalAddressIn.setCity(name);\r\n\r\n\t\tPostalAddress postalAddressOut = service.update(postalAddressIn);\r\n\r\n\t\tlog.info(\"\\nreceived postal address\\n{}\" + postalAddressOut);\r\n\r\n\t\tif (postalAddressOut instanceof PostalAddressEntity)\r\n\t\t{\r\n\t\t\tPostalAddressEntity entity = (PostalAddressEntity) postalAddressOut;\r\n\r\n\t\t\tassertThat(entity.id(), is(not(nullValue())));\r\n\r\n\t\t\tassertThat(entity.version(), is(not(nullValue())));\r\n\t\t\tassertThat(entity.version(), is((short) 1       ));\r\n\r\n\t\t\tassertThat(entity.city(), is(name));\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tfail(\"unexpected type: \" + postalAddressOut.getClass().getName());\r\n\t\t}\r\n\t}\r\n\r\n\t@Test void testDelete()\r\n\t{\r\n\t\tString name = \"de/ruu/app/demo/client/datamodel/rs/postaladdress \" + System.currentTimeMillis();\r\n\r\n\t\tPostalAddressEntity postalAddress = service.create(PostalAddressEntity.builder().city(name).build());;\r\n\r\n\t\tlog.info(\"\\nreceived postal address\\n{}\", postalAddress);\r\n\r\n\t\tif (postalAddress instanceof PostalAddressEntity)\r\n\t\t{\r\n\t\t\tPostalAddressEntity entity = (PostalAddressEntity) postalAddress;\r\n\r\n\t\t\tservice.delete(entity.id());\r\n\r\n\t\t\tOptional<PostalAddressEntity> optional = service.read(entity.id());\r\n\r\n\t\t\tassertThat(optional            , is(not(nullValue())));\r\n\t\t\tassertThat(optional.isPresent(), is(false));\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tfail(\"unexpected type: \" + postalAddress.getClass().getName());\r\n\t\t}\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/postaladdress/jpadto-se/src/test/java/de/ruu/app/datamodel/postaladdress/jpa/se/se/PostalAddressServiceJPASETest.java b/../r-uu.app/datamodel/postaladdress/jpadto-se/src/test/java/de/ruu/app/datamodel/postaladdress/jpa/se/se/PostalAddressServiceJPASETest.java
--- a/../r-uu.app/datamodel/postaladdress/jpadto-se/src/test/java/de/ruu/app/datamodel/postaladdress/jpa/se/se/PostalAddressServiceJPASETest.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/postaladdress/jpadto-se/src/test/java/de/ruu/app/datamodel/postaladdress/jpa/se/se/PostalAddressServiceJPASETest.java	(date 1720698712716)
@@ -1,7 +1,8 @@
-package de.ruu.app.datamodel.postaladdress.jpa.se;
+package de.ruu.app.datamodel.postaladdress.jpa.se.se;
 
 import de.ruu.app.datamodel.postaladdress.PostalAddress;
 import de.ruu.app.datamodel.postaladdress.jpa.PostalAddressEntity;
+import de.ruu.app.datamodel.postaladdress.jpa.se.PostalAddressServiceJPASE;
 import de.ruu.lib.cdi.common.CDIExtension;
 import de.ruu.lib.cdi.se.CDIContainer;
 import de.ruu.lib.jpa.se.TransactionalInterceptorCDI;
Index: ../r-uu.app/datamodel/postaladdress/jpadto-ee/src/main/java/de/ruu/app/datamodel/postaladdress/jpa/ee/PostalAddressServiceJPAEE.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.app.datamodel.postaladdress.jpadto.jpa.ee;\r\n\r\nimport de.ruu.app.datamodel.postaladdress.jpadto.jpa.PostalAddressEntity;\r\nimport de.ruu.app.datamodel.postaladdress.jpadto.jpa.PostalAddressServiceJPA;\r\nimport jakarta.annotation.PostConstruct;\r\nimport jakarta.enterprise.context.ApplicationScoped;\r\nimport jakarta.inject.Inject;\r\nimport jakarta.transaction.Transactional;\r\nimport lombok.extern.slf4j.Slf4j;\r\n\r\nimport java.util.HashSet;\r\nimport java.util.Optional;\r\nimport java.util.Set;\r\n\r\n@ApplicationScoped\r\n@Transactional\r\n@Slf4j\r\npublic class PostalAddressServiceJPAEE implements PostalAddressServiceJPA\r\n{\r\n\t@Inject\r\n\tprivate PostalAddressRepository repository;\r\n\r\n\t@PostConstruct\r\n\tprivate void postConstruct() { log.debug(\"injected repository: {}\", repository); }\r\n\r\n\t@Override public          PostalAddressEntity  create(PostalAddressEntity entity) { return repository.save  (entity); }\r\n\t@Override public Optional<PostalAddressEntity> read  (Long id)                    { return repository.find  (id);     }\r\n\t@Override public          PostalAddressEntity  update(PostalAddressEntity entity) { return repository.save  (entity); }\r\n\t@Override public void                          delete(Long id)                    {        repository.delete(id);     }\r\n\r\n\t@Override public Set<PostalAddressEntity> findAll() { return new HashSet<>(repository.findAll()); }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/postaladdress/jpadto-ee/src/main/java/de/ruu/app/datamodel/postaladdress/jpa/ee/PostalAddressServiceJPAEE.java b/../r-uu.app/datamodel/postaladdress/jpadto-ee/src/main/java/de/ruu/app/datamodel/postaladdress/jpa/ee/PostalAddressServiceJPAEE.java
--- a/../r-uu.app/datamodel/postaladdress/jpadto-ee/src/main/java/de/ruu/app/datamodel/postaladdress/jpa/ee/PostalAddressServiceJPAEE.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/postaladdress/jpadto-ee/src/main/java/de/ruu/app/datamodel/postaladdress/jpa/ee/PostalAddressServiceJPAEE.java	(date 1720627622340)
@@ -1,7 +1,7 @@
-package de.ruu.app.datamodel.postaladdress.jpadto.jpa.ee;
+package de.ruu.app.datamodel.postaladdress.jpa.ee;
 
-import de.ruu.app.datamodel.postaladdress.jpadto.jpa.PostalAddressEntity;
-import de.ruu.app.datamodel.postaladdress.jpadto.jpa.PostalAddressServiceJPA;
+import de.ruu.app.datamodel.postaladdress.jpa.PostalAddressEntity;
+import de.ruu.app.datamodel.postaladdress.jpa.PostalAddressServiceJPA;
 import jakarta.annotation.PostConstruct;
 import jakarta.enterprise.context.ApplicationScoped;
 import jakarta.inject.Inject;
@@ -23,7 +23,7 @@
 	@PostConstruct
 	private void postConstruct() { log.debug("injected repository: {}", repository); }
 
-	@Override public          PostalAddressEntity  create(PostalAddressEntity entity) { return repository.save  (entity); }
+	@Override public PostalAddressEntity create(PostalAddressEntity entity) { return repository.save  (entity); }
 	@Override public Optional<PostalAddressEntity> read  (Long id)                    { return repository.find  (id);     }
 	@Override public          PostalAddressEntity  update(PostalAddressEntity entity) { return repository.save  (entity); }
 	@Override public void                          delete(Long id)                    {        repository.delete(id);     }
Index: ../r-uu.app/datamodel/company/jpadto-ee/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>r-uu</groupId>\r\n        <artifactId>r-uu.app-datamodel-company</artifactId>\r\n        <version>0.0.1-SNAPSHOT</version>\r\n    </parent>\r\n\r\n    <artifactId>jpadto-ee</artifactId>\r\n\r\n    <properties>\r\n        <maven.compiler.source>21</maven.compiler.source>\r\n        <maven.compiler.target>21</maven.compiler.target>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n    </properties>\r\n\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/company/jpadto-ee/pom.xml b/../r-uu.app/datamodel/company/jpadto-ee/pom.xml
--- a/../r-uu.app/datamodel/company/jpadto-ee/pom.xml	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/company/jpadto-ee/pom.xml	(date 1720679077101)
@@ -1,20 +1,43 @@
 <?xml version="1.0" encoding="UTF-8"?>
+
 <project xmlns="http://maven.apache.org/POM/4.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+
     <modelVersion>4.0.0</modelVersion>
+    <artifactId>r-uu.app-datamodel-company-jpadto-ee</artifactId>
+
     <parent>
         <groupId>r-uu</groupId>
         <artifactId>r-uu.app-datamodel-company</artifactId>
         <version>0.0.1-SNAPSHOT</version>
     </parent>
 
-    <artifactId>jpadto-ee</artifactId>
-
-    <properties>
-        <maven.compiler.source>21</maven.compiler.source>
-        <maven.compiler.target>21</maven.compiler.target>
-        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-    </properties>
+    <dependencies>
+        <dependency>
+            <groupId>jakarta.enterprise</groupId>
+            <artifactId>jakarta.enterprise.cdi-api</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>jakarta.transaction</groupId>
+            <artifactId>jakarta.transaction-api</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>jakarta.persistence</groupId>
+            <artifactId>jakarta.persistence-api</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>r-uu</groupId>
+            <artifactId>r-uu.lib-jpa-core</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>r-uu</groupId>
+            <artifactId>r-uu.app-datamodel-company-jpadto</artifactId>
+        </dependency>
+    </dependencies>
 
 </project>
\ No newline at end of file
Index: ../r-uu.app/datamodel/postaladdress/jpadto-se/src/test/java/de/ruu/app/datamodel/postaladdress/jpa/se/se/EntityManagerProducer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.app.datamodel.postaladdress.jpa.se;\r\n\r\nimport de.ruu.app.datamodel.postaladdress.jpa.PostalAddressEntity;\r\nimport de.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer;\r\nimport jakarta.enterprise.inject.Produces;\r\nimport jakarta.inject.Singleton;\r\nimport jakarta.persistence.EntityManager;\r\n\r\nimport java.util.List;\r\n\r\n@Singleton public class EntityManagerProducer extends AbstractEntityManagerProducer\r\n{\r\n\t@Override public List<Class<?>> managedClasses() { return List.of(PostalAddressEntity.class); }\r\n\r\n\t@Override @Produces public EntityManager produce() { return super.produce(); }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/postaladdress/jpadto-se/src/test/java/de/ruu/app/datamodel/postaladdress/jpa/se/se/EntityManagerProducer.java b/../r-uu.app/datamodel/postaladdress/jpadto-se/src/test/java/de/ruu/app/datamodel/postaladdress/jpa/se/se/EntityManagerProducer.java
--- a/../r-uu.app/datamodel/postaladdress/jpadto-se/src/test/java/de/ruu/app/datamodel/postaladdress/jpa/se/se/EntityManagerProducer.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/postaladdress/jpadto-se/src/test/java/de/ruu/app/datamodel/postaladdress/jpa/se/se/EntityManagerProducer.java	(date 1720698712679)
@@ -1,4 +1,4 @@
-package de.ruu.app.datamodel.postaladdress.jpa.se;
+package de.ruu.app.datamodel.postaladdress.jpa.se.se;
 
 import de.ruu.app.datamodel.postaladdress.jpa.PostalAddressEntity;
 import de.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer;
Index: ../r-uu.app/datamodel/postaladdress/jpadto-ee/src/main/java/de/ruu/app/datamodel/postaladdress/jpa/ee/PostalAddressRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.app.datamodel.postaladdress.jpadto.jpa.ee;\r\n\r\nimport de.ruu.app.datamodel.postaladdress.jpadto.jpa.PostalAddressEntity;\r\nimport de.ruu.lib.jpa.core.AbstractRepository;\r\nimport jakarta.annotation.PostConstruct;\r\nimport jakarta.enterprise.context.ApplicationScoped;\r\nimport jakarta.persistence.EntityManager;\r\nimport jakarta.persistence.PersistenceContext;\r\nimport lombok.extern.slf4j.Slf4j;\r\n\r\n@ApplicationScoped\r\n@Slf4j\r\npublic class PostalAddressRepository extends AbstractRepository<PostalAddressEntity, Long>\r\n{\r\n\t@PersistenceContext(name = \"demo\") private EntityManager entityManager;\r\n\r\n\t@PostConstruct public void postConstruct() { log.debug(\"injected entity manager successfully: {}\", entityManager != null); }\r\n\r\n\t@Override protected EntityManager entityManager() { return entityManager; }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/postaladdress/jpadto-ee/src/main/java/de/ruu/app/datamodel/postaladdress/jpa/ee/PostalAddressRepository.java b/../r-uu.app/datamodel/postaladdress/jpadto-ee/src/main/java/de/ruu/app/datamodel/postaladdress/jpa/ee/PostalAddressRepository.java
--- a/../r-uu.app/datamodel/postaladdress/jpadto-ee/src/main/java/de/ruu/app/datamodel/postaladdress/jpa/ee/PostalAddressRepository.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/postaladdress/jpadto-ee/src/main/java/de/ruu/app/datamodel/postaladdress/jpa/ee/PostalAddressRepository.java	(date 1720627622252)
@@ -1,6 +1,6 @@
-package de.ruu.app.datamodel.postaladdress.jpadto.jpa.ee;
+package de.ruu.app.datamodel.postaladdress.jpa.ee;
 
-import de.ruu.app.datamodel.postaladdress.jpadto.jpa.PostalAddressEntity;
+import de.ruu.app.datamodel.postaladdress.jpa.PostalAddressEntity;
 import de.ruu.lib.jpa.core.AbstractRepository;
 import jakarta.annotation.PostConstruct;
 import jakarta.enterprise.context.ApplicationScoped;
Index: ../r-uu.app/datamodel/postaladdress/jpadto-se/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>r-uu</groupId>\r\n        <artifactId>r-uu.app-datamodel-postaladdress</artifactId>\r\n        <version>0.0.1-SNAPSHOT</version>\r\n    </parent>\r\n\r\n    <artifactId>jpadto-se</artifactId>\r\n\r\n    <properties>\r\n        <maven.compiler.source>21</maven.compiler.source>\r\n        <maven.compiler.target>21</maven.compiler.target>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n    </properties>\r\n\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/postaladdress/jpadto-se/pom.xml b/../r-uu.app/datamodel/postaladdress/jpadto-se/pom.xml
--- a/../r-uu.app/datamodel/postaladdress/jpadto-se/pom.xml	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/postaladdress/jpadto-se/pom.xml	(date 1720694653276)
@@ -1,20 +1,63 @@
 <?xml version="1.0" encoding="UTF-8"?>
+
 <project xmlns="http://maven.apache.org/POM/4.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+
     <modelVersion>4.0.0</modelVersion>
+    <artifactId>r-uu.app-datamodel-postaladdress-jpadto-se</artifactId>
+
     <parent>
         <groupId>r-uu</groupId>
         <artifactId>r-uu.app-datamodel-postaladdress</artifactId>
         <version>0.0.1-SNAPSHOT</version>
     </parent>
 
-    <artifactId>jpadto-se</artifactId>
-
-    <properties>
-        <maven.compiler.source>21</maven.compiler.source>
-        <maven.compiler.target>21</maven.compiler.target>
-        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-    </properties>
+    <dependencies>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.jboss.weld.se</groupId>
+            <artifactId>weld-se-core</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>r-uu</groupId>
+            <artifactId>r-uu.lib-jpa-se</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>r-uu</groupId>
+            <artifactId>r-uu.app-datamodel-postaladdress-jpadto</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>r-uu</groupId>
+            <artifactId>r-uu.lib-junit</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.hamcrest</groupId>
+            <artifactId>hamcrest</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>jakarta.enterprise</groupId>
+            <artifactId>jakarta.enterprise.cdi-api</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>r-uu</groupId>
+            <artifactId>r-uu.lib-cdi-se</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>r-uu</groupId>
+            <artifactId>r-uu.lib-cdi-common</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>r-uu</groupId>
+            <artifactId>r-uu.lib-jpa-se-hibernate-postgres</artifactId>
+            <scope>test</scope>
+        </dependency>
+    </dependencies>
 
 </project>
\ No newline at end of file
Index: ../r-uu.app/demo/client/src/main/java/module-info.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>module de.ruu.app.demo.client\r\n{\r\n\texports de.ruu.app.demo.client.rs.company;\r\n\texports de.ruu.app.demo.client.rs.system;\r\n\r\n\trequires jakarta.cdi;\r\n\trequires jakarta.el;\r\n\trequires jakarta.inject;\r\n\r\n\trequires static lombok;\r\n\r\n\trequires microprofile.config.api;\r\n\trequires jakarta.ws.rs;\r\n\trequires jakarta.annotation;\r\n\r\n\trequires de.ruu.app.demo.common;\r\n\trequires de.ruu.lib.util;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/demo/client/src/main/java/module-info.java b/../r-uu.app/demo/client/src/main/java/module-info.java
--- a/../r-uu.app/demo/client/src/main/java/module-info.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/demo/client/src/main/java/module-info.java	(date 1720677982597)
@@ -1,18 +1,30 @@
 module de.ruu.app.demo.client
 {
-	exports de.ruu.app.demo.client.rs.company;
+	exports de.ruu.app.demo.client.datamodel.rs.company;
 	exports de.ruu.app.demo.client.rs.system;
+	exports de.ruu.app.demo.client.datamodel.rs.postaladdress;
 
+	opens de.ruu.app.demo.client.datamodel.fx;
+	opens de.ruu.app.demo.client.datamodel.rs.company;
+
+	requires jakarta.annotation;
 	requires jakarta.cdi;
-	requires jakarta.el;
+	//requires jakarta.el;
 	requires jakarta.inject;
+	requires jakarta.ws.rs;
 
 	requires static lombok;
+//	requires org.slf4j;
 
 	requires microprofile.config.api;
-	requires jakarta.ws.rs;
-	requires jakarta.annotation;
+	requires javafx.fxml;
 
 	requires de.ruu.app.demo.common;
 	requires de.ruu.lib.util;
+	requires de.ruu.lib.fx.comp;
+	requires de.ruu.lib.cdi.se;
+	requires de.ruu.app.datamodel.postaladdress.common;
+	requires de.ruu.app.datamodel.postaladdress.jpadto;
+	requires de.ruu.app.datamodel.company.common;
+	requires r.uu.app.datamodel.company.jpadto;
 }
\ No newline at end of file
Index: ../r-uu.app/demo/server/readme.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># r-uu - github root repository\r\nr-uu's github root repository\r\n\r\n[lib](md/lib/readme.md) r-uu's collection of possibly reusable java code. follow the link to find out if there is \r\nsomething you might be interested in.\r\n\r\n[app](md/app/readme.md) r-uu's applications are mainly pocs for the library code mentioned above.
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/demo/server/readme.md b/../r-uu.app/demo/server/readme.md
--- a/../r-uu.app/demo/server/readme.md	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/demo/server/readme.md	(date 1720274254664)
@@ -1,7 +1,4 @@
-# r-uu - github root repository
-r-uu's github root repository
-
-[lib](md/lib/readme.md) r-uu's collection of possibly reusable java code. follow the link to find out if there is 
-something you might be interested in.
+# r-uu - github app demo server repository
+r-uu's github app demo server repository
 
-[app](md/app/readme.md) r-uu's applications are mainly pocs for the library code mentioned above.
\ No newline at end of file
+[back](../readme.md)
\ No newline at end of file
Index: ../r-uu.app/demo/common/src/main/java/module-info.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>module de.ruu.app.demo.common\r\n{\r\n\texports de.ruu.app.demo.common;\r\n\texports de.ruu.app.demo.common.datamodel;\r\n\texports de.ruu.app.demo.common.datamodel.dto;\r\n\texports de.ruu.app.demo.common.datamodel.jpa;\r\n\texports de.ruu.app.demo.common.jpa;\r\n\texports de.ruu.app.demo.common.jpa.ee;\r\n\r\n\topens de.ruu.app.demo.common.datamodel.dto;\r\n\topens de.ruu.app.demo.common.datamodel.jpa;\r\n\topens de.ruu.app.demo.common.jpa.ee;\r\n\r\n\trequires static lombok;\r\n\r\n\trequires jakarta.annotation;\r\n\trequires jakarta.cdi;\r\n\trequires jakarta.inject;\r\n\trequires jakarta.persistence;\r\n\trequires jakarta.transaction;\r\n\r\n\trequires org.mapstruct;\r\n\trequires org.slf4j;\r\n\r\n\trequires de.ruu.lib.jpa.core;\r\n\trequires de.ruu.lib.util;\r\n\trequires de.ruu.lib.mapstruct;\r\n\trequires de.ruu.lib.jpa.core.mapstruct;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/demo/common/src/main/java/module-info.java b/../r-uu.app/demo/common/src/main/java/module-info.java
--- a/../r-uu.app/demo/common/src/main/java/module-info.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/demo/common/src/main/java/module-info.java	(date 1720677005643)
@@ -1,29 +1,6 @@
 module de.ruu.app.demo.common
 {
-	exports de.ruu.app.demo.common;
-	exports de.ruu.app.demo.common.datamodel;
-	exports de.ruu.app.demo.common.datamodel.dto;
-	exports de.ruu.app.demo.common.datamodel.jpa;
-	exports de.ruu.app.demo.common.jpa;
-	exports de.ruu.app.demo.common.jpa.ee;
-
-	opens de.ruu.app.demo.common.datamodel.dto;
-	opens de.ruu.app.demo.common.datamodel.jpa;
-	opens de.ruu.app.demo.common.jpa.ee;
-
-	requires static lombok;
-
-	requires jakarta.annotation;
-	requires jakarta.cdi;
-	requires jakarta.inject;
 	requires jakarta.persistence;
-	requires jakarta.transaction;
-
-	requires org.mapstruct;
-	requires org.slf4j;
-
 	requires de.ruu.lib.jpa.core;
-	requires de.ruu.lib.util;
-	requires de.ruu.lib.mapstruct;
-	requires de.ruu.lib.jpa.core.mapstruct;
+	exports de.ruu.app.demo.common;
 }
\ No newline at end of file
Index: ../r-uu.app/demo/client/src/main/resources/META-INF/beans.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE xml>\r\n<beans xmlns=\"https://jakarta.ee/xml/ns/jakartaee\"\r\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n       xsi:schemaLocation=\"https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/beans_3_0.xsd\"\r\n       version=\"3.0\"\r\n       bean-discovery-mode=\"all\">\r\n\t<scan>\r\n\t\t<exclude name=\"org.**\" />\r\n\t</scan>\r\n</beans>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/demo/client/src/main/resources/META-INF/beans.xml b/../r-uu.app/demo/client/src/main/resources/META-INF/beans.xml
--- a/../r-uu.app/demo/client/src/main/resources/META-INF/beans.xml	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/demo/client/src/main/resources/META-INF/beans.xml	(date 1720271087864)
@@ -1,11 +1,12 @@
 <?xml version="1.0" encoding="UTF-8" ?>
+
 <!DOCTYPE xml>
 <beans xmlns="https://jakarta.ee/xml/ns/jakartaee"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/beans_3_0.xsd"
        version="3.0"
        bean-discovery-mode="all">
-	<scan>
-		<exclude name="org.**" />
-	</scan>
+<!--	<scan>-->
+<!--		<exclude name="org.**" />-->
+<!--	</scan>-->
 </beans>
\ No newline at end of file
Index: ../r-uu.app/datamodel/company/common/src/main/java/de/ruu/app/datamodel/company/CompanyService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.app.demo.common;\r\n\r\nimport java.util.Optional;\r\nimport java.util.Set;\r\n\r\npublic interface CompanyService<C extends Company>\r\n{\r\n\tC           create(C company);\r\n\tOptional<C> read(Long id);\r\n\tC           update(C company);\r\n\tvoid        delete(Long id);\r\n\r\n\tSet<C>      findAll();\r\n\tOptional<C> findWithDepartments(Long id);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/company/common/src/main/java/de/ruu/app/datamodel/company/CompanyService.java b/../r-uu.app/datamodel/company/common/src/main/java/de/ruu/app/datamodel/company/CompanyService.java
--- a/../r-uu.app/datamodel/company/common/src/main/java/de/ruu/app/datamodel/company/CompanyService.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/company/common/src/main/java/de/ruu/app/datamodel/company/CompanyService.java	(date 1720627622278)
@@ -1,4 +1,4 @@
-package de.ruu.app.demo.common;
+package de.ruu.app.datamodel.company;
 
 import java.util.Optional;
 import java.util.Set;
Index: ../r-uu.app/demo/common/src/main/java/de/ruu/app/demo/common/Paths.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.app.demo.common;\r\n\r\npublic interface Paths\r\n{\r\n\tString DEMO    = \"/demo\";\r\n\r\n\tString SYSTEM  = \"/system\";\r\n\r\n\tString COMPANY                = \"/company\";\r\n\tString BY_ID                  = \"/{id}\";\r\n\tString BY_ID_WITH_DEPARTMENTS = BY_ID + \"/optionalDepartments\";\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/demo/common/src/main/java/de/ruu/app/demo/common/Paths.java b/../r-uu.app/demo/common/src/main/java/de/ruu/app/demo/common/Paths.java
--- a/../r-uu.app/demo/common/src/main/java/de/ruu/app/demo/common/Paths.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/demo/common/src/main/java/de/ruu/app/demo/common/Paths.java	(date 1720448961503)
@@ -2,11 +2,20 @@
 
 public interface Paths
 {
-	String DEMO    = "/demo";
+	/** general purpose constants */
+	String BY_ID = "/{id}";
+
+	/** constants for demo domain */
+	String DEMO = "/demo";
 
-	String SYSTEM  = "/system";
-
+	/** constants for company domain */
 	String COMPANY                = "/company";
-	String BY_ID                  = "/{id}";
 	String BY_ID_WITH_DEPARTMENTS = BY_ID + "/optionalDepartments";
+
+	/** constants for datamodel domain */
+	String DATAMODEL      = "/datamodel";
+	String POSTAL_ADDRESS = DATAMODEL + "/postaladdress";
+
+	/** constants for system domain */
+	String SYSTEM  = "/system";
 }
\ No newline at end of file
Index: ../r-uu.app/datamodel/postaladdress/jpadto-se/src/test/java/de/ruu/app/datamodel/postaladdress/jpa/se/EntityManagerProducer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.lib.jpa.se.hibernate.postgres.demo;\r\n\r\nimport de.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer;\r\nimport jakarta.enterprise.inject.Produces;\r\nimport jakarta.inject.Singleton;\r\nimport jakarta.persistence.EntityManager;\r\nimport java.util.List;\r\n\r\n@Singleton public class EntityManagerProducer extends AbstractEntityManagerProducer\r\n{\r\n\t@Override public List<Class<?>> managedClasses() { return List.of(SimpleTypeEntity.class); }\r\n\r\n\t@Override @Produces public EntityManager produce() { return super.produce(); }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/postaladdress/jpadto-se/src/test/java/de/ruu/app/datamodel/postaladdress/jpa/se/EntityManagerProducer.java b/../r-uu.app/datamodel/postaladdress/jpadto-se/src/test/java/de/ruu/app/datamodel/postaladdress/jpa/se/EntityManagerProducer.java
--- a/../r-uu.app/datamodel/postaladdress/jpadto-se/src/test/java/de/ruu/app/datamodel/postaladdress/jpa/se/EntityManagerProducer.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/postaladdress/jpadto-se/src/test/java/de/ruu/app/datamodel/postaladdress/jpa/se/EntityManagerProducer.java	(date 1720694683377)
@@ -1,14 +1,16 @@
-package de.ruu.lib.jpa.se.hibernate.postgres.demo;
+package de.ruu.app.datamodel.postaladdress.jpa.se;
 
+import de.ruu.app.datamodel.postaladdress.jpa.PostalAddressEntity;
 import de.ruu.lib.jpa.se.hibernate.postgres.AbstractEntityManagerProducer;
 import jakarta.enterprise.inject.Produces;
 import jakarta.inject.Singleton;
 import jakarta.persistence.EntityManager;
+
 import java.util.List;
 
 @Singleton public class EntityManagerProducer extends AbstractEntityManagerProducer
 {
-	@Override public List<Class<?>> managedClasses() { return List.of(SimpleTypeEntity.class); }
+	@Override public List<Class<?>> managedClasses() { return List.of(PostalAddressEntity.class); }
 
 	@Override @Produces public EntityManager produce() { return super.produce(); }
 }
\ No newline at end of file
Index: ../r-uu.app/datamodel/company/common/src/main/java/de/ruu/app/datamodel/company/Department.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.app.demo.common;\r\n\r\nimport lombok.NonNull;\r\n\r\npublic interface Department\r\n{\r\n\t@NonNull String     name();\r\n\t@NonNull Department name(@NonNull String name);\r\n\r\n\t/** @return non null {@link Department} */\r\n\t@NonNull Company company();\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/company/common/src/main/java/de/ruu/app/datamodel/company/Department.java b/../r-uu.app/datamodel/company/common/src/main/java/de/ruu/app/datamodel/company/Department.java
--- a/../r-uu.app/datamodel/company/common/src/main/java/de/ruu/app/datamodel/company/Department.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/company/common/src/main/java/de/ruu/app/datamodel/company/Department.java	(date 1720627622171)
@@ -1,4 +1,4 @@
-package de.ruu.app.demo.common;
+package de.ruu.app.datamodel.company;
 
 import lombok.NonNull;
 
Index: ../r-uu.app/datamodel/company/common/src/main/java/de/ruu/app/datamodel/company/DepartmentService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.app.demo.common;\r\n\r\nimport java.util.Optional;\r\n\r\npublic interface DepartmentService<D extends Department>\r\n{\r\n\tD           save  (D department);\r\n\tD           update(D department);\r\n\tOptional<D> find  (Long id);\r\n\tvoid        delete(Long id);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/company/common/src/main/java/de/ruu/app/datamodel/company/DepartmentService.java b/../r-uu.app/datamodel/company/common/src/main/java/de/ruu/app/datamodel/company/DepartmentService.java
--- a/../r-uu.app/datamodel/company/common/src/main/java/de/ruu/app/datamodel/company/DepartmentService.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/company/common/src/main/java/de/ruu/app/datamodel/company/DepartmentService.java	(date 1720627622315)
@@ -1,4 +1,4 @@
-package de.ruu.app.demo.common;
+package de.ruu.app.datamodel.company;
 
 import java.util.Optional;
 
Index: ../r-uu.app/demo/client/src/main/java/de/ruu/app/demo/client/datamodel/rs/postaladdress/ClientPostalAddress.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company;\r\n\r\nimport de.ruu.app.datamodel.postaladdress.PostalAddress;\r\nimport de.ruu.app.datamodel.postaladdress.PostalAddressService;\r\nimport de.ruu.app.demo.common.Company;\r\nimport de.ruu.app.demo.common.Paths;\r\nimport de.ruu.app.demo.common.datamodel.dto.CompanyDTO;\r\nimport de.ruu.lib.util.jsonb.JsonbConfigurator;\r\nimport de.ruu.lib.util.rs.RestClientCallException;\r\nimport de.ruu.lib.util.rs.filter.logging.ClientRequestLoggingFilter;\r\nimport jakarta.annotation.PostConstruct;\r\nimport jakarta.annotation.PreDestroy;\r\nimport jakarta.inject.Singleton;\r\nimport jakarta.ws.rs.client.Client;\r\nimport jakarta.ws.rs.client.ClientBuilder;\r\nimport jakarta.ws.rs.client.Entity;\r\nimport jakarta.ws.rs.client.WebTarget;\r\nimport jakarta.ws.rs.core.GenericType;\r\nimport jakarta.ws.rs.core.Response;\r\nimport jakarta.ws.rs.core.Response.Status;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.eclipse.microprofile.config.ConfigProvider;\r\n\r\nimport java.net.URI;\r\nimport java.util.HashSet;\r\nimport java.util.Optional;\r\nimport java.util.Set;\r\n\r\nimport static de.ruu.lib.util.BooleanFunctions.not;\r\nimport static jakarta.ws.rs.core.MediaType.APPLICATION_JSON;\r\n\r\n@Singleton\r\n@Slf4j\r\npublic class ClientPostalAddress implements PostalAddressService<PostalAddress>\r\n{\r\n\tprivate static final String UNEXPECTED_STATUS = \"unexpected status: \";\r\n\r\n\tprivate String scheme =\r\n\t\t\tConfigProvider.getConfig().getOptionalValue(\"postal-address.rest-api.scheme\", String.class).orElse(\"http\");\r\n\r\n\tprivate String host =\r\n\t\t\tConfigProvider.getConfig().getOptionalValue(\"postal-address.rest-api.host\", String.class).orElse(\"127.0.0.1\");\r\n\r\n\tprivate Integer port =\r\n\t\t\tConfigProvider.getConfig().getOptionalValue(\"postal-address.rest-api.port\", Integer.class).orElse(8080);\r\n\r\n\tprivate URI uri;\r\n\r\n\tprivate Client client;\r\n\r\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\t// lifecycle methods\r\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\t@PostConstruct public void postConstruct()\r\n\t{\r\n\t\tString schemaHostPort = scheme + \"://\" + host + \":\" + port;\r\n\r\n\t\turi = URI.create(schemaHostPort + Paths.DEMO + Paths.COMPANY);\r\n\r\n\t\tlog.debug(\"scheme        : {}\", scheme);\r\n\t\tlog.debug(\"host          : {}\", host);\r\n\t\tlog.debug(\"port          : {}\", port);\r\n\t\tlog.debug(\"schemaHostPort: {}\", schemaHostPort);\r\n\t\tlog.debug(\"uri           : {}\", uri);\r\n\r\n\t\tclient = ClientBuilder.newClient();\r\n\t\tclient.register(new JsonbConfigurator());\r\n\t\tclient.register(new ClientRequestLoggingFilter());\r\n\t}\r\n\r\n\t@PreDestroy public void preDestroy() { client.close(); }\r\n\r\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\t// interface implementations\r\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\t@Override public PostalAddress create(PostalAddress postalAddress)\r\n\t{\r\n\t\tResponse response = client.target(uri).request().post(Entity.entity(postalAddress, APPLICATION_JSON));\r\n\r\n\t\tif (not(response.getStatus() == Status.CREATED.getStatusCode()))\r\n\t\t{\r\n\t\t\tthrow new RestClientCallException(UNEXPECTED_STATUS + response.getStatus() + \"\\nuri: \" + uri, response);\r\n\t\t}\r\n\r\n\t\treturn response.readEntity(PostalAddressDTO.class);\r\n\t}\r\n\r\n\t@Override public Optional<Company> read(Long id)\r\n\t{\r\n\t\tWebTarget target   = client.target(uri + Paths.BY_ID);\r\n\t\tResponse  response = target.resolveTemplate(\"id\", id).request().get();\r\n\r\n\t\tint status = response.getStatus();\r\n\r\n\t\tif (status == Status.OK.getStatusCode())\r\n\t\t{\r\n\t\t\treturn Optional.of(response.readEntity(CompanyDTO.class));\r\n\t\t}\r\n\t\telse if (status == Status.NOT_FOUND.getStatusCode())\r\n\t\t{\r\n\t\t\treturn Optional.empty();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthrow new RestClientCallException(UNEXPECTED_STATUS + status + \"\\nuri: \" + target.getUri(), response);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t@Override public Company update(Company company)\r\n\t{\r\n\t\tResponse response = client.target(uri).request().put(Entity.entity(company, APPLICATION_JSON));\r\n\r\n\t\tif (not(response.getStatus() == Status.OK.getStatusCode()))\r\n\t\t{\r\n\t\t\tthrow new RestClientCallException(UNEXPECTED_STATUS + response.getStatus() + \"\\nuri: \" + uri, response);\r\n\t\t}\r\n\r\n\t\treturn response.readEntity(CompanyDTO.class);\r\n\t}\r\n\r\n\t@Override public void delete(Long id)\r\n\t{\r\n\t\tWebTarget target   = client.target(uri + Paths.BY_ID);\r\n\t\tResponse  response = target.resolveTemplate(\"id\", id).request().delete();\r\n\r\n\t\tif (not(response.getStatus() == Status.OK.getStatusCode()))\r\n\t\t{\r\n\t\t\tthrow new RestClientCallException(UNEXPECTED_STATUS + response.getStatus() + \"\\nuri: \" + target.getUri(), response);\r\n\t\t}\r\n\t}\r\n\r\n\t@Override public Set<Company> findAll()\r\n\t{\r\n\t\tResponse response = client.target(uri).request().get();\r\n\r\n\t\tif (not(response.getStatus() == Status.OK.getStatusCode()))\r\n\t\t{\r\n\t\t\tthrow new RestClientCallException(UNEXPECTED_STATUS + response.getStatus() + \"\\nuri: \" + uri, response);\r\n\t\t}\r\n\r\n\t\treturn new HashSet<>(response.readEntity(new GenericType<HashSet<CompanyDTO>>() {}));\r\n\t}\r\n\r\n\t@Override public Optional<Company> findWithDepartments(Long id)\r\n\t{\r\n\t\tWebTarget target   = client.target(uri + Paths.BY_ID_WITH_DEPARTMENTS);\r\n\t\tResponse  response = target.resolveTemplate(\"id\", id).request().get();\r\n\r\n\t\tif (not(response.getStatus() == Status.OK.getStatusCode()))\r\n\t\t{\r\n\t\t\tthrow new RestClientCallException(UNEXPECTED_STATUS + response.getStatus() + \"\\nuri: \" + target.getUri(), response);\r\n\t\t}\r\n\r\n\t\treturn Optional.of(response.readEntity(CompanyDTO.class));\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/demo/client/src/main/java/de/ruu/app/demo/client/datamodel/rs/postaladdress/ClientPostalAddress.java b/../r-uu.app/demo/client/src/main/java/de/ruu/app/demo/client/datamodel/rs/postaladdress/ClientPostalAddress.java
--- a/../r-uu.app/demo/client/src/main/java/de/ruu/app/demo/client/datamodel/rs/postaladdress/ClientPostalAddress.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/demo/client/src/main/java/de/ruu/app/demo/client/datamodel/rs/postaladdress/ClientPostalAddress.java	(date 1720627622202)
@@ -1,10 +1,9 @@
-package company;
+package de.ruu.app.demo.client.datamodel.rs.postaladdress;
 
 import de.ruu.app.datamodel.postaladdress.PostalAddress;
 import de.ruu.app.datamodel.postaladdress.PostalAddressService;
-import de.ruu.app.demo.common.Company;
+import de.ruu.app.datamodel.postaladdress.dto.PostalAddressDTO;
 import de.ruu.app.demo.common.Paths;
-import de.ruu.app.demo.common.datamodel.dto.CompanyDTO;
 import de.ruu.lib.util.jsonb.JsonbConfigurator;
 import de.ruu.lib.util.rs.RestClientCallException;
 import de.ruu.lib.util.rs.filter.logging.ClientRequestLoggingFilter;
@@ -55,7 +54,7 @@
 	{
 		String schemaHostPort = scheme + "://" + host + ":" + port;
 
-		uri = URI.create(schemaHostPort + Paths.DEMO + Paths.COMPANY);
+		uri = URI.create(schemaHostPort + Paths.DEMO + Paths.POSTAL_ADDRESS);
 
 		log.debug("scheme        : {}", scheme);
 		log.debug("host          : {}", host);
@@ -86,7 +85,7 @@
 		return response.readEntity(PostalAddressDTO.class);
 	}
 
-	@Override public Optional<Company> read(Long id)
+	@Override public Optional<PostalAddress> read(Long id)
 	{
 		WebTarget target   = client.target(uri + Paths.BY_ID);
 		Response  response = target.resolveTemplate("id", id).request().get();
@@ -95,7 +94,7 @@
 
 		if (status == Status.OK.getStatusCode())
 		{
-			return Optional.of(response.readEntity(CompanyDTO.class));
+			return Optional.of(response.readEntity(PostalAddressDTO.class));
 		}
 		else if (status == Status.NOT_FOUND.getStatusCode())
 		{
@@ -108,16 +107,16 @@
 
 	}
 
-	@Override public Company update(Company company)
+	@Override public PostalAddress update(PostalAddress postalAddress)
 	{
-		Response response = client.target(uri).request().put(Entity.entity(company, APPLICATION_JSON));
+		Response response = client.target(uri).request().put(Entity.entity(postalAddress, APPLICATION_JSON));
 
 		if (not(response.getStatus() == Status.OK.getStatusCode()))
 		{
 			throw new RestClientCallException(UNEXPECTED_STATUS + response.getStatus() + "\nuri: " + uri, response);
 		}
 
-		return response.readEntity(CompanyDTO.class);
+		return response.readEntity(PostalAddressDTO.class);
 	}
 
 	@Override public void delete(Long id)
@@ -131,7 +130,7 @@
 		}
 	}
 
-	@Override public Set<Company> findAll()
+	@Override public Set<PostalAddress> findAll()
 	{
 		Response response = client.target(uri).request().get();
 
@@ -140,19 +139,6 @@
 			throw new RestClientCallException(UNEXPECTED_STATUS + response.getStatus() + "\nuri: " + uri, response);
 		}
 
-		return new HashSet<>(response.readEntity(new GenericType<HashSet<CompanyDTO>>() {}));
-	}
-
-	@Override public Optional<Company> findWithDepartments(Long id)
-	{
-		WebTarget target   = client.target(uri + Paths.BY_ID_WITH_DEPARTMENTS);
-		Response  response = target.resolveTemplate("id", id).request().get();
-
-		if (not(response.getStatus() == Status.OK.getStatusCode()))
-		{
-			throw new RestClientCallException(UNEXPECTED_STATUS + response.getStatus() + "\nuri: " + target.getUri(), response);
-		}
-
-		return Optional.of(response.readEntity(CompanyDTO.class));
+		return new HashSet<>(response.readEntity(new GenericType<HashSet<PostalAddressDTO>>() {}));
 	}
 }
\ No newline at end of file
Index: ../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/jpadto/CompanyServiceJPA.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.app.demo.common.jpa;\r\n\r\nimport de.ruu.app.demo.common.CompanyService;\r\nimport de.ruu.app.demo.common.datamodel.jpa.CompanyEntity;\r\n\r\npublic interface CompanyServiceJPA extends CompanyService<CompanyEntity> { }
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/jpadto/CompanyServiceJPA.java b/../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/jpadto/CompanyServiceJPA.java
--- a/../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/jpadto/CompanyServiceJPA.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/jpadto/CompanyServiceJPA.java	(date 1720677344631)
@@ -1,6 +1,6 @@
-package de.ruu.app.demo.common.jpa;
+package de.ruu.app.datamodel.company.jpadto;
 
-import de.ruu.app.demo.common.CompanyService;
-import de.ruu.app.demo.common.datamodel.jpa.CompanyEntity;
+import de.ruu.app.datamodel.company.CompanyService;
+import de.ruu.app.datamodel.company.jpa.CompanyEntity;
 
 public interface CompanyServiceJPA extends CompanyService<CompanyEntity> { }
\ No newline at end of file
Index: ../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/jpadto/DepartmentServiceJPA.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.app.demo.common.jpa;\r\n\r\nimport de.ruu.app.demo.common.DepartmentService;\r\nimport de.ruu.app.demo.common.datamodel.jpa.DepartmentEntity;\r\n\r\npublic interface DepartmentServiceJPA extends DepartmentService<DepartmentEntity> { }
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/jpadto/DepartmentServiceJPA.java b/../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/jpadto/DepartmentServiceJPA.java
--- a/../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/jpadto/DepartmentServiceJPA.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/jpadto/DepartmentServiceJPA.java	(date 1720677366342)
@@ -1,6 +1,6 @@
-package de.ruu.app.demo.common.jpa;
+package de.ruu.app.datamodel.company.jpadto;
 
-import de.ruu.app.demo.common.DepartmentService;
-import de.ruu.app.demo.common.datamodel.jpa.DepartmentEntity;
+import de.ruu.app.datamodel.company.DepartmentService;
+import de.ruu.app.datamodel.company.jpa.DepartmentEntity;
 
 public interface DepartmentServiceJPA extends DepartmentService<DepartmentEntity> { }
\ No newline at end of file
Index: ../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/jpa/CompanyRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.app.demo.common.jpa.ee;\r\n\r\nimport de.ruu.app.demo.common.datamodel.jpa.CompanyEntity;\r\nimport de.ruu.lib.jpa.core.AbstractRepository;\r\nimport jakarta.annotation.PostConstruct;\r\nimport jakarta.enterprise.context.ApplicationScoped;\r\nimport jakarta.persistence.EntityManager;\r\nimport jakarta.persistence.PersistenceContext;\r\nimport lombok.extern.slf4j.Slf4j;\r\n\r\n@ApplicationScoped\r\n@Slf4j\r\npublic class CompanyRepository extends AbstractRepository<CompanyEntity, Long>\r\n{\r\n\t@PersistenceContext(name = \"demo\") private EntityManager entityManager;\r\n\r\n\t@PostConstruct public void postConstruct() { log.debug(\"injected entity manager successfully: {}\", entityManager != null); }\r\n\r\n\t@Override protected EntityManager entityManager() { return entityManager; }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/jpa/CompanyRepository.java b/../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/jpa/CompanyRepository.java
--- a/../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/jpa/CompanyRepository.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/jpa/CompanyRepository.java	(date 1720680160035)
@@ -1,13 +1,19 @@
-package de.ruu.app.demo.common.jpa.ee;
+package de.ruu.app.datamodel.company.jpa;
 
-import de.ruu.app.demo.common.datamodel.jpa.CompanyEntity;
 import de.ruu.lib.jpa.core.AbstractRepository;
+import de.ruu.lib.jpa.core.GraphType;
 import jakarta.annotation.PostConstruct;
 import jakarta.enterprise.context.ApplicationScoped;
+import jakarta.persistence.EntityGraph;
 import jakarta.persistence.EntityManager;
 import jakarta.persistence.PersistenceContext;
+import lombok.NonNull;
 import lombok.extern.slf4j.Slf4j;
 
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Optional;
+
 @ApplicationScoped
 @Slf4j
 public class CompanyRepository extends AbstractRepository<CompanyEntity, Long>
@@ -17,4 +23,15 @@
 	@PostConstruct public void postConstruct() { log.debug("injected entity manager successfully: {}", entityManager != null); }
 
 	@Override protected EntityManager entityManager() { return entityManager; }
+
+	public Optional<CompanyEntity> findWithDepartments(@NonNull Long id)
+	{
+		EntityGraph<CompanyEntity> result = entityManager.createEntityGraph(CompanyEntity.class);
+		result.addSubgraph(CompanyEntity_.departments.getName());
+
+		Map<String, Object> hints = new HashMap<>();
+		hints.put(GraphType.FETCH.getName(), result);
+
+		return Optional.ofNullable(entityManager.find(CompanyEntity.class, id, hints));
+	}
 }
\ No newline at end of file
Index: ../r-uu.app/datamodel/company/jpadto-ee/src/main/java/de/ruu/app/datamodel/company/jpa/ee/CompanyServiceJPAEE.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.app.datamodel.company.jpa.ee;\r\n\r\nimport de.ruu.app.datamodel.company.jpa.CompanyEntity;\r\nimport de.ruu.app.datamodel.company.jpa.CompanyRepository;\r\nimport de.ruu.app.datamodel.company.jpadto.CompanyServiceJPA;\r\nimport jakarta.annotation.PostConstruct;\r\nimport jakarta.enterprise.context.ApplicationScoped;\r\nimport jakarta.inject.Inject;\r\nimport jakarta.transaction.Transactional;\r\nimport lombok.extern.slf4j.Slf4j;\r\n\r\nimport java.util.HashSet;\r\nimport java.util.Optional;\r\nimport java.util.Set;\r\n\r\n@ApplicationScoped\r\n@Transactional\r\n@Slf4j\r\npublic class CompanyServiceJPAEditionEE implements CompanyServiceJPA\r\n{\r\n\t@Inject\r\n\tprivate CompanyRepository repository;\r\n\r\n\t@PostConstruct\r\n\tprivate void postConstruct() { log.debug(\"injected repository: {}\", repository); }\r\n\r\n\t@Override public CompanyEntity           create(CompanyEntity entity) { return repository.save  (entity); }\r\n\t@Override public Optional<CompanyEntity> read  (Long id)              { return repository.find  (id);     }\r\n\t@Override public          CompanyEntity  update(CompanyEntity entity) { return repository.save  (entity); }\r\n\t@Override public void                    delete(Long id)              {        repository.delete(id);     }\r\n\r\n\t@Override public Set<CompanyEntity> findAll() { return new HashSet<>(repository.findAll()); }\r\n\r\n\t@Override public Optional<CompanyEntity> findWithDepartments(Long id) { return repository.findWithDepartments(id); }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/company/jpadto-ee/src/main/java/de/ruu/app/datamodel/company/jpa/ee/CompanyServiceJPAEE.java b/../r-uu.app/datamodel/company/jpadto-ee/src/main/java/de/ruu/app/datamodel/company/jpa/ee/CompanyServiceJPAEE.java
--- a/../r-uu.app/datamodel/company/jpadto-ee/src/main/java/de/ruu/app/datamodel/company/jpa/ee/CompanyServiceJPAEE.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/company/jpadto-ee/src/main/java/de/ruu/app/datamodel/company/jpa/ee/CompanyServiceJPAEE.java	(date 1720683079772)
@@ -16,7 +16,7 @@
 @ApplicationScoped
 @Transactional
 @Slf4j
-public class CompanyServiceJPAEditionEE implements CompanyServiceJPA
+public class CompanyServiceJPAEE implements CompanyServiceJPA
 {
 	@Inject
 	private CompanyRepository repository;
@@ -24,7 +24,7 @@
 	@PostConstruct
 	private void postConstruct() { log.debug("injected repository: {}", repository); }
 
-	@Override public CompanyEntity           create(CompanyEntity entity) { return repository.save  (entity); }
+	@Override public          CompanyEntity  create(CompanyEntity entity) { return repository.save  (entity); }
 	@Override public Optional<CompanyEntity> read  (Long id)              { return repository.find  (id);     }
 	@Override public          CompanyEntity  update(CompanyEntity entity) { return repository.save  (entity); }
 	@Override public void                    delete(Long id)              {        repository.delete(id);     }
Index: ../r-uu.app/datamodel/postaladdress/jpadto-ee/src/main/java/module-info.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>module $MODULE_NAME$ {\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/postaladdress/jpadto-ee/src/main/java/module-info.java b/../r-uu.app/datamodel/postaladdress/jpadto-ee/src/main/java/module-info.java
--- a/../r-uu.app/datamodel/postaladdress/jpadto-ee/src/main/java/module-info.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/postaladdress/jpadto-ee/src/main/java/module-info.java	(date 1720530238664)
@@ -1,2 +1,14 @@
-module $MODULE_NAME$ {
+module de.ruu.app.datamodel.postaladdress.jpadto.ee
+{
+	requires jakarta.annotation;
+	requires jakarta.cdi;
+	requires jakarta.inject;
+	requires jakarta.persistence;
+	requires jakarta.transaction;
+
+	requires static lombok;
+	requires org.slf4j;
+
+	requires de.ruu.app.datamodel.postaladdress.jpadto;
+	requires de.ruu.lib.jpa.core;
 }
\ No newline at end of file
Index: ../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/jpadto/Mapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.app.demo.common.datamodel;\r\n\r\nimport de.ruu.app.demo.common.datamodel.dto.CompanyDTO;\r\nimport de.ruu.app.demo.common.datamodel.dto.DepartmentDTO;\r\nimport de.ruu.app.demo.common.datamodel.jpa.CompanyEntity;\r\nimport de.ruu.app.demo.common.datamodel.jpa.DepartmentEntity;\r\nimport de.ruu.lib.mapstruct.ReferenceCycleTracking;\r\nimport lombok.NonNull;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.mapstruct.AfterMapping;\r\nimport org.mapstruct.BeforeMapping;\r\nimport org.mapstruct.Context;\r\nimport org.mapstruct.MappingTarget;\r\nimport org.mapstruct.ObjectFactory;\r\nimport org.mapstruct.factory.Mappers;\r\n\r\n@Slf4j\r\n@org.mapstruct.Mapper\r\npublic abstract class Mapper\r\n{\r\n\tpublic static final Mapper INSTANCE = Mappers.getMapper(Mapper.class);\r\n\r\n\tprivate static ReferenceCycleTracking CONTEXT  = new ReferenceCycleTracking();\r\n\r\n\tpublic abstract CompanyEntity    map(CompanyDTO       dto   );\r\n\tpublic abstract CompanyDTO       map(CompanyEntity    entity);\r\n\tpublic abstract DepartmentEntity map(DepartmentDTO    dto   );\r\n\tpublic abstract DepartmentDTO    map(DepartmentEntity entity);\r\n\r\n\t@BeforeMapping public void beforeMapping(CompanyDTO source, @MappingTarget CompanyEntity target)\r\n\t{\r\n\t\tlog.debug(\"before source {}, target  {}\", source, target);\r\n\t\ttarget.beforeMapping(source); // invoke callback for mapping\r\n\t}\r\n\r\n\t@BeforeMapping public void beforeMapping(CompanyEntity source, @MappingTarget CompanyDTO target)\r\n\t{\r\n\t\tlog.debug(\"before source {}, target  {}\", source, target);\r\n\t\ttarget.beforeMapping(source); // invoke callback for mapping\r\n\t}\r\n\r\n\t@AfterMapping public void afterMapping(CompanyDTO source, @MappingTarget CompanyEntity target)\r\n\t{\r\n\t\tlog.debug(\"after source {}, target  {}\", source, target);\r\n\t\ttarget.beforeMapping(source); // invoke callback for mapping\r\n\t}\r\n\r\n\t@AfterMapping public void afterMapping(CompanyEntity source, @MappingTarget CompanyDTO target)\r\n\t{\r\n\t\tlog.debug(\"after source {}, target  {}\", source, target);\r\n\t\ttarget.beforeMapping(source); // invoke callback for mapping\r\n\t}\r\n\r\n\t@BeforeMapping public void beforeMapping(DepartmentDTO source, @MappingTarget DepartmentEntity target)\r\n\t{\r\n\t\tlog.debug(\"before source {}, target  {}\", source, target);\r\n\t\ttarget.beforeMapping(source); // invoke callback for mapping\r\n\t}\r\n\r\n\t@BeforeMapping public void beforeMapping(DepartmentEntity source, @MappingTarget DepartmentDTO target)\r\n\t{\r\n\t\tlog.debug(\"before source {}, target  {}\", source, target);\r\n\t\ttarget.beforeMapping(source); // invoke callback for mapping\r\n\t}\r\n\r\n\t@AfterMapping public void afterMapping(DepartmentDTO source, @MappingTarget DepartmentEntity target)\r\n\t{\r\n\t\tlog.debug(\"after source {}, target  {}\", source, target);\r\n\t\ttarget.beforeMapping(source); // invoke callback for mapping\r\n\t}\r\n\r\n\t@AfterMapping public void afterMapping(DepartmentEntity source, @MappingTarget DepartmentDTO target)\r\n\t{\r\n\t\tlog.debug(\"after source {}, target  {}\", source, target);\r\n\t\ttarget.beforeMapping(source); // invoke callback for mapping\r\n\t}\r\n\r\n\t@ObjectFactory\r\n\t@NonNull\r\n\tCompanyEntity lookupOrCreate(@NonNull CompanyDTO input)\r\n\t{\r\n\t\tCompanyEntity result = CONTEXT.get(input, CompanyEntity.class);\r\n\t\tif (result == null)\r\n\t\t{\r\n\t\t\tresult = new CompanyEntity(input.name());\r\n\t\t\tCONTEXT.put(input, result);\r\n\t\t\tCONTEXT.put(result, input);\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t@ObjectFactory\r\n\t@NonNull\r\n\tCompanyDTO lookupOrCreate(@NonNull CompanyEntity input)\r\n\t{\r\n\t\tCompanyDTO result = CONTEXT.get(input, CompanyDTO.class);\r\n\t\tif (result == null)\r\n\t\t{\r\n\t\t\tresult = new CompanyDTO(input.name());\r\n\t\t\tCONTEXT.put(input, result);\r\n\t\t\tCONTEXT.put(result, input);\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t@ObjectFactory\r\n\t@NonNull\r\n\tDepartmentEntity lookupOrCreate(@NonNull DepartmentDTO input)\r\n\t{\r\n\t\tDepartmentEntity result = CONTEXT.get(input, DepartmentEntity.class);\r\n\t\tif (result == null)\r\n\t\t{\r\n\t\t\t\tCompanyEntity company = CONTEXT.get(input.company(), CompanyEntity.class);\r\n\t\t\t\tif (company == null)\r\n\t\t\t\t\t\tcompany = new CompanyEntity(input.company().name());\r\n\t\t\t\tresult = new DepartmentEntity(company, input.name());\r\n\t\t\t\tCONTEXT.put(input, result);\r\n\t\t\t\tCONTEXT.put(result, input);\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t@ObjectFactory\r\n\t@NonNull\r\n\tDepartmentDTO lookupOrCreate(@NonNull DepartmentEntity input)\r\n\t{\r\n\t\tDepartmentDTO result = CONTEXT.get(input, DepartmentDTO.class);\r\n\t\tif (result == null)\r\n\t\t{\r\n\t\t\tCompanyDTO company = CONTEXT.get(input.company(), CompanyDTO.class);\r\n\t\t\tif (company == null)\r\n\t\t\t\t\tcompany = new CompanyDTO(input.company().name());\r\n\t\t\tresult = new DepartmentDTO(company, input.name());\r\n\t\t\tCONTEXT.put(input, result);\r\n\t\t\tCONTEXT.put(result, input);\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/jpadto/Mapper.java b/../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/jpadto/Mapper.java
--- a/../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/jpadto/Mapper.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/jpadto/Mapper.java	(date 1720677413176)
@@ -1,15 +1,14 @@
-package de.ruu.app.demo.common.datamodel;
+package de.ruu.app.datamodel.company.jpadto;
 
-import de.ruu.app.demo.common.datamodel.dto.CompanyDTO;
-import de.ruu.app.demo.common.datamodel.dto.DepartmentDTO;
-import de.ruu.app.demo.common.datamodel.jpa.CompanyEntity;
-import de.ruu.app.demo.common.datamodel.jpa.DepartmentEntity;
+import de.ruu.app.datamodel.company.dto.CompanyDTO;
+import de.ruu.app.datamodel.company.dto.DepartmentDTO;
+import de.ruu.app.datamodel.company.jpa.CompanyEntity;
+import de.ruu.app.datamodel.company.jpa.DepartmentEntity;
 import de.ruu.lib.mapstruct.ReferenceCycleTracking;
 import lombok.NonNull;
 import lombok.extern.slf4j.Slf4j;
 import org.mapstruct.AfterMapping;
 import org.mapstruct.BeforeMapping;
-import org.mapstruct.Context;
 import org.mapstruct.MappingTarget;
 import org.mapstruct.ObjectFactory;
 import org.mapstruct.factory.Mappers;
@@ -22,8 +21,8 @@
 
 	private static ReferenceCycleTracking CONTEXT  = new ReferenceCycleTracking();
 
-	public abstract CompanyEntity    map(CompanyDTO       dto   );
-	public abstract CompanyDTO       map(CompanyEntity    entity);
+	public abstract CompanyEntity map(CompanyDTO       dto   );
+	public abstract CompanyDTO map(CompanyEntity    entity);
 	public abstract DepartmentEntity map(DepartmentDTO    dto   );
 	public abstract DepartmentDTO    map(DepartmentEntity entity);
 
Index: ../r-uu.app/datamodel/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>r-uu</groupId>\r\n        <artifactId>r-uu.app</artifactId>\r\n        <version>0.0.1-SNAPSHOT</version>\r\n    </parent>\r\n\r\n    <artifactId>datamodel</artifactId>\r\n\r\n    <properties>\r\n        <maven.compiler.source>21</maven.compiler.source>\r\n        <maven.compiler.target>21</maven.compiler.target>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n    </properties>\r\n\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/pom.xml b/../r-uu.app/datamodel/pom.xml
--- a/../r-uu.app/datamodel/pom.xml	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/pom.xml	(date 1720625305937)
@@ -2,19 +2,20 @@
 <project xmlns="http://maven.apache.org/POM/4.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+
     <modelVersion>4.0.0</modelVersion>
+    <artifactId>r-uu.app-datamodel</artifactId>
+    <packaging>pom</packaging>
+
     <parent>
         <groupId>r-uu</groupId>
         <artifactId>r-uu.app</artifactId>
         <version>0.0.1-SNAPSHOT</version>
     </parent>
 
-    <artifactId>datamodel</artifactId>
-
-    <properties>
-        <maven.compiler.source>21</maven.compiler.source>
-        <maven.compiler.target>21</maven.compiler.target>
-        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-    </properties>
+    <modules>
+        <module>company</module>
+        <module>postaladdress</module>
+    </modules>
 
 </project>
\ No newline at end of file
Index: ../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/dto/DepartmentDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.app.demo.common.datamodel.dto;\r\n\r\nimport de.ruu.app.demo.common.Company;\r\nimport de.ruu.app.demo.common.Department;\r\nimport de.ruu.app.demo.common.datamodel.Mapper;\r\nimport de.ruu.app.demo.common.datamodel.jpa.DepartmentEntity;\r\nimport de.ruu.lib.jpa.core.mapstruct.AbstractMappedDTO;\r\nimport de.ruu.lib.util.Strings;\r\nimport lombok.*;\r\nimport lombok.experimental.Accessors;\r\nimport lombok.extern.slf4j.Slf4j;\r\n\r\nimport static lombok.AccessLevel.NONE;\r\nimport static lombok.AccessLevel.PROTECTED;\r\n\r\n@EqualsAndHashCode(callSuper = true)\r\n@ToString(callSuper = true)\r\n@Slf4j\r\n@Getter                   // generate getter methods for all fields using lombok unless configured otherwise ({@code\r\n                          // @Getter(AccessLevel.NONE}))\r\n@Accessors(fluent = true) // generate fluent accessors with lombok and java-bean-style-accessors in non-abstract classes\r\n                          // with ide, fluent accessors will (usually / by default) be ignored by mapstruct\r\n@NoArgsConstructor(access = PROTECTED, force = true) // generate no args constructor for jsonb, jaxb, mapstruct, ...\r\npublic class DepartmentDTO extends AbstractMappedDTO<DepartmentEntity> implements Department\r\n{\r\n\t/** mutable non-null */\r\n\t// no lombok-generation of setter because of additional validation in manually created method\r\n\t@NonNull\r\n\t@Setter(NONE)\r\n\tprivate String name;\r\n\r\n\t/** mutable non-null */\r\n\t@EqualsAndHashCode.Exclude\r\n\t@ToString.Exclude\r\n\t@NonNull @Setter\r\n\tprivate CompanyDTO company;\r\n\r\n\t/* do not use lombok to make sure that fluent setter with its validation is called */\r\n\tpublic DepartmentDTO(@NonNull CompanyDTO company, @NonNull String name)\r\n\r\n\t{\r\n\t\tthis(); // just in case something important happens in the default constructor\r\n\t\tname(name); // use fluent setter with its validation\r\n\t\tcompany(company);\r\n\t}\r\n\r\n\t@Override public @NonNull Department name(@NonNull String name)\r\n\t{\r\n\t\tif (Strings.isEmptyOrBlank(name)) throw new IllegalArgumentException(\"name must not be empty nor blank\");\r\n\t\tthis.name = name;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t@Override\r\n\t@NonNull\r\n\tpublic Company company() { return company; }\r\n\r\n\t@Override public void beforeMapping(@NonNull DepartmentEntity input)\r\n\t{\r\n\t\tlog.debug(\"before mapping starting\");\r\n\t\tsuper.beforeMapping(input);\r\n\t\tname(input.name());\r\n\t\tlog.debug(\"before mapping finished\");\r\n\t}\r\n\r\n\t@Override public void afterMapping(@NonNull DepartmentEntity input)\r\n\t{\r\n\t\tlog.debug(\"before mapping starting\");\r\n\t\tlog.debug(\"before mapping finished\");\r\n\t}\r\n\r\n\t// java bean style accessors for those who do not work with fluent style accessors (mapstruct)\r\n\tpublic @NonNull String  getName   () { return name();    }\r\n//\tpublic @NonNull Company getCompany() { return company(); }\r\n\r\n\t@Override public @NonNull DepartmentEntity toSource() { return Mapper.INSTANCE.map(this); }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/dto/DepartmentDTO.java b/../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/dto/DepartmentDTO.java
--- a/../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/dto/DepartmentDTO.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/dto/DepartmentDTO.java	(date 1720676768496)
@@ -1,18 +1,21 @@
-package de.ruu.app.demo.common.datamodel.dto;
+package de.ruu.app.datamodel.company.dto;
 
-import de.ruu.app.demo.common.Company;
-import de.ruu.app.demo.common.Department;
-import de.ruu.app.demo.common.datamodel.Mapper;
-import de.ruu.app.demo.common.datamodel.jpa.DepartmentEntity;
+import de.ruu.app.datamodel.company.Company;
+import de.ruu.app.datamodel.company.Department;
+import de.ruu.app.datamodel.company.jpa.DepartmentEntity;
+import de.ruu.app.datamodel.company.jpadto.Mapper;
 import de.ruu.lib.jpa.core.mapstruct.AbstractMappedDTO;
 import de.ruu.lib.util.Strings;
-import lombok.*;
+import lombok.AccessLevel;
+import lombok.EqualsAndHashCode;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.NonNull;
+import lombok.Setter;
+import lombok.ToString;
 import lombok.experimental.Accessors;
 import lombok.extern.slf4j.Slf4j;
 
-import static lombok.AccessLevel.NONE;
-import static lombok.AccessLevel.PROTECTED;
-
 @EqualsAndHashCode(callSuper = true)
 @ToString(callSuper = true)
 @Slf4j
@@ -20,13 +23,13 @@
                           // @Getter(AccessLevel.NONE}))
 @Accessors(fluent = true) // generate fluent accessors with lombok and java-bean-style-accessors in non-abstract classes
                           // with ide, fluent accessors will (usually / by default) be ignored by mapstruct
-@NoArgsConstructor(access = PROTECTED, force = true) // generate no args constructor for jsonb, jaxb, mapstruct, ...
+@NoArgsConstructor(access = AccessLevel.PROTECTED, force = true) // generate no args constructor for jsonb, jaxb, mapstruct, ...
 public class DepartmentDTO extends AbstractMappedDTO<DepartmentEntity> implements Department
 {
 	/** mutable non-null */
 	// no lombok-generation of setter because of additional validation in manually created method
 	@NonNull
-	@Setter(NONE)
+	@Setter(AccessLevel.NONE)
 	private String name;
 
 	/** mutable non-null */
Index: ../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/dto/CompanyDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.app.demo.common.datamodel.dto;\r\n\r\nimport de.ruu.app.demo.common.Company;\r\nimport de.ruu.app.demo.common.Department;\r\nimport de.ruu.app.demo.common.datamodel.Mapper;\r\nimport de.ruu.app.demo.common.datamodel.jpa.CompanyEntity;\r\nimport de.ruu.lib.jpa.core.mapstruct.AbstractMappedDTO;\r\nimport de.ruu.lib.util.Strings;\r\nimport lombok.EqualsAndHashCode;\r\nimport lombok.Getter;\r\nimport lombok.NoArgsConstructor;\r\nimport lombok.NonNull;\r\nimport lombok.RequiredArgsConstructor;\r\nimport lombok.Setter;\r\nimport lombok.ToString;\r\nimport lombok.experimental.Accessors;\r\nimport lombok.extern.slf4j.Slf4j;\r\n\r\nimport java.util.Collections;\r\nimport java.util.HashSet;\r\nimport java.util.Optional;\r\nimport java.util.Set;\r\n\r\nimport static java.util.Objects.isNull;\r\nimport static lombok.AccessLevel.NONE;\r\nimport static lombok.AccessLevel.PROTECTED;\r\n\r\n@EqualsAndHashCode(callSuper = true)\r\n@ToString(callSuper = true)\r\n@Slf4j\r\n@Getter                   // generate getter methods for all fields using lombok unless configured otherwise ({@code\r\n                          // @Getter(AccessLevel.NONE}))\r\n@Accessors(fluent = true) // generate fluent accessors with lombok and java-bean-style-accessors in non-abstract classes\r\n                          // with ide, fluent accessors will (usually / by default) be ignored by mapstruct\r\n@RequiredArgsConstructor\r\n@NoArgsConstructor(access = PROTECTED, force = true) // generate no args constructor for jsonb, jaxb, mapstruct, ...\r\npublic class CompanyDTO extends AbstractMappedDTO<CompanyEntity> implements Company\r\n{\r\n\t/** mutable non-null */\r\n\t// no lombok-generation of setter because of additional validation in manually created method\r\n\t@NonNull\r\n\t@Setter(NONE)\r\n\tprivate String name;\r\n\r\n\t/**\r\n\t * prevent direct access to nullable modifiable set from outside\r\n\t * may explicitly be {@code null}, {@code null} indicates that there was no attempt to load related objects from db\r\n\t * (lazy)\r\n\t */\r\n\t@EqualsAndHashCode.Exclude\r\n\t@ToString.Exclude\r\n\t@Getter(NONE)\r\n\tprivate Set<DepartmentDTO> departments;\r\n\r\n\t@Override public void beforeMapping(@NonNull CompanyEntity input)\r\n\t{\r\n\t\tsuper.beforeMapping(input);\r\n\t\tif (input.optionalDepartments().isPresent())\r\n\t\t\t\tinput.optionalDepartments().get().forEach(d -> add(d.toTarget()));\r\n\t\tname(input.name());\r\n\t}\r\n\r\n\t@Override public void afterMapping(@NonNull CompanyEntity input)\r\n\t{\r\n\t\tlog.debug(\"after mapping starting\");\r\n\t\tlog.debug(\"after mapping finished\");\r\n\t}\r\n\r\n\t@Override public @NonNull CompanyEntity toSource() { return Mapper.INSTANCE.map(this); }\r\n\r\n\t// java bean style accessors for those who do not work with fluent style accessors (mapstruct)\r\n\t@NonNull\r\n\tpublic String getName() { return name(); }\r\n\r\n\t// not generated by lombok because of extra parameter validation\r\n\t@Override public @NonNull Company name(@NonNull String name)\r\n\t{\r\n\t\tif (Strings.isEmptyOrBlank(name)) throw new IllegalArgumentException(\"name must not be empty nor blank\");\r\n\t\tthis.name = name;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** return optional unmodifiable */\r\n\t@Override public Optional<Set<Department>> departments()\r\n\t{\r\n\t\t// return unmodifiable set of interface type instead of set of DTO2 types\r\n\t\tOptional<Set<DepartmentDTO>> optionalDepartments = optionalDepartments();\r\n\t\tif (optionalDepartments.isPresent()) return Optional.of(new HashSet<>(optionalDepartments.get()));\r\n\t\treturn Optional.empty();\r\n\t}\r\n\r\n\t/** return optional unmodifiable */\r\n\tpublic Optional<Set<DepartmentDTO>> optionalDepartments()\r\n\t{\r\n\t\tif (isNull(departments)) return Optional.empty();\r\n\t\treturn Optional.of(Collections.unmodifiableSet(departments));\r\n\t}\r\n\r\n\tpublic boolean add(@NonNull DepartmentDTO department)\r\n\t{\r\n\t\tif (department.company() == this)\r\n\t\t{\r\n\t\t\tif (departmentsContains(department)) return true;\r\n\t\t\treturn nonNullDepartments().add(department);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// following check should never return true\r\n\t\t\tif (departmentsContains(department))\r\n\t\t\t\t\tlog.error(\"department with {} is already contained in {}\", department.company(), this);\r\n\r\n\t\t\t// assign this department as department of department and update employees\r\n\t\t\tdepartment.company(this);\r\n\t\t\treturn nonNullDepartments().add(department);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic boolean remove(@NonNull DepartmentDTO dto)\r\n\t{\r\n\t\tif (isNull(departments)) return false;\r\n\t\treturn departments.remove(dto);\r\n\t}\r\n\r\n\tprivate Set<DepartmentDTO> nonNullDepartments()\r\n\t{\r\n\t\tif (isNull(departments)) departments = new HashSet<>();\r\n\t\treturn departments;\r\n\t}\r\n\r\n\tprivate boolean departmentsContains(DepartmentDTO dto)\r\n\t{\r\n\t\tif (isNull(departments)) return false;\r\n\t\treturn departments.contains(dto);\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/dto/CompanyDTO.java b/../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/dto/CompanyDTO.java
--- a/../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/dto/CompanyDTO.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/dto/CompanyDTO.java	(date 1720675910875)
@@ -1,11 +1,12 @@
-package de.ruu.app.demo.common.datamodel.dto;
+package de.ruu.app.datamodel.company.dto;
 
-import de.ruu.app.demo.common.Company;
-import de.ruu.app.demo.common.Department;
-import de.ruu.app.demo.common.datamodel.Mapper;
-import de.ruu.app.demo.common.datamodel.jpa.CompanyEntity;
+import de.ruu.app.datamodel.company.Company;
+import de.ruu.app.datamodel.company.Department;
+import de.ruu.app.datamodel.company.jpa.CompanyEntity;
+import de.ruu.app.datamodel.company.jpadto.Mapper;
 import de.ruu.lib.jpa.core.mapstruct.AbstractMappedDTO;
 import de.ruu.lib.util.Strings;
+import lombok.AccessLevel;
 import lombok.EqualsAndHashCode;
 import lombok.Getter;
 import lombok.NoArgsConstructor;
@@ -22,8 +23,6 @@
 import java.util.Set;
 
 import static java.util.Objects.isNull;
-import static lombok.AccessLevel.NONE;
-import static lombok.AccessLevel.PROTECTED;
 
 @EqualsAndHashCode(callSuper = true)
 @ToString(callSuper = true)
@@ -33,13 +32,13 @@
 @Accessors(fluent = true) // generate fluent accessors with lombok and java-bean-style-accessors in non-abstract classes
                           // with ide, fluent accessors will (usually / by default) be ignored by mapstruct
 @RequiredArgsConstructor
-@NoArgsConstructor(access = PROTECTED, force = true) // generate no args constructor for jsonb, jaxb, mapstruct, ...
+@NoArgsConstructor(access = AccessLevel.PROTECTED, force = true) // generate no args constructor for jsonb, jaxb, mapstruct, ...
 public class CompanyDTO extends AbstractMappedDTO<CompanyEntity> implements Company
 {
 	/** mutable non-null */
 	// no lombok-generation of setter because of additional validation in manually created method
 	@NonNull
-	@Setter(NONE)
+	@Setter(AccessLevel.NONE)
 	private String name;
 
 	/**
@@ -49,7 +48,7 @@
 	 */
 	@EqualsAndHashCode.Exclude
 	@ToString.Exclude
-	@Getter(NONE)
+	@Getter(AccessLevel.NONE)
 	private Set<DepartmentDTO> departments;
 
 	@Override public void beforeMapping(@NonNull CompanyEntity input)
Index: ../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/jpa/CompanyEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.app.demo.common.datamodel.jpa;\r\n\r\nimport de.ruu.app.demo.common.Company;\r\nimport de.ruu.app.demo.common.Department;\r\nimport de.ruu.app.demo.common.datamodel.Mapper;\r\nimport de.ruu.app.demo.common.datamodel.dto.CompanyDTO;\r\nimport de.ruu.lib.jpa.core.mapstruct.AbstractMappedEntity;\r\nimport de.ruu.lib.util.Strings;\r\nimport jakarta.persistence.*;\r\nimport lombok.*;\r\nimport lombok.experimental.Accessors;\r\nimport lombok.extern.slf4j.Slf4j;\r\n\r\nimport java.util.Collections;\r\nimport java.util.HashSet;\r\nimport java.util.Optional;\r\nimport java.util.Set;\r\n\r\nimport static jakarta.persistence.CascadeType.MERGE;\r\nimport static jakarta.persistence.CascadeType.PERSIST;\r\nimport static java.util.Objects.isNull;\r\nimport static lombok.AccessLevel.NONE;\r\nimport static lombok.AccessLevel.PROTECTED;\r\n\r\n@EqualsAndHashCode(callSuper = true)\r\n@ToString(callSuper = true)\r\n@Slf4j\r\n@Getter                   // generate getter methods for all fields using lombok unless configured otherwise ({@code\r\n                          // @Getter(AccessLevel.NONE}))\r\n@Accessors(fluent = true) // generate fluent accessors with lombok and java-bean-style-accessors in non-abstract classes\r\n                          // with ide, fluent accessors will (usually / by default) be ignored by mapstruct\r\n@NoArgsConstructor(access = PROTECTED, force = true) // generate no args constructor for jsonb, jaxb, jpa, mapstruct, ...\r\n@Entity\r\n@Table(schema = \"test\", name = \"company\")\r\npublic class CompanyEntity extends AbstractMappedEntity<CompanyDTO> implements Company\r\n{\r\n\t/** mutable non-null */\r\n\t// no lombok-generation of setter because of additional validation in manually created method\r\n\t@NonNull\r\n\t@Setter(NONE)\r\n\t@Column(unique=true, nullable=false)\r\n\tprivate String name;\r\n\r\n\t/**\r\n\t * prevent direct access to modifiable set from outside\r\n\t * may explicitly be {@code null}, {@code null} indicates that there was no attempt to load related objects from db\r\n\t * (lazy)\r\n\t */\r\n\t@EqualsAndHashCode.Exclude\r\n\t@ToString.Exclude\r\n\t@Getter(NONE)\r\n\t@OneToMany\r\n\t(\r\n\t\t\tmappedBy = DepartmentEntity_.COMPANY,\r\n\t\t\t// do not use cascade REMOVE in to-many relations as this may result in cascading deletes that wipe out both sides\r\n\t\t\t// of the relation entirely\r\n\t\t\tcascade  = { PERSIST, MERGE }\r\n\t)\r\n\tprivate Set<DepartmentEntity> departments;\r\n\r\n\t/* do not use lombok to make sure that fluent setter with its validation is called */\r\n\tpublic CompanyEntity(@NonNull String name)\r\n\t{\r\n\t\tthis();     // just in case something important happens in the default constructor\r\n\t\tname(name); // use fluent setter with its validation\r\n\t}\r\n\r\n\t@Override\r\n\t@NonNull\r\n\tpublic Company name(@NonNull String name)\r\n\t{\r\n\t\tif (Strings.isEmptyOrBlank(name)) throw new IllegalArgumentException(\"name must not be empty nor blank\");\r\n\t\tthis.name = name;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t// java bean style accessors for those who do not work with fluent style accessors (mapstruct)\r\n\t@NonNull\r\n\tpublic String getName() { return name(); }\r\n\r\n\t@Override\r\n\tpublic void beforeMapping(@NonNull CompanyDTO input)\r\n\t{\r\n\t\tlog.debug(\"before mapping starting\");\r\n\t\tsuper.beforeMapping(input);\r\n\t\tif (input.optionalDepartments().isPresent())\r\n\t\t\t\tinput.optionalDepartments().get().forEach(e -> add(e.toSource()));\r\n\t\tname(input.name());\r\n\t\tlog.debug(\"before mapping finished\");\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void afterMapping(@NonNull CompanyDTO input)\r\n\t{\r\n\t\tlog.debug(\"after mapping starting\");\r\n\t\tlog.debug(\"after mapping finished\");\r\n\t}\r\n\r\n\t@Override public @NonNull CompanyDTO toTarget() { return Mapper.INSTANCE.map(this); }\r\n\r\n\t@Override public Optional<Set<Department>> departments()\r\n\t{\r\n\t\t// return unmodifiable set of interface type instead of set of DTO2 types\r\n\t\tOptional<Set<DepartmentEntity>> optionalDepartments = optionalDepartments();\r\n\t\tif (optionalDepartments.isPresent()) return Optional.of(new HashSet<>(optionalDepartments.get()));\r\n\t\treturn Optional.empty();\r\n\t}\r\n\r\n\t/** return optional unmodifiable */\r\n\tpublic Optional<Set<DepartmentEntity>> optionalDepartments()\r\n\t{\r\n\t\tif (isNull(departments)) return Optional.empty();\r\n\t\treturn Optional.of(Collections.unmodifiableSet(departments));\r\n\t}\r\n\r\n\tpublic boolean add(@NonNull DepartmentEntity department)\r\n\t{\r\n\t\tif (department.company() == this)\r\n\t\t{\r\n\t\t\tif (departmentsContains(department)) return true;\r\n\t\t\treturn nonNullDepartments().add(department);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// following check should never return true\r\n\t\t\tif (departmentsContains(department))\r\n\t\t\t\tlog.error(\"department with {} is already contained in {}\", department.company(), this);\r\n\r\n\t\t\t// assign this department as department of department and update employees\r\n\t\t\tdepartment.company(this);\r\n\t\t\treturn nonNullDepartments().add(department);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic boolean remove(@NonNull DepartmentEntity entity)\r\n\t{\r\n\t\tif (isNull(departments)) return false;\r\n\t\treturn departments.remove(entity);\r\n\t}\r\n\r\n\tprivate Set<DepartmentEntity> nonNullDepartments()\r\n\t{\r\n\t\tif (isNull(departments)) departments = new HashSet<>();\r\n\t\treturn departments;\r\n\t}\r\n\r\n\tprivate boolean departmentsContains(DepartmentEntity department)\r\n\t{\r\n\t\tif (isNull(departments)) return false;\r\n\t\treturn departments.contains(department);\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/jpa/CompanyEntity.java b/../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/jpa/CompanyEntity.java
--- a/../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/jpa/CompanyEntity.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/jpa/CompanyEntity.java	(date 1720677005624)
@@ -1,13 +1,23 @@
-package de.ruu.app.demo.common.datamodel.jpa;
+package de.ruu.app.datamodel.company.jpa;
 
-import de.ruu.app.demo.common.Company;
-import de.ruu.app.demo.common.Department;
-import de.ruu.app.demo.common.datamodel.Mapper;
-import de.ruu.app.demo.common.datamodel.dto.CompanyDTO;
+import de.ruu.app.datamodel.company.Company;
+import de.ruu.app.datamodel.company.Department;
+import de.ruu.app.datamodel.company.dto.CompanyDTO;
+import de.ruu.app.datamodel.company.jpadto.Mapper;
 import de.ruu.lib.jpa.core.mapstruct.AbstractMappedEntity;
 import de.ruu.lib.util.Strings;
-import jakarta.persistence.*;
-import lombok.*;
+import jakarta.persistence.CascadeType;
+import jakarta.persistence.Column;
+import jakarta.persistence.Entity;
+import jakarta.persistence.OneToMany;
+import jakarta.persistence.Table;
+import lombok.AccessLevel;
+import lombok.EqualsAndHashCode;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.NonNull;
+import lombok.Setter;
+import lombok.ToString;
 import lombok.experimental.Accessors;
 import lombok.extern.slf4j.Slf4j;
 
@@ -16,11 +26,7 @@
 import java.util.Optional;
 import java.util.Set;
 
-import static jakarta.persistence.CascadeType.MERGE;
-import static jakarta.persistence.CascadeType.PERSIST;
 import static java.util.Objects.isNull;
-import static lombok.AccessLevel.NONE;
-import static lombok.AccessLevel.PROTECTED;
 
 @EqualsAndHashCode(callSuper = true)
 @ToString(callSuper = true)
@@ -29,7 +35,7 @@
                           // @Getter(AccessLevel.NONE}))
 @Accessors(fluent = true) // generate fluent accessors with lombok and java-bean-style-accessors in non-abstract classes
                           // with ide, fluent accessors will (usually / by default) be ignored by mapstruct
-@NoArgsConstructor(access = PROTECTED, force = true) // generate no args constructor for jsonb, jaxb, jpa, mapstruct, ...
+@NoArgsConstructor(access = AccessLevel.PROTECTED, force = true) // generate no args constructor for jsonb, jaxb, jpa, mapstruct, ...
 @Entity
 @Table(schema = "test", name = "company")
 public class CompanyEntity extends AbstractMappedEntity<CompanyDTO> implements Company
@@ -37,7 +43,7 @@
 	/** mutable non-null */
 	// no lombok-generation of setter because of additional validation in manually created method
 	@NonNull
-	@Setter(NONE)
+	@Setter(AccessLevel.NONE)
 	@Column(unique=true, nullable=false)
 	private String name;
 
@@ -48,13 +54,13 @@
 	 */
 	@EqualsAndHashCode.Exclude
 	@ToString.Exclude
-	@Getter(NONE)
+	@Getter(AccessLevel.NONE)
 	@OneToMany
 	(
 			mappedBy = DepartmentEntity_.COMPANY,
 			// do not use cascade REMOVE in to-many relations as this may result in cascading deletes that wipe out both sides
 			// of the relation entirely
-			cascade  = { PERSIST, MERGE }
+			cascade  = { CascadeType.PERSIST, CascadeType.MERGE }
 	)
 	private Set<DepartmentEntity> departments;
 
Index: ../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/jpa/DepartmentEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.app.demo.common.datamodel.jpa;\r\n\r\nimport de.ruu.app.demo.common.Company;\r\nimport de.ruu.app.demo.common.Department;\r\nimport de.ruu.app.demo.common.datamodel.Mapper;\r\nimport de.ruu.app.demo.common.datamodel.dto.DepartmentDTO;\r\nimport de.ruu.lib.jpa.core.mapstruct.AbstractMappedEntity;\r\nimport de.ruu.lib.util.Strings;\r\nimport jakarta.persistence.Column;\r\nimport jakarta.persistence.Entity;\r\nimport jakarta.persistence.JoinColumn;\r\nimport jakarta.persistence.ManyToOne;\r\nimport jakarta.persistence.Table;\r\nimport lombok.EqualsAndHashCode;\r\nimport lombok.Getter;\r\nimport lombok.NoArgsConstructor;\r\nimport lombok.NonNull;\r\nimport lombok.Setter;\r\nimport lombok.ToString;\r\nimport lombok.experimental.Accessors;\r\nimport lombok.extern.slf4j.Slf4j;\r\n\r\nimport static lombok.AccessLevel.NONE;\r\nimport static lombok.AccessLevel.PROTECTED;\r\n\r\n@EqualsAndHashCode(callSuper = true)\r\n@ToString(callSuper = true)\r\n@Slf4j\r\n@Getter                   // generate getter methods for all fields using lombok unless configured otherwise ({@code\r\n                          // @Getter(AccessLevel.NONE}))\r\n@Accessors(fluent = true) // generate fluent accessors with lombok and java-bean-style-accessors in non-abstract classes\r\n                          // with ide, fluent accessors will (usually / by default) be ignored by mapstruct\r\n@NoArgsConstructor(access = PROTECTED, force = true) // generate no args constructor for jsonb, jaxb, jpa, mapstruct, ...\r\n@Entity\r\n@Table(schema = \"test\", name = \"department\")\r\npublic class DepartmentEntity extends AbstractMappedEntity<DepartmentDTO> implements Department\r\n{\r\n\t/** mutable non-null */\r\n\t// no lombok-generation of setter because of additional validation in manually created method\r\n\t@NonNull\r\n\t@Setter(NONE)\r\n\t@Column(unique=true, nullable=false)\r\n\tprivate String name;\r\n\r\n\t/** mutable, but not nullable */\r\n\t// no java-bean-style accessor here, mapstruct will ignore fields without bean-style-accessor so mapping can be\r\n\t// controlled in beforeMapping\r\n\t@ManyToOne\r\n\t@JoinColumn(name = \"idDepartment\")\r\n\t@EqualsAndHashCode.Exclude\r\n\t@ToString.Exclude\r\n\t@NonNull\r\n\t@Setter\r\n\tprivate CompanyEntity company;\r\n\r\n\t/* do not use lombok to make sure that fluent setter with its validation is called */\r\n\tpublic DepartmentEntity(@NonNull CompanyEntity company, @NonNull String name)\r\n\t{\r\n\t\tthis(); // just in case something important happens in the default constructor\r\n\t\tname(name); // use fluent setter with its validation\r\n\t\tcompany(company);\r\n\t}\r\n\r\n\t@Override public @NonNull Department name(@NonNull String name)\r\n\t{\r\n\t\tif (Strings.isEmptyOrBlank(name)) throw new IllegalArgumentException(\"name must not be empty nor blank\");\r\n\t\tthis.name = name;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t// java bean style accessors for those who do not work with fluent style accessors (mapstruct)\r\n//\tpublic @NonNull String  getName()    { return name(); }\r\n//\tpublic @NonNull Company getCompany() { return company(); }\r\n\r\n\t@Override public void beforeMapping(@NonNull DepartmentDTO input)\r\n\t{\r\n\t\tlog.debug(\"before mapping starting\");\r\n\t\tsuper.beforeMapping(input);\r\n\t\tname(input.name());\r\n\t\tlog.debug(\"before mapping finished\");\r\n\t}\r\n\r\n\t@Override public void afterMapping(@NonNull DepartmentDTO input)\r\n\t{\r\n\t\tlog.debug(\"after mapping starting\");\r\n\t\tlog.debug(\"after mapping finished\");\r\n\t}\r\n\r\n\t@Override public @NonNull DepartmentDTO toTarget() { return Mapper.INSTANCE.map(this); }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/jpa/DepartmentEntity.java b/../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/jpa/DepartmentEntity.java
--- a/../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/jpa/DepartmentEntity.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/company/jpadto/src/main/java/de/ruu/app/datamodel/company/jpa/DepartmentEntity.java	(date 1720677145677)
@@ -1,9 +1,8 @@
-package de.ruu.app.demo.common.datamodel.jpa;
+package de.ruu.app.datamodel.company.jpa;
 
-import de.ruu.app.demo.common.Company;
-import de.ruu.app.demo.common.Department;
-import de.ruu.app.demo.common.datamodel.Mapper;
-import de.ruu.app.demo.common.datamodel.dto.DepartmentDTO;
+import de.ruu.app.datamodel.company.Department;
+import de.ruu.app.datamodel.company.dto.DepartmentDTO;
+import de.ruu.app.datamodel.company.jpadto.Mapper;
 import de.ruu.lib.jpa.core.mapstruct.AbstractMappedEntity;
 import de.ruu.lib.util.Strings;
 import jakarta.persistence.Column;
@@ -11,6 +10,7 @@
 import jakarta.persistence.JoinColumn;
 import jakarta.persistence.ManyToOne;
 import jakarta.persistence.Table;
+import lombok.AccessLevel;
 import lombok.EqualsAndHashCode;
 import lombok.Getter;
 import lombok.NoArgsConstructor;
@@ -20,9 +20,6 @@
 import lombok.experimental.Accessors;
 import lombok.extern.slf4j.Slf4j;
 
-import static lombok.AccessLevel.NONE;
-import static lombok.AccessLevel.PROTECTED;
-
 @EqualsAndHashCode(callSuper = true)
 @ToString(callSuper = true)
 @Slf4j
@@ -30,7 +27,7 @@
                           // @Getter(AccessLevel.NONE}))
 @Accessors(fluent = true) // generate fluent accessors with lombok and java-bean-style-accessors in non-abstract classes
                           // with ide, fluent accessors will (usually / by default) be ignored by mapstruct
-@NoArgsConstructor(access = PROTECTED, force = true) // generate no args constructor for jsonb, jaxb, jpa, mapstruct, ...
+@NoArgsConstructor(access = AccessLevel.PROTECTED, force = true) // generate no args constructor for jsonb, jaxb, jpa, mapstruct, ...
 @Entity
 @Table(schema = "test", name = "department")
 public class DepartmentEntity extends AbstractMappedEntity<DepartmentDTO> implements Department
@@ -38,7 +35,7 @@
 	/** mutable non-null */
 	// no lombok-generation of setter because of additional validation in manually created method
 	@NonNull
-	@Setter(NONE)
+	@Setter(AccessLevel.NONE)
 	@Column(unique=true, nullable=false)
 	private String name;
 
Index: ../r-uu.app/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n\r\n  <modelVersion>4.0.0</modelVersion>\r\n  <artifactId>r-uu.app</artifactId>\r\n  <packaging>pom</packaging>\r\n\r\n  <parent>\r\n    <groupId>r-uu</groupId>\r\n    <artifactId>r-uu.maven-parent</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <relativePath>../r-uu.maven-parent</relativePath>\r\n  </parent>\r\n\r\n  <modules>\r\n    <module>demo</module>\r\n  </modules>\r\n\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/pom.xml b/../r-uu.app/pom.xml
--- a/../r-uu.app/pom.xml	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/pom.xml	(date 1720444765704)
@@ -17,6 +17,7 @@
 
   <modules>
     <module>demo</module>
+      <module>datamodel</module>
   </modules>
 
 </project>
\ No newline at end of file
Index: ../r-uu.app/datamodel/postaladdress/jpadto/src/main/java/de/ruu/app/datamodel/postaladdress/jpa/PostalAddressEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.app.datamodel.postaladdress.jpadto.jpa;\r\n\r\nimport de.ruu.app.datamodel.postaladdress.PostalAddress;\r\nimport de.ruu.app.datamodel.postaladdress.jpadto.Mapper;\r\nimport de.ruu.app.datamodel.postaladdress.jpadto.dto.PostalAddressDTO;\r\nimport de.ruu.lib.jpa.core.mapstruct.AbstractMappedEntity;\r\nimport jakarta.persistence.Entity;\r\nimport jakarta.persistence.Table;\r\nimport lombok.AccessLevel;\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Builder;\r\nimport lombok.EqualsAndHashCode;\r\nimport lombok.Getter;\r\nimport lombok.NoArgsConstructor;\r\nimport lombok.NonNull;\r\nimport lombok.Setter;\r\nimport lombok.experimental.Accessors;\r\nimport lombok.extern.slf4j.Slf4j;\r\n\r\n@Slf4j\r\n@Entity\r\n@Table(name = \"postal_address\", schema = \"test\")\r\n@Getter\r\n@Setter\r\n@Accessors(fluent = true) // generate fluent style getters but also implement java bean style getters\r\n// to comply to java bean conventions\r\n@EqualsAndHashCode(callSuper = true)\r\n@NoArgsConstructor(access = AccessLevel.PROTECTED) // required by jpa\r\n@AllArgsConstructor\r\n@Builder\r\npublic class PostalAddressEntity extends AbstractMappedEntity<PostalAddressDTO> implements PostalAddress\r\n{\r\n\t@NonNull @Builder.Default private String street = \"\";\r\n\t@NonNull @Builder.Default private String streetNumber = \"\";\r\n\t@NonNull @Builder.Default private String city = \"\";\r\n\t@NonNull @Builder.Default private String stateOrProvince = \"\";\r\n\t@NonNull @Builder.Default private String postalCode = \"\";\r\n\t@NonNull @Builder.Default private String country = \"\";\r\n\t@NonNull @Builder.Default private String type = \"\";\r\n\r\n\t@Override public @NonNull String getStreet() { return street; }\r\n\t@Override public void setStreet(@NonNull String street) { this.street = street; }\r\n\r\n\t@Override public @NonNull String getStreetNumber() { return streetNumber; }\r\n\t@Override public void setStreetNumber(@NonNull String streetNumber) { this.streetNumber = streetNumber; }\r\n\r\n\t@Override public @NonNull String getCity() { return city; }\r\n\t@Override public void setCity(@NonNull String city) { this.city = city; }\r\n\r\n\t@Override public @NonNull String getStateOrProvince() { return stateOrProvince; }\r\n\t@Override public void setStateOrProvince(@NonNull String stateOrProvince) { this.stateOrProvince = stateOrProvince; }\r\n\r\n\t@Override public @NonNull String getPostalCode() { return postalCode; }\r\n\t@Override public void setPostalCode(@NonNull String postalCode) { this.postalCode = postalCode; }\r\n\r\n\t@Override public @NonNull String getCountry() { return country; }\r\n\t@Override public void setCountry(@NonNull String country) { this.country = country; }\r\n\r\n\t@Override public @NonNull String getType() { return type; }\r\n\t@Override public void setType(@NonNull String type) { this.type = type; }\r\n\r\n\t@Override public void afterMapping(@NonNull PostalAddressDTO input)\r\n\t{\r\n\t\tlog.debug(\"after mapping starting\");\r\n\t\tlog.debug(\"after mapping finished\");\r\n\t}\r\n\r\n\t@Override public @NonNull PostalAddressDTO toTarget() { return Mapper.INSTANCE.map(this); }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/postaladdress/jpadto/src/main/java/de/ruu/app/datamodel/postaladdress/jpa/PostalAddressEntity.java b/../r-uu.app/datamodel/postaladdress/jpadto/src/main/java/de/ruu/app/datamodel/postaladdress/jpa/PostalAddressEntity.java
--- a/../r-uu.app/datamodel/postaladdress/jpadto/src/main/java/de/ruu/app/datamodel/postaladdress/jpa/PostalAddressEntity.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/postaladdress/jpadto/src/main/java/de/ruu/app/datamodel/postaladdress/jpa/PostalAddressEntity.java	(date 1720695231777)
@@ -1,8 +1,8 @@
-package de.ruu.app.datamodel.postaladdress.jpadto.jpa;
+package de.ruu.app.datamodel.postaladdress.jpa;
 
 import de.ruu.app.datamodel.postaladdress.PostalAddress;
 import de.ruu.app.datamodel.postaladdress.jpadto.Mapper;
-import de.ruu.app.datamodel.postaladdress.jpadto.dto.PostalAddressDTO;
+import de.ruu.app.datamodel.postaladdress.dto.PostalAddressDTO;
 import de.ruu.lib.jpa.core.mapstruct.AbstractMappedEntity;
 import jakarta.persistence.Entity;
 import jakarta.persistence.Table;
@@ -19,7 +19,7 @@
 
 @Slf4j
 @Entity
-@Table(name = "postal_address", schema = "test")
+@Table(name = "postal_address", schema = "demo_test")
 @Getter
 @Setter
 @Accessors(fluent = true) // generate fluent style getters but also implement java bean style getters
Index: ../r-uu.app/datamodel/postaladdress/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>r-uu</groupId>\r\n        <artifactId>r-uu.app-datamodel</artifactId>\r\n        <version>0.0.1-SNAPSHOT</version>\r\n    </parent>\r\n\r\n    <artifactId>postaladdress</artifactId>\r\n\r\n    <properties>\r\n        <maven.compiler.source>21</maven.compiler.source>\r\n        <maven.compiler.target>21</maven.compiler.target>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n    </properties>\r\n\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/postaladdress/pom.xml b/../r-uu.app/datamodel/postaladdress/pom.xml
--- a/../r-uu.app/datamodel/postaladdress/pom.xml	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/postaladdress/pom.xml	(date 1720683814817)
@@ -1,20 +1,24 @@
 <?xml version="1.0" encoding="UTF-8"?>
+
 <project xmlns="http://maven.apache.org/POM/4.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+
     <modelVersion>4.0.0</modelVersion>
+    <artifactId>r-uu.app-datamodel-postaladdress</artifactId>
+    <packaging>pom</packaging>
+
     <parent>
         <groupId>r-uu</groupId>
         <artifactId>r-uu.app-datamodel</artifactId>
         <version>0.0.1-SNAPSHOT</version>
     </parent>
 
-    <artifactId>postaladdress</artifactId>
-
-    <properties>
-        <maven.compiler.source>21</maven.compiler.source>
-        <maven.compiler.target>21</maven.compiler.target>
-        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-    </properties>
+    <modules>
+        <module>common</module>
+        <module>jpadto</module>
+        <module>jpadto-ee</module>
+        <module>jpadto-se</module>
+    </modules>
 
 </project>
\ No newline at end of file
Index: ../r-uu.app/demo/client/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <artifactId>r-uu.app-demo-client</artifactId>\r\n\r\n    <parent>\r\n        <groupId>r-uu</groupId>\r\n        <artifactId>r-uu.app-demo</artifactId>\r\n        <version>0.0.1-SNAPSHOT</version>\r\n    </parent>\r\n\r\n    <dependencies>\r\n<!--        <dependency>-->\r\n<!--            <groupId>jakarta.activation</groupId>-->\r\n<!--            <artifactId>jakarta.activation-api</artifactId>-->\r\n<!--        </dependency>-->\r\n        <dependency>\r\n            <groupId>org.glassfish.jersey.core</groupId>\r\n            <artifactId>jersey-client</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.glassfish.jersey.inject</groupId>\r\n            <artifactId>jersey-hk2</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.glassfish.jersey.media</groupId>\r\n            <artifactId>jersey-media-json-binding</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>r-uu</groupId>\r\n            <artifactId>r-uu.app-demo-common</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.projectlombok</groupId>\r\n            <artifactId>lombok</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.junit.jupiter</groupId>\r\n            <artifactId>junit-jupiter-api</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.hamcrest</groupId>\r\n            <artifactId>hamcrest</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>r-uu</groupId>\r\n            <artifactId>r-uu.lib-junit</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>r-uu</groupId>\r\n            <artifactId>r-uu.lib-cdi-se</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.jboss.weld.se</groupId>\r\n            <artifactId>weld-se-core</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/demo/client/pom.xml b/../r-uu.app/demo/client/pom.xml
--- a/../r-uu.app/demo/client/pom.xml	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/demo/client/pom.xml	(date 1720536786402)
@@ -14,10 +14,10 @@
     </parent>
 
     <dependencies>
-<!--        <dependency>-->
-<!--            <groupId>jakarta.activation</groupId>-->
-<!--            <artifactId>jakarta.activation-api</artifactId>-->
-<!--        </dependency>-->
+        <dependency>
+            <groupId>jakarta.interceptor</groupId>
+            <artifactId>jakarta.interceptor-api</artifactId>
+        </dependency>
         <dependency>
             <groupId>org.glassfish.jersey.core</groupId>
             <artifactId>jersey-client</artifactId>
@@ -29,6 +29,10 @@
         <dependency>
             <groupId>org.glassfish.jersey.media</groupId>
             <artifactId>jersey-media-json-binding</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.jboss.weld.se</groupId>
+            <artifactId>weld-se-core</artifactId>
         </dependency>
         <dependency>
             <groupId>r-uu</groupId>
@@ -48,18 +52,36 @@
         </dependency>
         <dependency>
             <groupId>r-uu</groupId>
+            <artifactId>r-uu.lib-fx-comp</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>r-uu</groupId>
             <artifactId>r-uu.lib-junit</artifactId>
             <scope>test</scope>
         </dependency>
         <dependency>
             <groupId>r-uu</groupId>
             <artifactId>r-uu.lib-cdi-se</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>r-uu</groupId>
+            <artifactId>r-uu.lib-gen-core</artifactId>
             <scope>test</scope>
         </dependency>
         <dependency>
-            <groupId>org.jboss.weld.se</groupId>
-            <artifactId>weld-se-core</artifactId>
+            <groupId>r-uu</groupId>
+            <artifactId>r-uu.lib-gen-java-fx-comp</artifactId>
             <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>r-uu</groupId>
+            <artifactId>r-uu.app-datamodel-postaladdress-common</artifactId>
+            <version>0.0.1-SNAPSHOT</version>
+            <scope>compile</scope>
+        </dependency>
+        <dependency>
+            <groupId>r-uu</groupId>
+            <artifactId>r-uu.app-datamodel-postaladdress-jpadto</artifactId>
         </dependency>
     </dependencies>
 
Index: ../r-uu.app/demo/common/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <artifactId>r-uu.app-demo-common</artifactId>\r\n\t<version>0.0.1-SNAPSHOT</version>\r\n\r\n    <parent>\r\n        <groupId>r-uu</groupId>\r\n        <artifactId>r-uu.app-demo</artifactId>\r\n        <version>0.0.1-SNAPSHOT</version>\r\n    </parent>\r\n\r\n    <dependencies>\r\n<!--        <dependency>-->\r\n<!--            <groupId>jakarta.platform</groupId>-->\r\n<!--            <artifactId>jakarta.jakartaee-api</artifactId>-->\r\n<!--        </dependency>-->\r\n        <dependency>\r\n            <groupId>jakarta.enterprise</groupId>\r\n            <artifactId>jakarta.enterprise.cdi-api</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.projectlombok</groupId>\r\n            <artifactId>lombok</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>r-uu</groupId>\r\n            <artifactId>r-uu.lib-jpa-core-mapstruct</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.junit.jupiter</groupId>\r\n            <artifactId>junit-jupiter-api</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.hamcrest</groupId>\r\n            <artifactId>hamcrest</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/demo/common/pom.xml b/../r-uu.app/demo/common/pom.xml
--- a/../r-uu.app/demo/common/pom.xml	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/demo/common/pom.xml	(date 1720677003330)
@@ -14,10 +14,6 @@
     </parent>
 
     <dependencies>
-<!--        <dependency>-->
-<!--            <groupId>jakarta.platform</groupId>-->
-<!--            <artifactId>jakarta.jakartaee-api</artifactId>-->
-<!--        </dependency>-->
         <dependency>
             <groupId>jakarta.enterprise</groupId>
             <artifactId>jakarta.enterprise.cdi-api</artifactId>
@@ -30,6 +26,10 @@
             <groupId>r-uu</groupId>
             <artifactId>r-uu.lib-jpa-core-mapstruct</artifactId>
         </dependency>
+        <dependency>
+            <groupId>r-uu</groupId>
+            <artifactId>r-uu.app-datamodel-postaladdress-jpadto</artifactId>
+        </dependency>
 
         <dependency>
             <groupId>org.junit.jupiter</groupId>
@@ -40,6 +40,10 @@
             <groupId>org.hamcrest</groupId>
             <artifactId>hamcrest</artifactId>
             <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>r-uu</groupId>
+            <artifactId>r-uu.app-datamodel-company-jpadto</artifactId>
         </dependency>
     </dependencies>
 
Index: ../r-uu.app/demo/server/src/main/java/module-info.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>module r.uu.app.demo.server\r\n{\r\n\trequires de.ruu.app.demo.common;\r\n\trequires java.management;\r\n\trequires microprofile.config.api;\r\n\trequires microprofile.health.api;\r\n\trequires microprofile.metrics.api;\r\n\trequires jakarta.ws.rs;\r\n\trequires jakarta.cdi;\r\n\trequires microprofile.openapi.api;\r\n\trequires de.ruu.lib.util;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/demo/server/src/main/java/module-info.java b/../r-uu.app/demo/server/src/main/java/module-info.java
--- a/../r-uu.app/demo/server/src/main/java/module-info.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/demo/server/src/main/java/module-info.java	(date 1720678656417)
@@ -1,12 +1,19 @@
 module r.uu.app.demo.server
 {
-	requires de.ruu.app.demo.common;
 	requires java.management;
+
+	requires jakarta.ws.rs;
+	requires jakarta.cdi;
+
 	requires microprofile.config.api;
 	requires microprofile.health.api;
 	requires microprofile.metrics.api;
-	requires jakarta.ws.rs;
-	requires jakarta.cdi;
 	requires microprofile.openapi.api;
+
 	requires de.ruu.lib.util;
+
+	requires de.ruu.app.demo.common;
+	requires de.ruu.app.datamodel.postaladdress.jpadto;
+	requires de.ruu.app.datamodel.postaladdress.jpadto.ee;
+	requires r.uu.app.datamodel.company.jpadto;
 }
\ No newline at end of file
Index: ../r-uu.app/demo/server/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n\r\n\t<modelVersion>4.0.0</modelVersion>\r\n\t<artifactId>r-uu.app-demo-server</artifactId>\r\n\t<version>0.0.1-SNAPSHOT</version>\r\n\t<packaging>war</packaging>\r\n\r\n\t<parent>\r\n\t\t<groupId>r-uu</groupId>\r\n\t\t<artifactId>r-uu.maven-parent</artifactId>\r\n\t\t<version>0.0.1-SNAPSHOT</version>\r\n\t\t<relativePath>../../../r-uu.maven-parent</relativePath>\r\n\t</parent>\r\n\r\n\t<properties>\r\n\t\t<!-- overwrite possible definition of properties in parent modules -->\r\n<!--\t\t<maven.compiler.source></maven.compiler.source>-->\r\n<!--\t\t<maven.compiler.target></maven.compiler.target>-->\r\n<!--\t\t<maven.compiler.release>${java.version}</maven.compiler.release>-->\r\n\t\t<!-- Liberty configuration -->\r\n\t\t<liberty.var.http.port>9080</liberty.var.http.port>\r\n\t\t<liberty.var.https.port>9443</liberty.var.https.port>\r\n\t</properties>\r\n\r\n\t<dependencies>\r\n\t\t<!-- Provided dependencies -->\r\n\t\t<!-- IMPORTANT: Do _NOT_ include jakarta.jakartaee-api and microprofile dependencies. This will end up in a\r\n\t\t     nightmare of split packages and so on if java module system (JPMS) is in charge.\r\n\t\t -->\r\n<!--\t\t<dependency>-->\r\n<!--\t\t\t<groupId>jakarta.platform</groupId>-->\r\n<!--\t\t\t<artifactId>jakarta.jakartaee-api</artifactId>-->\r\n<!--\t\t\t<scope>provided</scope>-->\r\n<!--\t\t</dependency>-->\r\n<!--\t\t<dependency>-->\r\n<!--\t\t\t<groupId>org.eclipse.microprofile</groupId>-->\r\n<!--\t\t\t<artifactId>microprofile</artifactId>-->\r\n<!--\t\t\t<type>pom</type>-->\r\n<!--\t\t\t<scope>provided</scope>-->\r\n<!--\t\t</dependency>-->\r\n\t\t<dependency>\r\n\t\t\t<groupId>jakarta.enterprise</groupId>\r\n\t\t\t<artifactId>jakarta.enterprise.cdi-api</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.eclipse.microprofile.health</groupId>\r\n\t\t\t<artifactId>microprofile-health-api</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.eclipse.microprofile.metrics</groupId>\r\n\t\t\t<artifactId>microprofile-metrics-api</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.eclipse.microprofile.openapi</groupId>\r\n\t\t\t<artifactId>microprofile-openapi-api</artifactId>\r\n\t\t</dependency>\r\n\r\n\t\t<!-- own dependencies -->\r\n        <dependency>\r\n            <groupId>r-uu</groupId>\r\n            <artifactId>r-uu.app-demo-common</artifactId>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n\t<build>\r\n\t\t<finalName>${project.artifactId}</finalName>\r\n\t\t<plugins>\r\n\t\t\t<!-- Enable liberty-maven plugin -->\r\n\t\t\t<plugin>\r\n\t\t\t\t<groupId>io.openliberty.tools</groupId>\r\n\t\t\t\t<artifactId>liberty-maven-plugin</artifactId>\r\n\t\t\t\t<version>3.10.3</version>\r\n\t\t\t\t<configuration>\r\n\t\t\t\t\t<jvmOptions>--enable-preview</jvmOptions>\r\n\t\t\t\t\t<copyDependencies>\r\n\t\t\t\t\t\t<location>${project.build.directory}/liberty/wlp/usr/shared/resources</location>\r\n\t\t\t\t\t\t<dependency>\r\n\t\t\t\t\t\t\t<groupId>org.postgresql</groupId>\r\n\t\t\t\t\t\t\t<artifactId>postgresql</artifactId>\r\n<!--\t\t\t\t\t\t\t<version>42.7.3</version>-->\r\n\t\t\t\t\t\t</dependency>\r\n\t\t\t\t\t</copyDependencies>\r\n\t\t\t\t</configuration>\r\n\t\t\t</plugin>\r\n\t\t\t<plugin>\r\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\r\n\t\t\t\t<artifactId>maven-war-plugin</artifactId>\r\n\t\t\t\t<configuration>\r\n\t\t\t\t\t<failOnMissingWebXml>false</failOnMissingWebXml>\r\n\t\t\t\t</configuration>\r\n\t\t\t</plugin>\r\n\t\t\t<plugin>\r\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\r\n\t\t\t\t<artifactId>maven-surefire-plugin</artifactId>\r\n\t\t\t</plugin>\r\n\t\t\t<!-- Plugin to run functional tests -->\r\n\t\t\t<plugin>\r\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\r\n\t\t\t\t<artifactId>maven-failsafe-plugin</artifactId>\r\n\t\t\t\t<configuration>\r\n\t\t\t\t\t<systemPropertyVariables>\r\n\t\t\t\t\t\t<http.port>${liberty.var.http.port}</http.port>\r\n\t\t\t\t\t\t<context.root>/</context.root>\r\n\t\t\t\t\t</systemPropertyVariables>\r\n\t\t\t\t</configuration>\r\n\t\t\t</plugin>\r\n\t\t</plugins>\r\n\t</build>\r\n\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/demo/server/pom.xml b/../r-uu.app/demo/server/pom.xml
--- a/../r-uu.app/demo/server/pom.xml	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/demo/server/pom.xml	(date 1720529626767)
@@ -64,6 +64,18 @@
             <groupId>r-uu</groupId>
             <artifactId>r-uu.app-demo-common</artifactId>
         </dependency>
+        <dependency>
+            <groupId>r-uu</groupId>
+            <artifactId>r-uu.app-datamodel-postaladdress-jpadto</artifactId>
+            <version>0.0.1-SNAPSHOT</version>
+            <scope>compile</scope>
+        </dependency>
+        <dependency>
+            <groupId>r-uu</groupId>
+            <artifactId>r-uu.app-datamodel-postaladdress-jpadto-ee</artifactId>
+            <version>0.0.1-SNAPSHOT</version>
+            <scope>compile</scope>
+        </dependency>
     </dependencies>
 
 	<build>
Index: ../r-uu.app/datamodel/postaladdress/common/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>r-uu</groupId>\r\n        <artifactId>r-uu.app-datamodel</artifactId>\r\n        <version>0.0.1-SNAPSHOT</version>\r\n        <relativePath>../../pom.xml</relativePath>\r\n    </parent>\r\n\r\n    <artifactId>common</artifactId>\r\n\r\n    <properties>\r\n        <maven.compiler.source>21</maven.compiler.source>\r\n        <maven.compiler.target>21</maven.compiler.target>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n    </properties>\r\n\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/postaladdress/common/pom.xml b/../r-uu.app/datamodel/postaladdress/common/pom.xml
--- a/../r-uu.app/datamodel/postaladdress/common/pom.xml	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/postaladdress/common/pom.xml	(date 1720520391343)
@@ -2,20 +2,22 @@
 <project xmlns="http://maven.apache.org/POM/4.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+
     <modelVersion>4.0.0</modelVersion>
+    <artifactId>r-uu.app-datamodel-postaladdress-common</artifactId>
+
     <parent>
         <groupId>r-uu</groupId>
-        <artifactId>r-uu.app-datamodel</artifactId>
+        <artifactId>r-uu.app-datamodel-postaladdress</artifactId>
         <version>0.0.1-SNAPSHOT</version>
-        <relativePath>../../pom.xml</relativePath>
     </parent>
 
-    <artifactId>common</artifactId>
-
-    <properties>
-        <maven.compiler.source>21</maven.compiler.source>
-        <maven.compiler.target>21</maven.compiler.target>
-        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-    </properties>
+    <dependencies>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+            <scope>compile</scope>
+        </dependency>
+    </dependencies>
 
 </project>
\ No newline at end of file
Index: ../r-uu.app/datamodel/company/jpadto/src/main/java/module-info.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>module $MODULE_NAME$ {\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/company/jpadto/src/main/java/module-info.java b/../r-uu.app/datamodel/company/jpadto/src/main/java/module-info.java
--- a/../r-uu.app/datamodel/company/jpadto/src/main/java/module-info.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/company/jpadto/src/main/java/module-info.java	(date 1720678452106)
@@ -1,2 +1,17 @@
-module $MODULE_NAME$ {
+module r.uu.app.datamodel.company.jpadto
+{
+	exports de.ruu.app.datamodel.company.dto;
+	exports de.ruu.app.datamodel.company.jpa;
+	exports de.ruu.app.datamodel.company.jpadto;
+	requires static lombok;
+	requires org.slf4j;
+
+	requires jakarta.persistence;
+	requires jakarta.cdi;
+	requires de.ruu.lib.util;
+	requires de.ruu.lib.jpa.core.mapstruct;
+	requires de.ruu.app.datamodel.company.common;
+	requires de.ruu.lib.jpa.core;
+	requires de.ruu.lib.mapstruct;
+	requires org.mapstruct;
 }
\ No newline at end of file
Index: ../r-uu.app/demo/client/src/test/java/de/ruu/app/demo/client/datamodel/rs/postaladdress/ClientPostalAddressTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.app.demo.client.rs.company;\r\n\r\nimport static org.hamcrest.CoreMatchers.is;\r\nimport static org.hamcrest.CoreMatchers.not;\r\nimport static org.hamcrest.CoreMatchers.nullValue;\r\nimport static org.hamcrest.MatcherAssert.assertThat;\r\nimport static org.junit.jupiter.api.Assertions.fail;\r\n\r\nimport java.util.Optional;\r\nimport java.util.Set;\r\n\r\nimport de.ruu.app.demo.common.Company;\r\nimport de.ruu.app.demo.common.datamodel.dto.CompanyDTO;\r\nimport de.ruu.lib.junit.DisabledOnServerNotListening;\r\nimport org.junit.jupiter.api.BeforeAll;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport de.ruu.lib.cdi.se.CDIContainer;\r\nimport jakarta.enterprise.inject.spi.CDI;\r\nimport lombok.extern.slf4j.Slf4j;\r\n\r\n@DisabledOnServerNotListening(propertyNameHost = \"company.rest-api.host\", propertyNamePort = \"company.rest-api.port\")\r\n@Slf4j\r\nclass ClientCompanyTest\r\n{\r\n\tprivate ClientCompany client;\r\n\r\n\t@BeforeAll static void beforeAll()\r\n\t{\r\n\t\tCDIContainer.bootstrap(ClientCompanyTest.class.getClassLoader());\r\n\t}\r\n\r\n\t@BeforeEach void beforeEach()\r\n\t{\r\n\t\tclient = CDI.current().select(ClientCompany.class).get();\r\n\t}\r\n\r\n\t@Test void testFindAll()\r\n\t{\r\n\t\tSet<Company> all = client.findAll();\r\n\r\n\t\tassertThat(all, is(not(nullValue())));\r\n\r\n\t\tlog.info(\"\\nreceived {} tag groups\", all.size());\r\n\t}\r\n\r\n\t@Test void testCreate()\r\n\t{\r\n\t\tString name = \"de/ruu/app/demo/client/datamodel/rs/postaladdress \" + System.currentTimeMillis();\r\n\r\n\t\tCompany company = client.create(new CompanyDTO(name));\r\n\r\n\t\tlog.info(\"\\nreceived company\\n{}\", company);\r\n\r\n\t\tif (company instanceof CompanyDTO)\r\n\t\t{\r\n\t\t\tCompanyDTO dto = (CompanyDTO) company;\r\n\r\n\t\t\tassertThat(dto.id  (), is(not(nullValue())));\r\n\t\t\tassertThat(dto.name(), is(name));\r\n\r\n\t\t\tassertThat(dto.version(), is(not(nullValue())));\r\n\t\t\tassertThat(dto.version(), is((short) 0       ));\r\n\r\n\t\t\tassertThat(dto.optionalDepartments()            , is(not(nullValue())));\r\n\t\t\tassertThat(dto.optionalDepartments().isPresent(), is(false));\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tfail(\"unexpected type: \" + company.getClass().getName());\r\n\t\t}\r\n\t}\r\n\r\n\t@Test void testRead()\r\n\t{\r\n\t\tString name = \"de/ruu/app/demo/client/datamodel/rs/postaladdress \" + System.currentTimeMillis();\r\n\r\n\t\tCompany companyIn = client.create(new CompanyDTO(name));\r\n\r\n\t\tOptional<Company> optional = client.read(companyIn.id());\r\n\r\n\t\tassertThat(optional            , is(not(nullValue())));\r\n\t\tassertThat(optional.isPresent(), is(not(false)));\r\n\r\n\t\tCompany companyOut = optional.get();\r\n\r\n\t\tlog.info(\"\\nreceived company\\n{}\" + companyOut);\r\n\r\n\t\tif (companyOut instanceof CompanyDTO)\r\n\t\t{\r\n\t\t\tCompanyDTO dto = (CompanyDTO) companyOut;\r\n\r\n\t\t\tassertThat(dto.id  (), is(not(nullValue())));\r\n\t\t\tassertThat(dto.name(), is(name));\r\n\r\n\t\t\tassertThat(dto.version(), is(not(nullValue())));\r\n\t\t\tassertThat(dto.version(), is((short) 0       ));\r\n\r\n\t\t\tassertThat(dto.optionalDepartments()            , is(not(nullValue())));\r\n\t\t\tassertThat(dto.optionalDepartments().isPresent(), is(false));\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tfail(\"unexpected type: \" + companyOut.getClass().getName());\r\n\t\t}\r\n\t}\r\n\r\n\t@Test void testUpdate()\r\n\t{\r\n\t\tCompany companyIn = client.create(new CompanyDTO(\"de/ruu/app/demo/client/datamodel/rs/postaladdress \" + System.currentTimeMillis()));\r\n\r\n\t\tString name = \"modified \" + System.currentTimeMillis();\r\n\r\n\t\tcompanyIn.name(name);\r\n\r\n\t\tCompany companyOut = client.update(companyIn);\r\n\r\n\t\tlog.info(\"\\nreceived company\\n{}\" + companyOut);\r\n\r\n\t\tif (companyOut instanceof CompanyDTO)\r\n\t\t{\r\n\t\t\tCompanyDTO dto = (CompanyDTO) companyOut;\r\n\r\n\t\t\tassertThat(dto.id(), is(not(nullValue())));\r\n\r\n\t\t\tassertThat(dto.version(), is(not(nullValue())));\r\n\t\t\tassertThat(dto.version(), is((short) 1       ));\r\n\r\n\t\t\tassertThat(dto.optionalDepartments()            , is(not(nullValue())));\r\n\t\t\tassertThat(dto.optionalDepartments().isPresent(), is(false));\r\n\r\n\t\t\tassertThat(dto.name(), is(name));\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tfail(\"unexpected type: \" + companyOut.getClass().getName());\r\n\t\t}\r\n\t}\r\n\r\n\t@Test void testDelete()\r\n\t{\r\n\t\tCompany company = client.create(new CompanyDTO(\"de/ruu/app/demo/client/datamodel/rs/postaladdress \" + System.currentTimeMillis()));\r\n\r\n\t\tlog.info(\"\\nreceived company\\n{}\", company);\r\n\r\n\t\tclient.delete(company.id());\r\n\r\n\t\tOptional<Company> optional = client.read(company.id());\r\n\r\n\t\tassertThat(optional            , is(not(nullValue())));\r\n\t\tassertThat(optional.isPresent(), is(false));\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/demo/client/src/test/java/de/ruu/app/demo/client/datamodel/rs/postaladdress/ClientPostalAddressTest.java b/../r-uu.app/demo/client/src/test/java/de/ruu/app/demo/client/datamodel/rs/postaladdress/ClientPostalAddressTest.java
--- a/../r-uu.app/demo/client/src/test/java/de/ruu/app/demo/client/datamodel/rs/postaladdress/ClientPostalAddressTest.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/demo/client/src/test/java/de/ruu/app/demo/client/datamodel/rs/postaladdress/ClientPostalAddressTest.java	(date 1720627622308)
@@ -1,4 +1,17 @@
-package de.ruu.app.demo.client.rs.company;
+package de.ruu.app.demo.client.datamodel.rs.postaladdress;
+
+import de.ruu.app.datamodel.postaladdress.PostalAddress;
+import de.ruu.app.datamodel.postaladdress.dto.PostalAddressDTO;
+import de.ruu.lib.cdi.se.CDIContainer;
+import de.ruu.lib.junit.DisabledOnServerNotListening;
+import jakarta.enterprise.inject.spi.CDI;
+import lombok.extern.slf4j.Slf4j;
+import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import java.util.Optional;
+import java.util.Set;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.not;
@@ -6,39 +19,25 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.jupiter.api.Assertions.fail;
 
-import java.util.Optional;
-import java.util.Set;
-
-import de.ruu.app.demo.common.Company;
-import de.ruu.app.demo.common.datamodel.dto.CompanyDTO;
-import de.ruu.lib.junit.DisabledOnServerNotListening;
-import org.junit.jupiter.api.BeforeAll;
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Test;
-
-import de.ruu.lib.cdi.se.CDIContainer;
-import jakarta.enterprise.inject.spi.CDI;
-import lombok.extern.slf4j.Slf4j;
-
-@DisabledOnServerNotListening(propertyNameHost = "company.rest-api.host", propertyNamePort = "company.rest-api.port")
+@DisabledOnServerNotListening(propertyNameHost = "postal-address.rest-api.host", propertyNamePort = "postal-address.rest-api.port")
 @Slf4j
-class ClientCompanyTest
+class ClientPostalAddressTest
 {
-	private ClientCompany client;
+	private ClientPostalAddress client;
 
 	@BeforeAll static void beforeAll()
 	{
-		CDIContainer.bootstrap(ClientCompanyTest.class.getClassLoader());
+		CDIContainer.bootstrap(ClientPostalAddressTest.class.getClassLoader());
 	}
 
 	@BeforeEach void beforeEach()
 	{
-		client = CDI.current().select(ClientCompany.class).get();
+		client = CDI.current().select(ClientPostalAddress.class).get();
 	}
 
 	@Test void testFindAll()
 	{
-		Set<Company> all = client.findAll();
+		Set<PostalAddress> all = client.findAll();
 
 		assertThat(all, is(not(nullValue())));
 
@@ -49,26 +48,28 @@
 	{
 		String name = "de/ruu/app/demo/client/datamodel/rs/postaladdress " + System.currentTimeMillis();
 
-		Company company = client.create(new CompanyDTO(name));
+		PostalAddress postalAddress =
+				client.create(
+						PostalAddressDTO
+								.builder()
+										.city(name)
+								.build());
 
-		log.info("\nreceived company\n{}", company);
+		log.info("\nreceived postalAddress\n{}", postalAddress);
 
-		if (company instanceof CompanyDTO)
+		if (postalAddress instanceof PostalAddressDTO)
 		{
-			CompanyDTO dto = (CompanyDTO) company;
+			PostalAddressDTO dto = (PostalAddressDTO) postalAddress;
 
 			assertThat(dto.id  (), is(not(nullValue())));
-			assertThat(dto.name(), is(name));
+			assertThat(dto.city(), is(name));
 
 			assertThat(dto.version(), is(not(nullValue())));
 			assertThat(dto.version(), is((short) 0       ));
-
-			assertThat(dto.optionalDepartments()            , is(not(nullValue())));
-			assertThat(dto.optionalDepartments().isPresent(), is(false));
 		}
 		else
 		{
-			fail("unexpected type: " + company.getClass().getName());
+			fail("unexpected type: " + postalAddress.getClass().getName());
 		}
 	}
 
@@ -76,79 +77,96 @@
 	{
 		String name = "de/ruu/app/demo/client/datamodel/rs/postaladdress " + System.currentTimeMillis();
 
-		Company companyIn = client.create(new CompanyDTO(name));
+		PostalAddress postalAddressIn =
+				client.create(
+						PostalAddressDTO
+								.builder()
+								.city(name)
+								.build());
 
-		Optional<Company> optional = client.read(companyIn.id());
+		if (postalAddressIn instanceof PostalAddressDTO)
+		{
+			PostalAddressDTO dto = (PostalAddressDTO) postalAddressIn;
+
+			Optional<PostalAddress> optional = client.read(dto.id());
 
-		assertThat(optional            , is(not(nullValue())));
-		assertThat(optional.isPresent(), is(not(false)));
+			assertThat(optional            , is(not(nullValue())));
+			assertThat(optional.isPresent(), is(not(false)));
 
-		Company companyOut = optional.get();
+			PostalAddress postalAddressOut = optional.get();
 
-		log.info("\nreceived company\n{}" + companyOut);
+			log.info("\nreceived postal address\n{}" + postalAddressOut);
 
-		if (companyOut instanceof CompanyDTO)
-		{
-			CompanyDTO dto = (CompanyDTO) companyOut;
+			if (postalAddressOut instanceof PostalAddressDTO)
+			{
+				dto = (PostalAddressDTO) postalAddressOut;
 
-			assertThat(dto.id  (), is(not(nullValue())));
-			assertThat(dto.name(), is(name));
+				assertThat(dto.id  (), is(not(nullValue())));
+				assertThat(dto.city(), is(name));
 
-			assertThat(dto.version(), is(not(nullValue())));
-			assertThat(dto.version(), is((short) 0       ));
-
-			assertThat(dto.optionalDepartments()            , is(not(nullValue())));
-			assertThat(dto.optionalDepartments().isPresent(), is(false));
-		}
-		else
-		{
-			fail("unexpected type: " + companyOut.getClass().getName());
+				assertThat(dto.version(), is(not(nullValue())));
+				assertThat(dto.version(), is((short) 0       ));
+			}
+			else
+			{
+				fail("unexpected type: " + postalAddressOut.getClass().getName());
+			}
 		}
 	}
 
 	@Test void testUpdate()
 	{
-		Company companyIn = client.create(new CompanyDTO("de/ruu/app/demo/client/datamodel/rs/postaladdress " + System.currentTimeMillis()));
+		String name = "de/ruu/app/demo/client/datamodel/rs/postaladdress " + System.currentTimeMillis();
 
-		String name = "modified " + System.currentTimeMillis();
+		PostalAddress postalAddressIn = client.create(PostalAddressDTO.builder().city(name).build());
 
-		companyIn.name(name);
+		name = "modified " + System.currentTimeMillis();
 
-		Company companyOut = client.update(companyIn);
+		postalAddressIn.setCity(name);
 
-		log.info("\nreceived company\n{}" + companyOut);
+		PostalAddress postalAddressOut = client.update(postalAddressIn);
 
-		if (companyOut instanceof CompanyDTO)
+		log.info("\nreceived postal address\n{}" + postalAddressOut);
+
+		if (postalAddressOut instanceof PostalAddressDTO)
 		{
-			CompanyDTO dto = (CompanyDTO) companyOut;
+			PostalAddressDTO dto = (PostalAddressDTO) postalAddressOut;
 
 			assertThat(dto.id(), is(not(nullValue())));
 
 			assertThat(dto.version(), is(not(nullValue())));
 			assertThat(dto.version(), is((short) 1       ));
 
-			assertThat(dto.optionalDepartments()            , is(not(nullValue())));
-			assertThat(dto.optionalDepartments().isPresent(), is(false));
-
-			assertThat(dto.name(), is(name));
+			assertThat(dto.city(), is(name));
 		}
 		else
 		{
-			fail("unexpected type: " + companyOut.getClass().getName());
+			fail("unexpected type: " + postalAddressOut.getClass().getName());
 		}
 	}
 
 	@Test void testDelete()
 	{
-		Company company = client.create(new CompanyDTO("de/ruu/app/demo/client/datamodel/rs/postaladdress " + System.currentTimeMillis()));
+		String name = "de/ruu/app/demo/client/datamodel/rs/postaladdress " + System.currentTimeMillis();
+
+		PostalAddress postalAddress = client.create(PostalAddressDTO.builder().city(name).build());;
 
-		log.info("\nreceived company\n{}", company);
+		log.info("\nreceived postal address\n{}", postalAddress);
 
-		client.delete(company.id());
+		if (postalAddress instanceof PostalAddressDTO)
+		{
+			PostalAddressDTO dto = (PostalAddressDTO) postalAddress;
 
-		Optional<Company> optional = client.read(company.id());
+			client.delete(dto.id());
+
+			Optional<PostalAddress> optional = client.read(dto.id());
 
-		assertThat(optional            , is(not(nullValue())));
-		assertThat(optional.isPresent(), is(false));
+			assertThat(optional            , is(not(nullValue())));
+			assertThat(optional.isPresent(), is(false));
+		}
+		else
+		{
+			fail("unexpected type: " + postalAddress.getClass().getName());
+		}
 	}
 }
\ No newline at end of file
Index: ../r-uu.app/demo/server/src/main/java/de/ruu/app/demo/server/company/Company.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.app.demo.server.company;\r\n\r\nimport de.ruu.app.demo.common.datamodel.dto.CompanyDTO;\r\nimport de.ruu.app.demo.common.datamodel.jpa.CompanyEntity;\r\nimport de.ruu.app.demo.common.jpa.CompanyServiceJPA;\r\nimport jakarta.enterprise.context.RequestScoped;\r\nimport jakarta.inject.Inject;\r\nimport jakarta.ws.rs.*;\r\nimport jakarta.ws.rs.core.Response;\r\nimport org.eclipse.microprofile.metrics.annotation.Timed;\r\nimport org.eclipse.microprofile.openapi.annotations.OpenAPIDefinition;\r\nimport org.eclipse.microprofile.openapi.annotations.info.Info;\r\n\r\nimport java.util.Optional;\r\nimport java.util.stream.Collectors;\r\n\r\nimport static de.ruu.app.demo.common.Paths.*;\r\nimport static de.ruu.lib.util.BooleanFunctions.not;\r\nimport static jakarta.ws.rs.core.MediaType.APPLICATION_JSON;\r\nimport static jakarta.ws.rs.core.Response.Status.*;\r\nimport static jakarta.ws.rs.core.Response.ok;\r\nimport static jakarta.ws.rs.core.Response.status;\r\n\r\n/**\r\n * REST controller providing REST endpoints.\r\n * <p>\r\n * Methods accept DTO2 parameters, transform DTOs to entities, delegate to {@link #service} and transform entity\r\n * return values from {@link #service} back to DTOs. The transformations from entities to DTOs are\r\n * intentionally done here after transactions were committed in {@link #service}. This ensures that version\r\n * attributes of DTOs are respected with their new values after commit in returned DTOs.\r\n *\r\n * @author r-uu\r\n */\r\n\r\n@RequestScoped\r\n@Path(COMPANY)\r\n@OpenAPIDefinition(info = @Info(version = \"a version\", title = \"a title\"))\r\n@Timed\r\npublic class Company\r\n{\r\n\t@Inject private CompanyServiceJPA service;\r\n\r\n\t@GET\r\n//\t@Path(COMPANY)\r\n\t@Produces(APPLICATION_JSON)\r\n\tpublic Response findAll()\r\n\t{\r\n\t\treturn\r\n\t\t\t\tok\r\n\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\tservice\r\n\t\t\t\t\t\t\t\t\t\t.findAll()\r\n\t\t\t\t\t\t\t\t\t\t.stream()\r\n\t\t\t\t\t\t\t\t\t\t.map(company -> company.toTarget())\r\n\t\t\t\t\t\t\t\t\t\t.collect(Collectors.toSet())\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t.build();\r\n\t}\r\n\r\n\t@GET\r\n\t@Path(BY_ID)\r\n\t@Produces(APPLICATION_JSON)\r\n\tpublic Response find(@PathParam(\"id\") Long id)\r\n\t{\r\n\t\tOptional<CompanyEntity> result = service.read(id);\r\n\t\tif (not(result.isPresent()))\r\n\t\t\t\treturn status(NOT_FOUND).entity(\"company with id \" + id + \" not found\").build();\r\n\t\telse\r\n\t\t\treturn\r\n\t\t\t\t\tok\r\n\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\tresult\r\n\t\t\t\t\t\t\t\t\t\t\t.get()\r\n\t\t\t\t\t\t\t\t\t\t\t.toTarget()\r\n\t\t\t\t\t\t\t).build();\r\n\t}\r\n\r\n\t@GET\r\n\t@Path(BY_ID_WITH_DEPARTMENTS)\r\n\t@Produces(APPLICATION_JSON)\r\n\tpublic Response findWithDepartments(@PathParam(\"id\") Long id)\r\n\t{\r\n\t\tOptional<CompanyEntity> result = service.findWithDepartments(id);\r\n\t\tif (not(result.isPresent()))\r\n\t\t\treturn status(NOT_FOUND).entity(\"company with id \" + id + \" not found\").build();\r\n\t\telse\r\n\t\t\treturn\r\n\t\t\t\t\tok\r\n\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\tresult\r\n\t\t\t\t\t\t\t\t\t\t\t.get()\r\n\t\t\t\t\t\t\t\t\t\t\t.toTarget()\r\n\t\t\t\t\t\t\t).build();\r\n\t}\r\n\r\n\t@POST\r\n//\t@Path(COMPANY)\r\n\t@Consumes(APPLICATION_JSON)\r\n\t@Produces(APPLICATION_JSON)\r\n\tpublic Response create(CompanyDTO company)\r\n\t{\r\n\t\treturn\r\n\t\t\t\tstatus(CREATED)\r\n\t\t\t\t\t\t.entity\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\tservice\r\n\t\t\t\t\t\t\t\t\t\t\t\t.create(company.toSource())\r\n\t\t\t\t\t\t\t\t\t\t\t\t.toTarget()\r\n\t\t\t\t\t\t\t\t).build();\r\n\t}\r\n\r\n\t@PUT\r\n//\t@Path(COMPANY)\r\n\t@Consumes(APPLICATION_JSON)\r\n\t@Produces(APPLICATION_JSON)\r\n\tpublic Response update(CompanyDTO company)\r\n\t{\r\n\t\treturn\r\n\t\t\t\tok\r\n\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\tservice\r\n\t\t\t\t\t\t\t\t\t\t.create(company.toSource())\r\n\t\t\t\t\t\t\t\t\t\t.toTarget()\r\n\t\t\t\t\t\t).build();\r\n\t}\r\n\r\n\t@DELETE\r\n\t@Path(BY_ID)\r\n\t@Produces(APPLICATION_JSON)\r\n\tpublic Response delete(@PathParam(\"id\") Long id)\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\tservice.delete(id);\r\n\t\t}\r\n\t\tcatch (Exception e)\r\n\t\t{\r\n\t\t\treturn status(CONFLICT).build();\r\n\t\t}\r\n\r\n\t\treturn ok().build();\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/demo/server/src/main/java/de/ruu/app/demo/server/company/Company.java b/../r-uu.app/demo/server/src/main/java/de/ruu/app/demo/server/company/Company.java
--- a/../r-uu.app/demo/server/src/main/java/de/ruu/app/demo/server/company/Company.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/demo/server/src/main/java/de/ruu/app/demo/server/company/Company.java	(date 1720678656422)
@@ -1,11 +1,18 @@
 package de.ruu.app.demo.server.company;
 
-import de.ruu.app.demo.common.datamodel.dto.CompanyDTO;
-import de.ruu.app.demo.common.datamodel.jpa.CompanyEntity;
-import de.ruu.app.demo.common.jpa.CompanyServiceJPA;
+import de.ruu.app.datamodel.company.dto.CompanyDTO;
+import de.ruu.app.datamodel.company.jpa.CompanyEntity;
+import de.ruu.app.datamodel.company.jpadto.CompanyServiceJPA;
 import jakarta.enterprise.context.RequestScoped;
 import jakarta.inject.Inject;
-import jakarta.ws.rs.*;
+import jakarta.ws.rs.Consumes;
+import jakarta.ws.rs.DELETE;
+import jakarta.ws.rs.GET;
+import jakarta.ws.rs.POST;
+import jakarta.ws.rs.PUT;
+import jakarta.ws.rs.Path;
+import jakarta.ws.rs.PathParam;
+import jakarta.ws.rs.Produces;
 import jakarta.ws.rs.core.Response;
 import org.eclipse.microprofile.metrics.annotation.Timed;
 import org.eclipse.microprofile.openapi.annotations.OpenAPIDefinition;
@@ -14,10 +21,14 @@
 import java.util.Optional;
 import java.util.stream.Collectors;
 
-import static de.ruu.app.demo.common.Paths.*;
+import static de.ruu.app.demo.common.Paths.BY_ID;
+import static de.ruu.app.demo.common.Paths.BY_ID_WITH_DEPARTMENTS;
+import static de.ruu.app.demo.common.Paths.COMPANY;
 import static de.ruu.lib.util.BooleanFunctions.not;
 import static jakarta.ws.rs.core.MediaType.APPLICATION_JSON;
-import static jakarta.ws.rs.core.Response.Status.*;
+import static jakarta.ws.rs.core.Response.Status.CONFLICT;
+import static jakarta.ws.rs.core.Response.Status.CREATED;
+import static jakarta.ws.rs.core.Response.Status.NOT_FOUND;
 import static jakarta.ws.rs.core.Response.ok;
 import static jakarta.ws.rs.core.Response.status;
 
Index: ../r-uu.app/datamodel/company/common/src/main/java/module-info.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>module $MODULE_NAME$ {\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/company/common/src/main/java/module-info.java b/../r-uu.app/datamodel/company/common/src/main/java/module-info.java
--- a/../r-uu.app/datamodel/company/common/src/main/java/module-info.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/company/common/src/main/java/module-info.java	(date 1720677295765)
@@ -1,2 +1,6 @@
-module $MODULE_NAME$ {
+module de.ruu.app.datamodel.company.common
+{
+	exports de.ruu.app.datamodel.company;
+
+	requires static lombok;
 }
\ No newline at end of file
Index: ../r-uu.app/datamodel/postaladdress/jpadto/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>r-uu</groupId>\r\n        <artifactId>r-uu.app-datamodel</artifactId>\r\n        <version>0.0.1-SNAPSHOT</version>\r\n        <relativePath>../../pom.xml</relativePath>\r\n    </parent>\r\n\r\n    <artifactId>jpadto</artifactId>\r\n\r\n    <properties>\r\n        <maven.compiler.source>21</maven.compiler.source>\r\n        <maven.compiler.target>21</maven.compiler.target>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n    </properties>\r\n\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/postaladdress/jpadto/pom.xml b/../r-uu.app/datamodel/postaladdress/jpadto/pom.xml
--- a/../r-uu.app/datamodel/postaladdress/jpadto/pom.xml	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/postaladdress/jpadto/pom.xml	(date 1720508533049)
@@ -1,21 +1,45 @@
 <?xml version="1.0" encoding="UTF-8"?>
+
 <project xmlns="http://maven.apache.org/POM/4.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+
     <modelVersion>4.0.0</modelVersion>
+    <artifactId>r-uu.app-datamodel-postaladdress-jpadto</artifactId>
+    <dependencies>
+        <dependency>
+            <groupId>r-uu</groupId>
+            <artifactId>r-uu.lib-jpa-core</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>r-uu</groupId>
+            <artifactId>r-uu.lib-jpa-core</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+            <scope>compile</scope>
+        </dependency>
+        <dependency>
+            <groupId>r-uu</groupId>
+            <artifactId>r-uu.app-datamodel-postaladdress-common</artifactId>
+            <version>0.0.1-SNAPSHOT</version>
+            <scope>compile</scope>
+        </dependency>
+        <dependency>
+            <groupId>r-uu</groupId>
+            <artifactId>r-uu.lib-mapstruct</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>r-uu</groupId>
+            <artifactId>r-uu.lib-jpa-core-mapstruct</artifactId>
+        </dependency>
+    </dependencies>
+
     <parent>
         <groupId>r-uu</groupId>
-        <artifactId>r-uu.app-datamodel</artifactId>
+        <artifactId>r-uu.app-datamodel-postaladdress</artifactId>
         <version>0.0.1-SNAPSHOT</version>
-        <relativePath>../../pom.xml</relativePath>
     </parent>
 
-    <artifactId>jpadto</artifactId>
-
-    <properties>
-        <maven.compiler.source>21</maven.compiler.source>
-        <maven.compiler.target>21</maven.compiler.target>
-        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-    </properties>
-
 </project>
\ No newline at end of file
Index: ../r-uu.app/demo/common/src/main/resources/META-INF/beans_.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<beans xmlns=\"https://jakarta.ee/xml/ns/jakartaee\"\r\n\t   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n\t   xsi:schemaLocation=\"https://jakarta.ee/xml/ns/jakartaee\r\n                           https://jakarta.ee/xml/ns/jakartaee/beans_4_0.xsd\"\r\n\t   version=\"4.0\"\r\n\t   bean-discovery-mode=\"all\">\r\n\t<!--    <interceptors>-->\r\n\t<!--        <class>de.ruu.lib.jpa.se.AbstractTransactionalInterceptor</class>-->\r\n\t<!--    </interceptors>-->\r\n\t<!--\t<scan>-->\r\n\t<!--\t\t<exclude name=\"org.**\" />-->\r\n\t<!--\t</scan>-->\r\n</beans>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/demo/common/src/main/resources/META-INF/beans_.xml b/../r-uu.app/demo/common/src/main/resources/META-INF/beans_.xml
--- a/../r-uu.app/demo/common/src/main/resources/META-INF/beans_.xml	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/demo/common/src/main/resources/META-INF/beans_.xml	(date 1720271062525)
@@ -1,4 +1,7 @@
+<!-- this file serves as a template for valid beans.xml files -->
+
 <?xml version="1.0" encoding="UTF-8" ?>
+
 <beans xmlns="https://jakarta.ee/xml/ns/jakartaee"
 	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 	   xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee
Index: ../r-uu.app/demo/client/src/test/java/de/ruu/app/demo/client/datamodel/fx/postaladdress/DataModelMainGeneratorRunner.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.app.demo.client.fx;\r\n\r\nimport java.io.IOException;\r\n\r\nimport de.ruu.lib.gen.GeneratorException;\r\nimport de.ruu.lib.gen.java.fx.comp.GeneratorFXCompBundle;\r\nimport lombok.extern.slf4j.Slf4j;\r\n\r\n@Slf4j\r\nclass CompanyMainGeneratorRunner\r\n{\r\n\tpublic static void main(String[] args) throws IOException, GeneratorException\r\n\t{\r\n\t\tGeneratorFXCompBundle generator;\r\n\t\tString                packageName = CompanyMainGeneratorRunner.class.getPackageName();\r\n\r\n\t\tlog.debug(\"creating java fx component {} bundles\", packageName);\r\n\t\tgenerator = new GeneratorFXCompBundle(packageName, \"Main\");\r\n\t\tgenerator.run();\r\n\t\tlog.debug(\"created  java fx component {} bundles\", packageName);\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/demo/client/src/test/java/de/ruu/app/demo/client/datamodel/fx/postaladdress/DataModelMainGeneratorRunner.java b/../r-uu.app/demo/client/src/test/java/de/ruu/app/demo/client/datamodel/fx/postaladdress/DataModelMainGeneratorRunner.java
--- a/../r-uu.app/demo/client/src/test/java/de/ruu/app/demo/client/datamodel/fx/postaladdress/DataModelMainGeneratorRunner.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/demo/client/src/test/java/de/ruu/app/demo/client/datamodel/fx/postaladdress/DataModelMainGeneratorRunner.java	(date 1720539793626)
@@ -1,18 +1,18 @@
-package de.ruu.app.demo.client.fx;
-
-import java.io.IOException;
+package de.ruu.app.demo.client.datamodel.fx.postaladdress;
 
 import de.ruu.lib.gen.GeneratorException;
 import de.ruu.lib.gen.java.fx.comp.GeneratorFXCompBundle;
 import lombok.extern.slf4j.Slf4j;
 
+import java.io.IOException;
+
 @Slf4j
-class CompanyMainGeneratorRunner
+class DataModelMainGeneratorRunner
 {
 	public static void main(String[] args) throws IOException, GeneratorException
 	{
 		GeneratorFXCompBundle generator;
-		String                packageName = CompanyMainGeneratorRunner.class.getPackageName();
+		String                packageName = DataModelMainGeneratorRunner.class.getPackageName();
 
 		log.debug("creating java fx component {} bundles", packageName);
 		generator = new GeneratorFXCompBundle(packageName, "Main");
Index: ../r-uu.app/datamodel/postaladdress/jpadto/src/main/java/module-info.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>module $MODULE_NAME$ {\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/postaladdress/jpadto/src/main/java/module-info.java b/../r-uu.app/datamodel/postaladdress/jpadto/src/main/java/module-info.java
--- a/../r-uu.app/datamodel/postaladdress/jpadto/src/main/java/module-info.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/postaladdress/jpadto/src/main/java/module-info.java	(date 1720627622220)
@@ -1,2 +1,17 @@
-module $MODULE_NAME$ {
+module de.ruu.app.datamodel.postaladdress.jpadto
+{
+	exports de.ruu.app.datamodel.postaladdress.jpadto;
+	exports de.ruu.app.datamodel.postaladdress.jpa;
+	exports de.ruu.app.datamodel.postaladdress.dto;
+
+	requires static lombok;
+
+	requires jakarta.annotation;
+	requires jakarta.persistence;
+	requires org.mapstruct;
+
+	requires de.ruu.lib.jpa.core;
+	requires de.ruu.app.datamodel.postaladdress.common;
+	requires de.ruu.lib.mapstruct;
+	requires de.ruu.lib.jpa.core.mapstruct;
 }
\ No newline at end of file
Index: ../r-uu.app/datamodel/postaladdress/common/src/main/java/module-info.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>module $MODULE_NAME$ {\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/datamodel/postaladdress/common/src/main/java/module-info.java b/../r-uu.app/datamodel/postaladdress/common/src/main/java/module-info.java
--- a/../r-uu.app/datamodel/postaladdress/common/src/main/java/module-info.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/datamodel/postaladdress/common/src/main/java/module-info.java	(date 1720509808761)
@@ -1,2 +1,5 @@
-module $MODULE_NAME$ {
+module de.ruu.app.datamodel.postaladdress.common
+{
+	requires static lombok;
+	exports de.ruu.app.datamodel.postaladdress;
 }
\ No newline at end of file
Index: ../r-uu.app/demo/server/src/main/java/de/ruu/app/demo/server/datamodel/postaladdress/PostalAddress.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.ruu.app.demo.server.company;\r\n\r\nimport de.ruu.app.demo.common.datamodel.dto.CompanyDTO;\r\nimport de.ruu.app.demo.common.datamodel.jpa.CompanyEntity;\r\nimport de.ruu.app.demo.common.jpa.CompanyServiceJPA;\r\nimport jakarta.enterprise.context.RequestScoped;\r\nimport jakarta.inject.Inject;\r\nimport jakarta.ws.rs.*;\r\nimport jakarta.ws.rs.core.Response;\r\nimport org.eclipse.microprofile.metrics.annotation.Timed;\r\nimport org.eclipse.microprofile.openapi.annotations.OpenAPIDefinition;\r\nimport org.eclipse.microprofile.openapi.annotations.info.Info;\r\n\r\nimport java.util.Optional;\r\nimport java.util.stream.Collectors;\r\n\r\nimport static de.ruu.app.demo.common.Paths.*;\r\nimport static de.ruu.lib.util.BooleanFunctions.not;\r\nimport static jakarta.ws.rs.core.MediaType.APPLICATION_JSON;\r\nimport static jakarta.ws.rs.core.Response.Status.*;\r\nimport static jakarta.ws.rs.core.Response.ok;\r\nimport static jakarta.ws.rs.core.Response.status;\r\n\r\n/**\r\n * REST controller providing REST endpoints.\r\n * <p>\r\n * Methods accept DTO2 parameters, transform DTOs to entities, delegate to {@link #service} and transform entity\r\n * return values from {@link #service} back to DTOs. The transformations from entities to DTOs are\r\n * intentionally done here after transactions were committed in {@link #service}. This ensures that version\r\n * attributes of DTOs are respected with their new values after commit in returned DTOs.\r\n *\r\n * @author r-uu\r\n */\r\n\r\n@RequestScoped\r\n@Path(COMPANY)\r\n@OpenAPIDefinition(info = @Info(version = \"a version\", title = \"a title\"))\r\n@Timed\r\npublic class Company\r\n{\r\n\t@Inject private CompanyServiceJPA service;\r\n\r\n\t@GET\r\n//\t@Path(COMPANY)\r\n\t@Produces(APPLICATION_JSON)\r\n\tpublic Response findAll()\r\n\t{\r\n\t\treturn\r\n\t\t\t\tok\r\n\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\tservice\r\n\t\t\t\t\t\t\t\t\t\t.findAll()\r\n\t\t\t\t\t\t\t\t\t\t.stream()\r\n\t\t\t\t\t\t\t\t\t\t.map(company -> company.toTarget())\r\n\t\t\t\t\t\t\t\t\t\t.collect(Collectors.toSet())\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t.build();\r\n\t}\r\n\r\n\t@GET\r\n\t@Path(BY_ID)\r\n\t@Produces(APPLICATION_JSON)\r\n\tpublic Response find(@PathParam(\"id\") Long id)\r\n\t{\r\n\t\tOptional<CompanyEntity> result = service.read(id);\r\n\t\tif (not(result.isPresent()))\r\n\t\t\t\treturn status(NOT_FOUND).entity(\"company with id \" + id + \" not found\").build();\r\n\t\telse\r\n\t\t\treturn\r\n\t\t\t\t\tok\r\n\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\tresult\r\n\t\t\t\t\t\t\t\t\t\t\t.get()\r\n\t\t\t\t\t\t\t\t\t\t\t.toTarget()\r\n\t\t\t\t\t\t\t).build();\r\n\t}\r\n\r\n\t@GET\r\n\t@Path(BY_ID_WITH_DEPARTMENTS)\r\n\t@Produces(APPLICATION_JSON)\r\n\tpublic Response findWithDepartments(@PathParam(\"id\") Long id)\r\n\t{\r\n\t\tOptional<CompanyEntity> result = service.findWithDepartments(id);\r\n\t\tif (not(result.isPresent()))\r\n\t\t\treturn status(NOT_FOUND).entity(\"company with id \" + id + \" not found\").build();\r\n\t\telse\r\n\t\t\treturn\r\n\t\t\t\t\tok\r\n\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\tresult\r\n\t\t\t\t\t\t\t\t\t\t\t.get()\r\n\t\t\t\t\t\t\t\t\t\t\t.toTarget()\r\n\t\t\t\t\t\t\t).build();\r\n\t}\r\n\r\n\t@POST\r\n//\t@Path(COMPANY)\r\n\t@Consumes(APPLICATION_JSON)\r\n\t@Produces(APPLICATION_JSON)\r\n\tpublic Response create(CompanyDTO company)\r\n\t{\r\n\t\treturn\r\n\t\t\t\tstatus(CREATED)\r\n\t\t\t\t\t\t.entity\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\tservice\r\n\t\t\t\t\t\t\t\t\t\t\t\t.create(company.toSource())\r\n\t\t\t\t\t\t\t\t\t\t\t\t.toTarget()\r\n\t\t\t\t\t\t\t\t).build();\r\n\t}\r\n\r\n\t@PUT\r\n//\t@Path(COMPANY)\r\n\t@Consumes(APPLICATION_JSON)\r\n\t@Produces(APPLICATION_JSON)\r\n\tpublic Response update(CompanyDTO company)\r\n\t{\r\n\t\treturn\r\n\t\t\t\tok\r\n\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\tservice\r\n\t\t\t\t\t\t\t\t\t\t.create(company.toSource())\r\n\t\t\t\t\t\t\t\t\t\t.toTarget()\r\n\t\t\t\t\t\t).build();\r\n\t}\r\n\r\n\t@DELETE\r\n\t@Path(BY_ID)\r\n\t@Produces(APPLICATION_JSON)\r\n\tpublic Response delete(@PathParam(\"id\") Long id)\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\tservice.delete(id);\r\n\t\t}\r\n\t\tcatch (Exception e)\r\n\t\t{\r\n\t\t\treturn status(CONFLICT).build();\r\n\t\t}\r\n\r\n\t\treturn ok().build();\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../r-uu.app/demo/server/src/main/java/de/ruu/app/demo/server/datamodel/postaladdress/PostalAddress.java b/../r-uu.app/demo/server/src/main/java/de/ruu/app/demo/server/datamodel/postaladdress/PostalAddress.java
--- a/../r-uu.app/demo/server/src/main/java/de/ruu/app/demo/server/datamodel/postaladdress/PostalAddress.java	(revision 1d6c0a1290b8abc56668ac9d66246b88fbd7389e)
+++ b/../r-uu.app/demo/server/src/main/java/de/ruu/app/demo/server/datamodel/postaladdress/PostalAddress.java	(date 1720627622244)
@@ -1,11 +1,18 @@
-package de.ruu.app.demo.server.company;
+package de.ruu.app.demo.server.datamodel.postaladdress;
 
-import de.ruu.app.demo.common.datamodel.dto.CompanyDTO;
-import de.ruu.app.demo.common.datamodel.jpa.CompanyEntity;
-import de.ruu.app.demo.common.jpa.CompanyServiceJPA;
+import de.ruu.app.datamodel.postaladdress.dto.PostalAddressDTO;
+import de.ruu.app.datamodel.postaladdress.jpa.PostalAddressEntity;
+import de.ruu.app.datamodel.postaladdress.jpa.PostalAddressServiceJPA;
 import jakarta.enterprise.context.RequestScoped;
 import jakarta.inject.Inject;
-import jakarta.ws.rs.*;
+import jakarta.ws.rs.Consumes;
+import jakarta.ws.rs.DELETE;
+import jakarta.ws.rs.GET;
+import jakarta.ws.rs.POST;
+import jakarta.ws.rs.PUT;
+import jakarta.ws.rs.Path;
+import jakarta.ws.rs.PathParam;
+import jakarta.ws.rs.Produces;
 import jakarta.ws.rs.core.Response;
 import org.eclipse.microprofile.metrics.annotation.Timed;
 import org.eclipse.microprofile.openapi.annotations.OpenAPIDefinition;
@@ -14,10 +21,13 @@
 import java.util.Optional;
 import java.util.stream.Collectors;
 
-import static de.ruu.app.demo.common.Paths.*;
+import static de.ruu.app.demo.common.Paths.BY_ID;
+import static de.ruu.app.demo.common.Paths.POSTAL_ADDRESS;
 import static de.ruu.lib.util.BooleanFunctions.not;
 import static jakarta.ws.rs.core.MediaType.APPLICATION_JSON;
-import static jakarta.ws.rs.core.Response.Status.*;
+import static jakarta.ws.rs.core.Response.Status.CONFLICT;
+import static jakarta.ws.rs.core.Response.Status.CREATED;
+import static jakarta.ws.rs.core.Response.Status.NOT_FOUND;
 import static jakarta.ws.rs.core.Response.ok;
 import static jakarta.ws.rs.core.Response.status;
 
@@ -33,15 +43,14 @@
  */
 
 @RequestScoped
-@Path(COMPANY)
+@Path(POSTAL_ADDRESS)
 @OpenAPIDefinition(info = @Info(version = "a version", title = "a title"))
 @Timed
-public class Company
+public class PostalAddress
 {
-	@Inject private CompanyServiceJPA service;
+	@Inject private PostalAddressServiceJPA service;
 
 	@GET
-//	@Path(COMPANY)
 	@Produces(APPLICATION_JSON)
 	public Response findAll()
 	{
@@ -51,7 +60,7 @@
 								service
 										.findAll()
 										.stream()
-										.map(company -> company.toTarget())
+										.map(entity -> entity.toTarget())
 										.collect(Collectors.toSet())
 						)
 						.build();
@@ -62,27 +71,9 @@
 	@Produces(APPLICATION_JSON)
 	public Response find(@PathParam("id") Long id)
 	{
-		Optional<CompanyEntity> result = service.read(id);
+		Optional<PostalAddressEntity> result = service.read(id);
 		if (not(result.isPresent()))
-				return status(NOT_FOUND).entity("company with id " + id + " not found").build();
-		else
-			return
-					ok
-							(
-									result
-											.get()
-											.toTarget()
-							).build();
-	}
-
-	@GET
-	@Path(BY_ID_WITH_DEPARTMENTS)
-	@Produces(APPLICATION_JSON)
-	public Response findWithDepartments(@PathParam("id") Long id)
-	{
-		Optional<CompanyEntity> result = service.findWithDepartments(id);
-		if (not(result.isPresent()))
-			return status(NOT_FOUND).entity("company with id " + id + " not found").build();
+				return status(NOT_FOUND).entity("address with id " + id + " not found").build();
 		else
 			return
 					ok
@@ -94,32 +85,30 @@
 	}
 
 	@POST
-//	@Path(COMPANY)
 	@Consumes(APPLICATION_JSON)
 	@Produces(APPLICATION_JSON)
-	public Response create(CompanyDTO company)
+	public Response create(PostalAddressDTO dto)
 	{
 		return
 				status(CREATED)
 						.entity
 								(
 										service
-												.create(company.toSource())
+												.create(dto.toSource())
 												.toTarget()
 								).build();
 	}
 
 	@PUT
-//	@Path(COMPANY)
 	@Consumes(APPLICATION_JSON)
 	@Produces(APPLICATION_JSON)
-	public Response update(CompanyDTO company)
+	public Response update(PostalAddressDTO dto)
 	{
 		return
 				ok
 						(
 								service
-										.create(company.toSource())
+										.create(dto.toSource())
 										.toTarget()
 						).build();
 	}
